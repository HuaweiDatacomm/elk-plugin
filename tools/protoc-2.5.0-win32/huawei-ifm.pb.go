// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: huawei-ifm.proto

package huawei_ifm

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Ifm_Interfaces_Interface_Class1 int32

const (
	Ifm_Interfaces_Interface_Class_MAINX_INTERFACE Ifm_Interfaces_Interface_Class1 = 0
	Ifm_Interfaces_Interface_Class_SUBX_INTERFACE  Ifm_Interfaces_Interface_Class1 = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Class1.
var (
	Ifm_Interfaces_Interface_Class1_name = map[int32]string{
		0: "Class_MAINX_INTERFACE",
		1: "Class_SUBX_INTERFACE",
	}
	Ifm_Interfaces_Interface_Class1_value = map[string]int32{
		"Class_MAINX_INTERFACE": 0,
		"Class_SUBX_INTERFACE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Class1) Enum() *Ifm_Interfaces_Interface_Class1 {
	p := new(Ifm_Interfaces_Interface_Class1)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Class1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Class1) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[0].Descriptor()
}

func (Ifm_Interfaces_Interface_Class1) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[0]
}

func (x Ifm_Interfaces_Interface_Class1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Class1) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Class1(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Class1.Descriptor instead.
func (Ifm_Interfaces_Interface_Class1) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

type Ifm_Interfaces_Interface_Type int32

const (
	Ifm_Interfaces_Interface_Type_ETHERNET           Ifm_Interfaces_Interface_Type = 0
	Ifm_Interfaces_Interface_Type_GIGABITETHERNET    Ifm_Interfaces_Interface_Type = 2
	Ifm_Interfaces_Interface_Type_ETHX_TRUNK         Ifm_Interfaces_Interface_Type = 4
	Ifm_Interfaces_Interface_Type_IPX_TRUNK          Ifm_Interfaces_Interface_Type = 5
	Ifm_Interfaces_Interface_Type_VIRTUALX_ETHERNET  Ifm_Interfaces_Interface_Type = 6
	Ifm_Interfaces_Interface_Type_SERIAL             Ifm_Interfaces_Interface_Type = 8
	Ifm_Interfaces_Interface_Type_POS                Ifm_Interfaces_Interface_Type = 9
	Ifm_Interfaces_Interface_Type_CPOS               Ifm_Interfaces_Interface_Type = 10
	Ifm_Interfaces_Interface_Type_ATM                Ifm_Interfaces_Interface_Type = 11
	Ifm_Interfaces_Interface_Type_TUNNEL             Ifm_Interfaces_Interface_Type = 14
	Ifm_Interfaces_Interface_Type_VLANIF             Ifm_Interfaces_Interface_Type = 15
	Ifm_Interfaces_Interface_Type_NULL               Ifm_Interfaces_Interface_Type = 18
	Ifm_Interfaces_Interface_Type_LOOPBACK           Ifm_Interfaces_Interface_Type = 19
	Ifm_Interfaces_Interface_Type_X_100GE            Ifm_Interfaces_Interface_Type = 20
	Ifm_Interfaces_Interface_Type_LMPIF              Ifm_Interfaces_Interface_Type = 21
	Ifm_Interfaces_Interface_Type_MTUNNEL            Ifm_Interfaces_Interface_Type = 22
	Ifm_Interfaces_Interface_Type_X_40GE             Ifm_Interfaces_Interface_Type = 23
	Ifm_Interfaces_Interface_Type_X_10GE             Ifm_Interfaces_Interface_Type = 24
	Ifm_Interfaces_Interface_Type_GEBRIEF            Ifm_Interfaces_Interface_Type = 25
	Ifm_Interfaces_Interface_Type_METH               Ifm_Interfaces_Interface_Type = 26
	Ifm_Interfaces_Interface_Type_STACKX_PORT        Ifm_Interfaces_Interface_Type = 27
	Ifm_Interfaces_Interface_Type_SIP                Ifm_Interfaces_Interface_Type = 28
	Ifm_Interfaces_Interface_Type_E1                 Ifm_Interfaces_Interface_Type = 30
	Ifm_Interfaces_Interface_Type_MPX_GROUP          Ifm_Interfaces_Interface_Type = 31
	Ifm_Interfaces_Interface_Type_IMAX_GROUP         Ifm_Interfaces_Interface_Type = 32
	Ifm_Interfaces_Interface_Type_VMETH              Ifm_Interfaces_Interface_Type = 33
	Ifm_Interfaces_Interface_Type_REMOTEX_AP         Ifm_Interfaces_Interface_Type = 35
	Ifm_Interfaces_Interface_Type_VBRIDGE            Ifm_Interfaces_Interface_Type = 36
	Ifm_Interfaces_Interface_Type_ATMX_BUNDLE        Ifm_Interfaces_Interface_Type = 37
	Ifm_Interfaces_Interface_Type_FIBERX_CHANNEL     Ifm_Interfaces_Interface_Type = 38
	Ifm_Interfaces_Interface_Type_INFINIBAND         Ifm_Interfaces_Interface_Type = 39
	Ifm_Interfaces_Interface_Type_VBDIF              Ifm_Interfaces_Interface_Type = 40
	Ifm_Interfaces_Interface_Type_T1                 Ifm_Interfaces_Interface_Type = 41
	Ifm_Interfaces_Interface_Type_T3                 Ifm_Interfaces_Interface_Type = 42
	Ifm_Interfaces_Interface_Type_VC4                Ifm_Interfaces_Interface_Type = 43
	Ifm_Interfaces_Interface_Type_VC12               Ifm_Interfaces_Interface_Type = 44
	Ifm_Interfaces_Interface_Type_GLOBALX_VE         Ifm_Interfaces_Interface_Type = 45
	Ifm_Interfaces_Interface_Type_FABRICX_PORT       Ifm_Interfaces_Interface_Type = 46
	Ifm_Interfaces_Interface_Type_E3                 Ifm_Interfaces_Interface_Type = 48
	Ifm_Interfaces_Interface_Type_VP                 Ifm_Interfaces_Interface_Type = 49
	Ifm_Interfaces_Interface_Type_DCNINTERFACE       Ifm_Interfaces_Interface_Type = 50
	Ifm_Interfaces_Interface_Type_CPOSX_TRUNK        Ifm_Interfaces_Interface_Type = 51
	Ifm_Interfaces_Interface_Type_TRUNKX_SERIAL      Ifm_Interfaces_Interface_Type = 52
	Ifm_Interfaces_Interface_Type_GLOBALX_MPX_GROUP  Ifm_Interfaces_Interface_Type = 53
	Ifm_Interfaces_Interface_Type_OTN                Ifm_Interfaces_Interface_Type = 55
	Ifm_Interfaces_Interface_Type_GLOBALX_IMAX_GROUP Ifm_Interfaces_Interface_Type = 57
	Ifm_Interfaces_Interface_Type_POSX_TRUNK         Ifm_Interfaces_Interface_Type = 59
	Ifm_Interfaces_Interface_Type_GMPLSX_UNI         Ifm_Interfaces_Interface_Type = 63
	Ifm_Interfaces_Interface_Type_WDM                Ifm_Interfaces_Interface_Type = 64
	Ifm_Interfaces_Interface_Type_NVE                Ifm_Interfaces_Interface_Type = 65
	Ifm_Interfaces_Interface_Type_FCOEX_PORT         Ifm_Interfaces_Interface_Type = 67
	Ifm_Interfaces_Interface_Type_VIRTUALX_TEMPLATE  Ifm_Interfaces_Interface_Type = 68
	Ifm_Interfaces_Interface_Type_FC                 Ifm_Interfaces_Interface_Type = 70
	Ifm_Interfaces_Interface_Type_X_4X10GE           Ifm_Interfaces_Interface_Type = 71
	Ifm_Interfaces_Interface_Type_X_10X10GE          Ifm_Interfaces_Interface_Type = 72
	Ifm_Interfaces_Interface_Type_X_3X40GE           Ifm_Interfaces_Interface_Type = 73
	Ifm_Interfaces_Interface_Type_X_4X25GE           Ifm_Interfaces_Interface_Type = 74
	Ifm_Interfaces_Interface_Type_X_25GE             Ifm_Interfaces_Interface_Type = 75
	Ifm_Interfaces_Interface_Type_IMETH              Ifm_Interfaces_Interface_Type = 79
	Ifm_Interfaces_Interface_Type_PWX_VE             Ifm_Interfaces_Interface_Type = 88
	Ifm_Interfaces_Interface_Type_VXX_TUNNEL         Ifm_Interfaces_Interface_Type = 89
	Ifm_Interfaces_Interface_Type_SERVICEIF          Ifm_Interfaces_Interface_Type = 90
	Ifm_Interfaces_Interface_Type_XGIGABITETHERNET   Ifm_Interfaces_Interface_Type = 91
	Ifm_Interfaces_Interface_Type_X_200GE            Ifm_Interfaces_Interface_Type = 92
	Ifm_Interfaces_Interface_Type_VIRTUALX_ODUK      Ifm_Interfaces_Interface_Type = 94
	Ifm_Interfaces_Interface_Type_FLEXE              Ifm_Interfaces_Interface_Type = 95
	Ifm_Interfaces_Interface_Type_FLEXEX_200GE       Ifm_Interfaces_Interface_Type = 96
	Ifm_Interfaces_Interface_Type_X_50X_100GE        Ifm_Interfaces_Interface_Type = 101
	Ifm_Interfaces_Interface_Type_X_50GE             Ifm_Interfaces_Interface_Type = 102
	Ifm_Interfaces_Interface_Type_FLEXEX_50G         Ifm_Interfaces_Interface_Type = 103
	Ifm_Interfaces_Interface_Type_FLEXEX_100G        Ifm_Interfaces_Interface_Type = 104
	Ifm_Interfaces_Interface_Type_FLEXEX_50X_100G    Ifm_Interfaces_Interface_Type = 105
	Ifm_Interfaces_Interface_Type_VIRTUALX_SERIAL    Ifm_Interfaces_Interface_Type = 107
	Ifm_Interfaces_Interface_Type_X_400GE            Ifm_Interfaces_Interface_Type = 108
	Ifm_Interfaces_Interface_Type_HPGE               Ifm_Interfaces_Interface_Type = 114
	Ifm_Interfaces_Interface_Type_VIRTUALX_IF        Ifm_Interfaces_Interface_Type = 116
)

// Enum value maps for Ifm_Interfaces_Interface_Type.
var (
	Ifm_Interfaces_Interface_Type_name = map[int32]string{
		0:   "Type_ETHERNET",
		2:   "Type_GIGABITETHERNET",
		4:   "Type_ETHX_TRUNK",
		5:   "Type_IPX_TRUNK",
		6:   "Type_VIRTUALX_ETHERNET",
		8:   "Type_SERIAL",
		9:   "Type_POS",
		10:  "Type_CPOS",
		11:  "Type_ATM",
		14:  "Type_TUNNEL",
		15:  "Type_VLANIF",
		18:  "Type_NULL",
		19:  "Type_LOOPBACK",
		20:  "Type_X_100GE",
		21:  "Type_LMPIF",
		22:  "Type_MTUNNEL",
		23:  "Type_X_40GE",
		24:  "Type_X_10GE",
		25:  "Type_GEBRIEF",
		26:  "Type_METH",
		27:  "Type_STACKX_PORT",
		28:  "Type_SIP",
		30:  "Type_E1",
		31:  "Type_MPX_GROUP",
		32:  "Type_IMAX_GROUP",
		33:  "Type_VMETH",
		35:  "Type_REMOTEX_AP",
		36:  "Type_VBRIDGE",
		37:  "Type_ATMX_BUNDLE",
		38:  "Type_FIBERX_CHANNEL",
		39:  "Type_INFINIBAND",
		40:  "Type_VBDIF",
		41:  "Type_T1",
		42:  "Type_T3",
		43:  "Type_VC4",
		44:  "Type_VC12",
		45:  "Type_GLOBALX_VE",
		46:  "Type_FABRICX_PORT",
		48:  "Type_E3",
		49:  "Type_VP",
		50:  "Type_DCNINTERFACE",
		51:  "Type_CPOSX_TRUNK",
		52:  "Type_TRUNKX_SERIAL",
		53:  "Type_GLOBALX_MPX_GROUP",
		55:  "Type_OTN",
		57:  "Type_GLOBALX_IMAX_GROUP",
		59:  "Type_POSX_TRUNK",
		63:  "Type_GMPLSX_UNI",
		64:  "Type_WDM",
		65:  "Type_NVE",
		67:  "Type_FCOEX_PORT",
		68:  "Type_VIRTUALX_TEMPLATE",
		70:  "Type_FC",
		71:  "Type_X_4X10GE",
		72:  "Type_X_10X10GE",
		73:  "Type_X_3X40GE",
		74:  "Type_X_4X25GE",
		75:  "Type_X_25GE",
		79:  "Type_IMETH",
		88:  "Type_PWX_VE",
		89:  "Type_VXX_TUNNEL",
		90:  "Type_SERVICEIF",
		91:  "Type_XGIGABITETHERNET",
		92:  "Type_X_200GE",
		94:  "Type_VIRTUALX_ODUK",
		95:  "Type_FLEXE",
		96:  "Type_FLEXEX_200GE",
		101: "Type_X_50X_100GE",
		102: "Type_X_50GE",
		103: "Type_FLEXEX_50G",
		104: "Type_FLEXEX_100G",
		105: "Type_FLEXEX_50X_100G",
		107: "Type_VIRTUALX_SERIAL",
		108: "Type_X_400GE",
		114: "Type_HPGE",
		116: "Type_VIRTUALX_IF",
	}
	Ifm_Interfaces_Interface_Type_value = map[string]int32{
		"Type_ETHERNET":           0,
		"Type_GIGABITETHERNET":    2,
		"Type_ETHX_TRUNK":         4,
		"Type_IPX_TRUNK":          5,
		"Type_VIRTUALX_ETHERNET":  6,
		"Type_SERIAL":             8,
		"Type_POS":                9,
		"Type_CPOS":               10,
		"Type_ATM":                11,
		"Type_TUNNEL":             14,
		"Type_VLANIF":             15,
		"Type_NULL":               18,
		"Type_LOOPBACK":           19,
		"Type_X_100GE":            20,
		"Type_LMPIF":              21,
		"Type_MTUNNEL":            22,
		"Type_X_40GE":             23,
		"Type_X_10GE":             24,
		"Type_GEBRIEF":            25,
		"Type_METH":               26,
		"Type_STACKX_PORT":        27,
		"Type_SIP":                28,
		"Type_E1":                 30,
		"Type_MPX_GROUP":          31,
		"Type_IMAX_GROUP":         32,
		"Type_VMETH":              33,
		"Type_REMOTEX_AP":         35,
		"Type_VBRIDGE":            36,
		"Type_ATMX_BUNDLE":        37,
		"Type_FIBERX_CHANNEL":     38,
		"Type_INFINIBAND":         39,
		"Type_VBDIF":              40,
		"Type_T1":                 41,
		"Type_T3":                 42,
		"Type_VC4":                43,
		"Type_VC12":               44,
		"Type_GLOBALX_VE":         45,
		"Type_FABRICX_PORT":       46,
		"Type_E3":                 48,
		"Type_VP":                 49,
		"Type_DCNINTERFACE":       50,
		"Type_CPOSX_TRUNK":        51,
		"Type_TRUNKX_SERIAL":      52,
		"Type_GLOBALX_MPX_GROUP":  53,
		"Type_OTN":                55,
		"Type_GLOBALX_IMAX_GROUP": 57,
		"Type_POSX_TRUNK":         59,
		"Type_GMPLSX_UNI":         63,
		"Type_WDM":                64,
		"Type_NVE":                65,
		"Type_FCOEX_PORT":         67,
		"Type_VIRTUALX_TEMPLATE":  68,
		"Type_FC":                 70,
		"Type_X_4X10GE":           71,
		"Type_X_10X10GE":          72,
		"Type_X_3X40GE":           73,
		"Type_X_4X25GE":           74,
		"Type_X_25GE":             75,
		"Type_IMETH":              79,
		"Type_PWX_VE":             88,
		"Type_VXX_TUNNEL":         89,
		"Type_SERVICEIF":          90,
		"Type_XGIGABITETHERNET":   91,
		"Type_X_200GE":            92,
		"Type_VIRTUALX_ODUK":      94,
		"Type_FLEXE":              95,
		"Type_FLEXEX_200GE":       96,
		"Type_X_50X_100GE":        101,
		"Type_X_50GE":             102,
		"Type_FLEXEX_50G":         103,
		"Type_FLEXEX_100G":        104,
		"Type_FLEXEX_50X_100G":    105,
		"Type_VIRTUALX_SERIAL":    107,
		"Type_X_400GE":            108,
		"Type_HPGE":               114,
		"Type_VIRTUALX_IF":        116,
	}
)

func (x Ifm_Interfaces_Interface_Type) Enum() *Ifm_Interfaces_Interface_Type {
	p := new(Ifm_Interfaces_Interface_Type)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[1].Descriptor()
}

func (Ifm_Interfaces_Interface_Type) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[1]
}

func (x Ifm_Interfaces_Interface_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Type(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Type.Descriptor instead.
func (Ifm_Interfaces_Interface_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

type Ifm_Interfaces_Interface_AdminStatus int32

const (
	Ifm_Interfaces_Interface_AdminStatus_DOWN Ifm_Interfaces_Interface_AdminStatus = 0
	Ifm_Interfaces_Interface_AdminStatus_UP   Ifm_Interfaces_Interface_AdminStatus = 1
)

// Enum value maps for Ifm_Interfaces_Interface_AdminStatus.
var (
	Ifm_Interfaces_Interface_AdminStatus_name = map[int32]string{
		0: "AdminStatus_DOWN",
		1: "AdminStatus_UP",
	}
	Ifm_Interfaces_Interface_AdminStatus_value = map[string]int32{
		"AdminStatus_DOWN": 0,
		"AdminStatus_UP":   1,
	}
)

func (x Ifm_Interfaces_Interface_AdminStatus) Enum() *Ifm_Interfaces_Interface_AdminStatus {
	p := new(Ifm_Interfaces_Interface_AdminStatus)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_AdminStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_AdminStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[2].Descriptor()
}

func (Ifm_Interfaces_Interface_AdminStatus) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[2]
}

func (x Ifm_Interfaces_Interface_AdminStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_AdminStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_AdminStatus(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_AdminStatus.Descriptor instead.
func (Ifm_Interfaces_Interface_AdminStatus) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 2}
}

type Ifm_Interfaces_Interface_LinkProtocol int32

const (
	Ifm_Interfaces_Interface_LinkProtocol_ETHERNET Ifm_Interfaces_Interface_LinkProtocol = 0
	Ifm_Interfaces_Interface_LinkProtocol_PPP      Ifm_Interfaces_Interface_LinkProtocol = 1
	Ifm_Interfaces_Interface_LinkProtocol_HDLC     Ifm_Interfaces_Interface_LinkProtocol = 2
	Ifm_Interfaces_Interface_LinkProtocol_FR       Ifm_Interfaces_Interface_LinkProtocol = 3
	Ifm_Interfaces_Interface_LinkProtocol_ATM      Ifm_Interfaces_Interface_LinkProtocol = 6
	Ifm_Interfaces_Interface_LinkProtocol_TDM      Ifm_Interfaces_Interface_LinkProtocol = 7
	Ifm_Interfaces_Interface_LinkProtocol_INVALID  Ifm_Interfaces_Interface_LinkProtocol = 255
)

// Enum value maps for Ifm_Interfaces_Interface_LinkProtocol.
var (
	Ifm_Interfaces_Interface_LinkProtocol_name = map[int32]string{
		0:   "LinkProtocol_ETHERNET",
		1:   "LinkProtocol_PPP",
		2:   "LinkProtocol_HDLC",
		3:   "LinkProtocol_FR",
		6:   "LinkProtocol_ATM",
		7:   "LinkProtocol_TDM",
		255: "LinkProtocol_INVALID",
	}
	Ifm_Interfaces_Interface_LinkProtocol_value = map[string]int32{
		"LinkProtocol_ETHERNET": 0,
		"LinkProtocol_PPP":      1,
		"LinkProtocol_HDLC":     2,
		"LinkProtocol_FR":       3,
		"LinkProtocol_ATM":      6,
		"LinkProtocol_TDM":      7,
		"LinkProtocol_INVALID":  255,
	}
)

func (x Ifm_Interfaces_Interface_LinkProtocol) Enum() *Ifm_Interfaces_Interface_LinkProtocol {
	p := new(Ifm_Interfaces_Interface_LinkProtocol)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_LinkProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_LinkProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[3].Descriptor()
}

func (Ifm_Interfaces_Interface_LinkProtocol) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[3]
}

func (x Ifm_Interfaces_Interface_LinkProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_LinkProtocol) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_LinkProtocol(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_LinkProtocol.Descriptor instead.
func (Ifm_Interfaces_Interface_LinkProtocol) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3}
}

type Ifm_Interfaces_Interface_RouterType int32

const (
	Ifm_Interfaces_Interface_RouterType_PTOP      Ifm_Interfaces_Interface_RouterType = 0
	Ifm_Interfaces_Interface_RouterType_PTOMP     Ifm_Interfaces_Interface_RouterType = 1
	Ifm_Interfaces_Interface_RouterType_BROADCAST Ifm_Interfaces_Interface_RouterType = 2
	Ifm_Interfaces_Interface_RouterType_NBMA      Ifm_Interfaces_Interface_RouterType = 3
	Ifm_Interfaces_Interface_RouterType_INVALID   Ifm_Interfaces_Interface_RouterType = 255
)

// Enum value maps for Ifm_Interfaces_Interface_RouterType.
var (
	Ifm_Interfaces_Interface_RouterType_name = map[int32]string{
		0:   "RouterType_PTOP",
		1:   "RouterType_PTOMP",
		2:   "RouterType_BROADCAST",
		3:   "RouterType_NBMA",
		255: "RouterType_INVALID",
	}
	Ifm_Interfaces_Interface_RouterType_value = map[string]int32{
		"RouterType_PTOP":      0,
		"RouterType_PTOMP":     1,
		"RouterType_BROADCAST": 2,
		"RouterType_NBMA":      3,
		"RouterType_INVALID":   255,
	}
)

func (x Ifm_Interfaces_Interface_RouterType) Enum() *Ifm_Interfaces_Interface_RouterType {
	p := new(Ifm_Interfaces_Interface_RouterType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_RouterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_RouterType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[4].Descriptor()
}

func (Ifm_Interfaces_Interface_RouterType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[4]
}

func (x Ifm_Interfaces_Interface_RouterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_RouterType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_RouterType(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_RouterType.Descriptor instead.
func (Ifm_Interfaces_Interface_RouterType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 4}
}

type Ifm_Interfaces_Interface_StatisticMode int32

const (
	Ifm_Interfaces_Interface_INVALID_ENUM_VALUE_StatisticMode Ifm_Interfaces_Interface_StatisticMode = 0
	Ifm_Interfaces_Interface_StatisticMode_INTERFACEX_BASED   Ifm_Interfaces_Interface_StatisticMode = 1
	Ifm_Interfaces_Interface_StatisticMode_VLANX_GROUPX_BASED Ifm_Interfaces_Interface_StatisticMode = 2
)

// Enum value maps for Ifm_Interfaces_Interface_StatisticMode.
var (
	Ifm_Interfaces_Interface_StatisticMode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_StatisticMode",
		1: "StatisticMode_INTERFACEX_BASED",
		2: "StatisticMode_VLANX_GROUPX_BASED",
	}
	Ifm_Interfaces_Interface_StatisticMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_StatisticMode": 0,
		"StatisticMode_INTERFACEX_BASED":   1,
		"StatisticMode_VLANX_GROUPX_BASED": 2,
	}
)

func (x Ifm_Interfaces_Interface_StatisticMode) Enum() *Ifm_Interfaces_Interface_StatisticMode {
	p := new(Ifm_Interfaces_Interface_StatisticMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_StatisticMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_StatisticMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[5].Descriptor()
}

func (Ifm_Interfaces_Interface_StatisticMode) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[5]
}

func (x Ifm_Interfaces_Interface_StatisticMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_StatisticMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_StatisticMode(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_StatisticMode.Descriptor instead.
func (Ifm_Interfaces_Interface_StatisticMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 5}
}

type Ifm_Interfaces_Interface_ServiceType int32

const (
	Ifm_Interfaces_Interface_ServiceType_NONE                Ifm_Interfaces_Interface_ServiceType = 0
	Ifm_Interfaces_Interface_ServiceType_TRUNKX_MEMBER       Ifm_Interfaces_Interface_ServiceType = 2
	Ifm_Interfaces_Interface_ServiceType_STACKX_MEMBER       Ifm_Interfaces_Interface_ServiceType = 6
	Ifm_Interfaces_Interface_ServiceType_MPX_MEMBER          Ifm_Interfaces_Interface_ServiceType = 7
	Ifm_Interfaces_Interface_ServiceType_VBRIDGEX_MEMBER     Ifm_Interfaces_Interface_ServiceType = 8
	Ifm_Interfaces_Interface_ServiceType_IMAX_MEMBER         Ifm_Interfaces_Interface_ServiceType = 9
	Ifm_Interfaces_Interface_ServiceType_BUNDLEX_MEMBER      Ifm_Interfaces_Interface_ServiceType = 10
	Ifm_Interfaces_Interface_ServiceType_FABRICX_MEMBER      Ifm_Interfaces_Interface_ServiceType = 11
	Ifm_Interfaces_Interface_ServiceType_LAGX_MASTERX_MEMBER Ifm_Interfaces_Interface_ServiceType = 12
	Ifm_Interfaces_Interface_ServiceType_LAGX_SLAVEX_MEMBER  Ifm_Interfaces_Interface_ServiceType = 13
	Ifm_Interfaces_Interface_ServiceType_CPOSX_TRUNKX_MEMBER Ifm_Interfaces_Interface_ServiceType = 15
	Ifm_Interfaces_Interface_ServiceType_POSX_TRUNKX_MEMBER  Ifm_Interfaces_Interface_ServiceType = 16
	Ifm_Interfaces_Interface_ServiceType_GLOBALX_MPX_MEMBER  Ifm_Interfaces_Interface_ServiceType = 17
	Ifm_Interfaces_Interface_ServiceType_GLOBALX_IMAX_MEMBER Ifm_Interfaces_Interface_ServiceType = 18
)

// Enum value maps for Ifm_Interfaces_Interface_ServiceType.
var (
	Ifm_Interfaces_Interface_ServiceType_name = map[int32]string{
		0:  "ServiceType_NONE",
		2:  "ServiceType_TRUNKX_MEMBER",
		6:  "ServiceType_STACKX_MEMBER",
		7:  "ServiceType_MPX_MEMBER",
		8:  "ServiceType_VBRIDGEX_MEMBER",
		9:  "ServiceType_IMAX_MEMBER",
		10: "ServiceType_BUNDLEX_MEMBER",
		11: "ServiceType_FABRICX_MEMBER",
		12: "ServiceType_LAGX_MASTERX_MEMBER",
		13: "ServiceType_LAGX_SLAVEX_MEMBER",
		15: "ServiceType_CPOSX_TRUNKX_MEMBER",
		16: "ServiceType_POSX_TRUNKX_MEMBER",
		17: "ServiceType_GLOBALX_MPX_MEMBER",
		18: "ServiceType_GLOBALX_IMAX_MEMBER",
	}
	Ifm_Interfaces_Interface_ServiceType_value = map[string]int32{
		"ServiceType_NONE":                0,
		"ServiceType_TRUNKX_MEMBER":       2,
		"ServiceType_STACKX_MEMBER":       6,
		"ServiceType_MPX_MEMBER":          7,
		"ServiceType_VBRIDGEX_MEMBER":     8,
		"ServiceType_IMAX_MEMBER":         9,
		"ServiceType_BUNDLEX_MEMBER":      10,
		"ServiceType_FABRICX_MEMBER":      11,
		"ServiceType_LAGX_MASTERX_MEMBER": 12,
		"ServiceType_LAGX_SLAVEX_MEMBER":  13,
		"ServiceType_CPOSX_TRUNKX_MEMBER": 15,
		"ServiceType_POSX_TRUNKX_MEMBER":  16,
		"ServiceType_GLOBALX_MPX_MEMBER":  17,
		"ServiceType_GLOBALX_IMAX_MEMBER": 18,
	}
)

func (x Ifm_Interfaces_Interface_ServiceType) Enum() *Ifm_Interfaces_Interface_ServiceType {
	p := new(Ifm_Interfaces_Interface_ServiceType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[6].Descriptor()
}

func (Ifm_Interfaces_Interface_ServiceType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[6]
}

func (x Ifm_Interfaces_Interface_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_ServiceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_ServiceType(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_ServiceType.Descriptor instead.
func (Ifm_Interfaces_Interface_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 6}
}

type Ifm_Interfaces_Interface_EncapsulationType int32

const (
	Ifm_Interfaces_Interface_EncapsulationType_VLANX_TYPE           Ifm_Interfaces_Interface_EncapsulationType = 0
	Ifm_Interfaces_Interface_EncapsulationType_DOT1Q                Ifm_Interfaces_Interface_EncapsulationType = 1
	Ifm_Interfaces_Interface_EncapsulationType_QINQ                 Ifm_Interfaces_Interface_EncapsulationType = 2
	Ifm_Interfaces_Interface_EncapsulationType_P2P                  Ifm_Interfaces_Interface_EncapsulationType = 3
	Ifm_Interfaces_Interface_EncapsulationType_P2MP                 Ifm_Interfaces_Interface_EncapsulationType = 4
	Ifm_Interfaces_Interface_EncapsulationType_L2VE                 Ifm_Interfaces_Interface_EncapsulationType = 5
	Ifm_Interfaces_Interface_EncapsulationType_L3VE                 Ifm_Interfaces_Interface_EncapsulationType = 6
	Ifm_Interfaces_Interface_EncapsulationType_VLANX_TYPEX_POLICY   Ifm_Interfaces_Interface_EncapsulationType = 7
	Ifm_Interfaces_Interface_EncapsulationType_DOT1QX_POLICY        Ifm_Interfaces_Interface_EncapsulationType = 8
	Ifm_Interfaces_Interface_EncapsulationType_STACKINGX_POLICY     Ifm_Interfaces_Interface_EncapsulationType = 9
	Ifm_Interfaces_Interface_EncapsulationType_UNTAGX_POLICY        Ifm_Interfaces_Interface_EncapsulationType = 10
	Ifm_Interfaces_Interface_EncapsulationType_QINQX_MAPPING        Ifm_Interfaces_Interface_EncapsulationType = 11
	Ifm_Interfaces_Interface_EncapsulationType_L2VC                 Ifm_Interfaces_Interface_EncapsulationType = 12
	Ifm_Interfaces_Interface_EncapsulationType_L3VC                 Ifm_Interfaces_Interface_EncapsulationType = 13
	Ifm_Interfaces_Interface_EncapsulationType_EVCX_UNTAG           Ifm_Interfaces_Interface_EncapsulationType = 14
	Ifm_Interfaces_Interface_EncapsulationType_EVCX_DOT1Q           Ifm_Interfaces_Interface_EncapsulationType = 15
	Ifm_Interfaces_Interface_EncapsulationType_EVCX_QINQ            Ifm_Interfaces_Interface_EncapsulationType = 16
	Ifm_Interfaces_Interface_EncapsulationType_EVCX_DEFAULT         Ifm_Interfaces_Interface_EncapsulationType = 17
	Ifm_Interfaces_Interface_EncapsulationType_EVCX_DOT1QX_POLICY   Ifm_Interfaces_Interface_EncapsulationType = 18
	Ifm_Interfaces_Interface_EncapsulationType_IETF                 Ifm_Interfaces_Interface_EncapsulationType = 19
	Ifm_Interfaces_Interface_EncapsulationType_NONSTANDARD          Ifm_Interfaces_Interface_EncapsulationType = 20
	Ifm_Interfaces_Interface_EncapsulationType_USERX_VLAN           Ifm_Interfaces_Interface_EncapsulationType = 21
	Ifm_Interfaces_Interface_EncapsulationType_USERX_VLANX_ANYOTHER Ifm_Interfaces_Interface_EncapsulationType = 22
	Ifm_Interfaces_Interface_EncapsulationType_QINX_LINK            Ifm_Interfaces_Interface_EncapsulationType = 23
	Ifm_Interfaces_Interface_EncapsulationType_SOFTX_GREX_VE        Ifm_Interfaces_Interface_EncapsulationType = 24
	Ifm_Interfaces_Interface_EncapsulationType_L3VEX_TER            Ifm_Interfaces_Interface_EncapsulationType = 25
	Ifm_Interfaces_Interface_EncapsulationType_L3VEX_ACC            Ifm_Interfaces_Interface_EncapsulationType = 26
	Ifm_Interfaces_Interface_EncapsulationType_INVALID              Ifm_Interfaces_Interface_EncapsulationType = 255
)

// Enum value maps for Ifm_Interfaces_Interface_EncapsulationType.
var (
	Ifm_Interfaces_Interface_EncapsulationType_name = map[int32]string{
		0:   "EncapsulationType_VLANX_TYPE",
		1:   "EncapsulationType_DOT1Q",
		2:   "EncapsulationType_QINQ",
		3:   "EncapsulationType_P2P",
		4:   "EncapsulationType_P2MP",
		5:   "EncapsulationType_L2VE",
		6:   "EncapsulationType_L3VE",
		7:   "EncapsulationType_VLANX_TYPEX_POLICY",
		8:   "EncapsulationType_DOT1QX_POLICY",
		9:   "EncapsulationType_STACKINGX_POLICY",
		10:  "EncapsulationType_UNTAGX_POLICY",
		11:  "EncapsulationType_QINQX_MAPPING",
		12:  "EncapsulationType_L2VC",
		13:  "EncapsulationType_L3VC",
		14:  "EncapsulationType_EVCX_UNTAG",
		15:  "EncapsulationType_EVCX_DOT1Q",
		16:  "EncapsulationType_EVCX_QINQ",
		17:  "EncapsulationType_EVCX_DEFAULT",
		18:  "EncapsulationType_EVCX_DOT1QX_POLICY",
		19:  "EncapsulationType_IETF",
		20:  "EncapsulationType_NONSTANDARD",
		21:  "EncapsulationType_USERX_VLAN",
		22:  "EncapsulationType_USERX_VLANX_ANYOTHER",
		23:  "EncapsulationType_QINX_LINK",
		24:  "EncapsulationType_SOFTX_GREX_VE",
		25:  "EncapsulationType_L3VEX_TER",
		26:  "EncapsulationType_L3VEX_ACC",
		255: "EncapsulationType_INVALID",
	}
	Ifm_Interfaces_Interface_EncapsulationType_value = map[string]int32{
		"EncapsulationType_VLANX_TYPE":           0,
		"EncapsulationType_DOT1Q":                1,
		"EncapsulationType_QINQ":                 2,
		"EncapsulationType_P2P":                  3,
		"EncapsulationType_P2MP":                 4,
		"EncapsulationType_L2VE":                 5,
		"EncapsulationType_L3VE":                 6,
		"EncapsulationType_VLANX_TYPEX_POLICY":   7,
		"EncapsulationType_DOT1QX_POLICY":        8,
		"EncapsulationType_STACKINGX_POLICY":     9,
		"EncapsulationType_UNTAGX_POLICY":        10,
		"EncapsulationType_QINQX_MAPPING":        11,
		"EncapsulationType_L2VC":                 12,
		"EncapsulationType_L3VC":                 13,
		"EncapsulationType_EVCX_UNTAG":           14,
		"EncapsulationType_EVCX_DOT1Q":           15,
		"EncapsulationType_EVCX_QINQ":            16,
		"EncapsulationType_EVCX_DEFAULT":         17,
		"EncapsulationType_EVCX_DOT1QX_POLICY":   18,
		"EncapsulationType_IETF":                 19,
		"EncapsulationType_NONSTANDARD":          20,
		"EncapsulationType_USERX_VLAN":           21,
		"EncapsulationType_USERX_VLANX_ANYOTHER": 22,
		"EncapsulationType_QINX_LINK":            23,
		"EncapsulationType_SOFTX_GREX_VE":        24,
		"EncapsulationType_L3VEX_TER":            25,
		"EncapsulationType_L3VEX_ACC":            26,
		"EncapsulationType_INVALID":              255,
	}
)

func (x Ifm_Interfaces_Interface_EncapsulationType) Enum() *Ifm_Interfaces_Interface_EncapsulationType {
	p := new(Ifm_Interfaces_Interface_EncapsulationType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_EncapsulationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_EncapsulationType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[7].Descriptor()
}

func (Ifm_Interfaces_Interface_EncapsulationType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[7]
}

func (x Ifm_Interfaces_Interface_EncapsulationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_EncapsulationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_EncapsulationType(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_EncapsulationType.Descriptor instead.
func (Ifm_Interfaces_Interface_EncapsulationType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 7}
}

type Ifm_Interfaces_Interface_NetworkLayerStatus int32

const (
	Ifm_Interfaces_Interface_NetworkLayerStatus_IPV4X_IPV6X_UP   Ifm_Interfaces_Interface_NetworkLayerStatus = 0
	Ifm_Interfaces_Interface_NetworkLayerStatus_IPV4X_IPV6X_DOWN Ifm_Interfaces_Interface_NetworkLayerStatus = 196608
)

// Enum value maps for Ifm_Interfaces_Interface_NetworkLayerStatus.
var (
	Ifm_Interfaces_Interface_NetworkLayerStatus_name = map[int32]string{
		0:      "NetworkLayerStatus_IPV4X_IPV6X_UP",
		196608: "NetworkLayerStatus_IPV4X_IPV6X_DOWN",
	}
	Ifm_Interfaces_Interface_NetworkLayerStatus_value = map[string]int32{
		"NetworkLayerStatus_IPV4X_IPV6X_UP":   0,
		"NetworkLayerStatus_IPV4X_IPV6X_DOWN": 196608,
	}
)

func (x Ifm_Interfaces_Interface_NetworkLayerStatus) Enum() *Ifm_Interfaces_Interface_NetworkLayerStatus {
	p := new(Ifm_Interfaces_Interface_NetworkLayerStatus)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_NetworkLayerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_NetworkLayerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[8].Descriptor()
}

func (Ifm_Interfaces_Interface_NetworkLayerStatus) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[8]
}

func (x Ifm_Interfaces_Interface_NetworkLayerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_NetworkLayerStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_NetworkLayerStatus(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_NetworkLayerStatus.Descriptor instead.
func (Ifm_Interfaces_Interface_NetworkLayerStatus) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8}
}

type Ifm_Interfaces_Interface_Dynamic_OperStatus int32

const (
	Ifm_Interfaces_Interface_Dynamic_OperStatus_DOWN Ifm_Interfaces_Interface_Dynamic_OperStatus = 0
	Ifm_Interfaces_Interface_Dynamic_OperStatus_UP   Ifm_Interfaces_Interface_Dynamic_OperStatus = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Dynamic_OperStatus.
var (
	Ifm_Interfaces_Interface_Dynamic_OperStatus_name = map[int32]string{
		0: "OperStatus_DOWN",
		1: "OperStatus_UP",
	}
	Ifm_Interfaces_Interface_Dynamic_OperStatus_value = map[string]int32{
		"OperStatus_DOWN": 0,
		"OperStatus_UP":   1,
	}
)

func (x Ifm_Interfaces_Interface_Dynamic_OperStatus) Enum() *Ifm_Interfaces_Interface_Dynamic_OperStatus {
	p := new(Ifm_Interfaces_Interface_Dynamic_OperStatus)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Dynamic_OperStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Dynamic_OperStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[9].Descriptor()
}

func (Ifm_Interfaces_Interface_Dynamic_OperStatus) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[9]
}

func (x Ifm_Interfaces_Interface_Dynamic_OperStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Dynamic_OperStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Dynamic_OperStatus(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Dynamic_OperStatus.Descriptor instead.
func (Ifm_Interfaces_Interface_Dynamic_OperStatus) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Dynamic_PhysicalStatus int32

const (
	Ifm_Interfaces_Interface_Dynamic_PhysicalStatus_DOWN Ifm_Interfaces_Interface_Dynamic_PhysicalStatus = 0
	Ifm_Interfaces_Interface_Dynamic_PhysicalStatus_UP   Ifm_Interfaces_Interface_Dynamic_PhysicalStatus = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Dynamic_PhysicalStatus.
var (
	Ifm_Interfaces_Interface_Dynamic_PhysicalStatus_name = map[int32]string{
		0: "PhysicalStatus_DOWN",
		1: "PhysicalStatus_UP",
	}
	Ifm_Interfaces_Interface_Dynamic_PhysicalStatus_value = map[string]int32{
		"PhysicalStatus_DOWN": 0,
		"PhysicalStatus_UP":   1,
	}
)

func (x Ifm_Interfaces_Interface_Dynamic_PhysicalStatus) Enum() *Ifm_Interfaces_Interface_Dynamic_PhysicalStatus {
	p := new(Ifm_Interfaces_Interface_Dynamic_PhysicalStatus)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Dynamic_PhysicalStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Dynamic_PhysicalStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[10].Descriptor()
}

func (Ifm_Interfaces_Interface_Dynamic_PhysicalStatus) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[10]
}

func (x Ifm_Interfaces_Interface_Dynamic_PhysicalStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Dynamic_PhysicalStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Dynamic_PhysicalStatus(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Dynamic_PhysicalStatus.Descriptor instead.
func (Ifm_Interfaces_Interface_Dynamic_PhysicalStatus) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 0, 1}
}

type Ifm_Interfaces_Interface_Dynamic_LinkStatus int32

const (
	Ifm_Interfaces_Interface_Dynamic_LinkStatus_DOWN Ifm_Interfaces_Interface_Dynamic_LinkStatus = 0
	Ifm_Interfaces_Interface_Dynamic_LinkStatus_UP   Ifm_Interfaces_Interface_Dynamic_LinkStatus = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Dynamic_LinkStatus.
var (
	Ifm_Interfaces_Interface_Dynamic_LinkStatus_name = map[int32]string{
		0: "LinkStatus_DOWN",
		1: "LinkStatus_UP",
	}
	Ifm_Interfaces_Interface_Dynamic_LinkStatus_value = map[string]int32{
		"LinkStatus_DOWN": 0,
		"LinkStatus_UP":   1,
	}
)

func (x Ifm_Interfaces_Interface_Dynamic_LinkStatus) Enum() *Ifm_Interfaces_Interface_Dynamic_LinkStatus {
	p := new(Ifm_Interfaces_Interface_Dynamic_LinkStatus)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Dynamic_LinkStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Dynamic_LinkStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[11].Descriptor()
}

func (Ifm_Interfaces_Interface_Dynamic_LinkStatus) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[11]
}

func (x Ifm_Interfaces_Interface_Dynamic_LinkStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Dynamic_LinkStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Dynamic_LinkStatus(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Dynamic_LinkStatus.Descriptor instead.
func (Ifm_Interfaces_Interface_Dynamic_LinkStatus) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 0, 2}
}

type Ifm_Interfaces_Interface_Dynamic_Ipv4Status int32

const (
	Ifm_Interfaces_Interface_Dynamic_Ipv4Status_DOWN Ifm_Interfaces_Interface_Dynamic_Ipv4Status = 0
	Ifm_Interfaces_Interface_Dynamic_Ipv4Status_UP   Ifm_Interfaces_Interface_Dynamic_Ipv4Status = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Dynamic_Ipv4Status.
var (
	Ifm_Interfaces_Interface_Dynamic_Ipv4Status_name = map[int32]string{
		0: "Ipv4Status_DOWN",
		1: "Ipv4Status_UP",
	}
	Ifm_Interfaces_Interface_Dynamic_Ipv4Status_value = map[string]int32{
		"Ipv4Status_DOWN": 0,
		"Ipv4Status_UP":   1,
	}
)

func (x Ifm_Interfaces_Interface_Dynamic_Ipv4Status) Enum() *Ifm_Interfaces_Interface_Dynamic_Ipv4Status {
	p := new(Ifm_Interfaces_Interface_Dynamic_Ipv4Status)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Dynamic_Ipv4Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Dynamic_Ipv4Status) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[12].Descriptor()
}

func (Ifm_Interfaces_Interface_Dynamic_Ipv4Status) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[12]
}

func (x Ifm_Interfaces_Interface_Dynamic_Ipv4Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Dynamic_Ipv4Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Dynamic_Ipv4Status(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Dynamic_Ipv4Status.Descriptor instead.
func (Ifm_Interfaces_Interface_Dynamic_Ipv4Status) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 0, 3}
}

type Ifm_Interfaces_Interface_Dynamic_Ipv6Status int32

const (
	Ifm_Interfaces_Interface_Dynamic_Ipv6Status_DOWN Ifm_Interfaces_Interface_Dynamic_Ipv6Status = 0
	Ifm_Interfaces_Interface_Dynamic_Ipv6Status_UP   Ifm_Interfaces_Interface_Dynamic_Ipv6Status = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Dynamic_Ipv6Status.
var (
	Ifm_Interfaces_Interface_Dynamic_Ipv6Status_name = map[int32]string{
		0: "Ipv6Status_DOWN",
		1: "Ipv6Status_UP",
	}
	Ifm_Interfaces_Interface_Dynamic_Ipv6Status_value = map[string]int32{
		"Ipv6Status_DOWN": 0,
		"Ipv6Status_UP":   1,
	}
)

func (x Ifm_Interfaces_Interface_Dynamic_Ipv6Status) Enum() *Ifm_Interfaces_Interface_Dynamic_Ipv6Status {
	p := new(Ifm_Interfaces_Interface_Dynamic_Ipv6Status)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Dynamic_Ipv6Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Dynamic_Ipv6Status) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[13].Descriptor()
}

func (Ifm_Interfaces_Interface_Dynamic_Ipv6Status) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[13]
}

func (x Ifm_Interfaces_Interface_Dynamic_Ipv6Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Dynamic_Ipv6Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Dynamic_Ipv6Status(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Dynamic_Ipv6Status.Descriptor instead.
func (Ifm_Interfaces_Interface_Dynamic_Ipv6Status) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 0, 4}
}

type Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade int32

const (
	Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade_GOOD   Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade = 0
	Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade_HIGH   Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade = 1
	Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade_MIDDLE Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade = 2
	Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade_LOW    Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade = 4
)

// Enum value maps for Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade.
var (
	Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade_name = map[int32]string{
		0: "LinkQualityGrade_GOOD",
		1: "LinkQualityGrade_HIGH",
		2: "LinkQualityGrade_MIDDLE",
		4: "LinkQualityGrade_LOW",
	}
	Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade_value = map[string]int32{
		"LinkQualityGrade_GOOD":   0,
		"LinkQualityGrade_HIGH":   1,
		"LinkQualityGrade_MIDDLE": 2,
		"LinkQualityGrade_LOW":    4,
	}
)

func (x Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade) Enum() *Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade {
	p := new(Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[14].Descriptor()
}

func (Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[14]
}

func (x Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade.Descriptor instead.
func (Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 0, 5}
}

type Ifm_Interfaces_Interface_Trunk_Type int32

const (
	Ifm_Interfaces_Interface_Trunk_INVALID_ENUM_VALUE_Type Ifm_Interfaces_Interface_Trunk_Type = 0
	Ifm_Interfaces_Interface_Trunk_Type_ETHX_TRUNK         Ifm_Interfaces_Interface_Trunk_Type = 1
	Ifm_Interfaces_Interface_Trunk_Type_IPX_TRUNK          Ifm_Interfaces_Interface_Trunk_Type = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_Type.
var (
	Ifm_Interfaces_Interface_Trunk_Type_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Type",
		1: "Type_ETHX_TRUNK",
		2: "Type_IPX_TRUNK",
	}
	Ifm_Interfaces_Interface_Trunk_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_ETHX_TRUNK":         1,
		"Type_IPX_TRUNK":          2,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_Type) Enum() *Ifm_Interfaces_Interface_Trunk_Type {
	p := new(Ifm_Interfaces_Interface_Trunk_Type)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[15].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_Type) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[15]
}

func (x Ifm_Interfaces_Interface_Trunk_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Trunk_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Trunk_Type(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Type.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3, 0}
}

type Ifm_Interfaces_Interface_Trunk_WorkMode int32

const (
	Ifm_Interfaces_Interface_Trunk_INVALID_ENUM_VALUE_WorkMode Ifm_Interfaces_Interface_Trunk_WorkMode = 0
	Ifm_Interfaces_Interface_Trunk_WorkMode_MANUAL             Ifm_Interfaces_Interface_Trunk_WorkMode = 1
	Ifm_Interfaces_Interface_Trunk_WorkMode_DYNAMIC            Ifm_Interfaces_Interface_Trunk_WorkMode = 2
	Ifm_Interfaces_Interface_Trunk_WorkMode_STATIC             Ifm_Interfaces_Interface_Trunk_WorkMode = 3
	Ifm_Interfaces_Interface_Trunk_WorkMode_BACKUP             Ifm_Interfaces_Interface_Trunk_WorkMode = 4
	Ifm_Interfaces_Interface_Trunk_WorkMode_INVALID            Ifm_Interfaces_Interface_Trunk_WorkMode = 5
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_WorkMode.
var (
	Ifm_Interfaces_Interface_Trunk_WorkMode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_WorkMode",
		1: "WorkMode_MANUAL",
		2: "WorkMode_DYNAMIC",
		3: "WorkMode_STATIC",
		4: "WorkMode_BACKUP",
		5: "WorkMode_INVALID",
	}
	Ifm_Interfaces_Interface_Trunk_WorkMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_WorkMode": 0,
		"WorkMode_MANUAL":             1,
		"WorkMode_DYNAMIC":            2,
		"WorkMode_STATIC":             3,
		"WorkMode_BACKUP":             4,
		"WorkMode_INVALID":            5,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_WorkMode) Enum() *Ifm_Interfaces_Interface_Trunk_WorkMode {
	p := new(Ifm_Interfaces_Interface_Trunk_WorkMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_WorkMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_WorkMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[16].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_WorkMode) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[16]
}

func (x Ifm_Interfaces_Interface_Trunk_WorkMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Trunk_WorkMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Trunk_WorkMode(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_WorkMode.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_WorkMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3, 1}
}

type Ifm_Interfaces_Interface_Trunk_HashType int32

const (
	Ifm_Interfaces_Interface_Trunk_INVALID_ENUM_VALUE_HashType    Ifm_Interfaces_Interface_Trunk_HashType = 0
	Ifm_Interfaces_Interface_Trunk_HashType_IP                    Ifm_Interfaces_Interface_Trunk_HashType = 1
	Ifm_Interfaces_Interface_Trunk_HashType_MAC                   Ifm_Interfaces_Interface_Trunk_HashType = 2
	Ifm_Interfaces_Interface_Trunk_HashType_PACKETX_ALL           Ifm_Interfaces_Interface_Trunk_HashType = 3
	Ifm_Interfaces_Interface_Trunk_HashType_DESX_IP               Ifm_Interfaces_Interface_Trunk_HashType = 4
	Ifm_Interfaces_Interface_Trunk_HashType_DESX_MAC              Ifm_Interfaces_Interface_Trunk_HashType = 5
	Ifm_Interfaces_Interface_Trunk_HashType_SRCX_IP               Ifm_Interfaces_Interface_Trunk_HashType = 6
	Ifm_Interfaces_Interface_Trunk_HashType_SRCX_MAC              Ifm_Interfaces_Interface_Trunk_HashType = 7
	Ifm_Interfaces_Interface_Trunk_HashType_ENHANCED              Ifm_Interfaces_Interface_Trunk_HashType = 8
	Ifm_Interfaces_Interface_Trunk_HashType_RESILIENT             Ifm_Interfaces_Interface_Trunk_HashType = 9
	Ifm_Interfaces_Interface_Trunk_HashType_INVALID               Ifm_Interfaces_Interface_Trunk_HashType = 10
	Ifm_Interfaces_Interface_Trunk_HashType_L4                    Ifm_Interfaces_Interface_Trunk_HashType = 11
	Ifm_Interfaces_Interface_Trunk_HashType_RANDOM                Ifm_Interfaces_Interface_Trunk_HashType = 12
	Ifm_Interfaces_Interface_Trunk_HashType_ROUNDX_ROBIN          Ifm_Interfaces_Interface_Trunk_HashType = 13
	Ifm_Interfaces_Interface_Trunk_HashType_SYMMETRIC             Ifm_Interfaces_Interface_Trunk_HashType = 14
	Ifm_Interfaces_Interface_Trunk_HashType_SYMMETRICX_COMPLEMENT Ifm_Interfaces_Interface_Trunk_HashType = 15
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_HashType.
var (
	Ifm_Interfaces_Interface_Trunk_HashType_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_HashType",
		1:  "HashType_IP",
		2:  "HashType_MAC",
		3:  "HashType_PACKETX_ALL",
		4:  "HashType_DESX_IP",
		5:  "HashType_DESX_MAC",
		6:  "HashType_SRCX_IP",
		7:  "HashType_SRCX_MAC",
		8:  "HashType_ENHANCED",
		9:  "HashType_RESILIENT",
		10: "HashType_INVALID",
		11: "HashType_L4",
		12: "HashType_RANDOM",
		13: "HashType_ROUNDX_ROBIN",
		14: "HashType_SYMMETRIC",
		15: "HashType_SYMMETRICX_COMPLEMENT",
	}
	Ifm_Interfaces_Interface_Trunk_HashType_value = map[string]int32{
		"INVALID_ENUM_VALUE_HashType":    0,
		"HashType_IP":                    1,
		"HashType_MAC":                   2,
		"HashType_PACKETX_ALL":           3,
		"HashType_DESX_IP":               4,
		"HashType_DESX_MAC":              5,
		"HashType_SRCX_IP":               6,
		"HashType_SRCX_MAC":              7,
		"HashType_ENHANCED":              8,
		"HashType_RESILIENT":             9,
		"HashType_INVALID":               10,
		"HashType_L4":                    11,
		"HashType_RANDOM":                12,
		"HashType_ROUNDX_ROBIN":          13,
		"HashType_SYMMETRIC":             14,
		"HashType_SYMMETRICX_COMPLEMENT": 15,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_HashType) Enum() *Ifm_Interfaces_Interface_Trunk_HashType {
	p := new(Ifm_Interfaces_Interface_Trunk_HashType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_HashType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_HashType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[17].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_HashType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[17]
}

func (x Ifm_Interfaces_Interface_Trunk_HashType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Trunk_HashType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Trunk_HashType(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_HashType.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_HashType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3, 2}
}

type Ifm_Interfaces_Interface_Trunk_Members_Member_MemberState int32

const (
	Ifm_Interfaces_Interface_Trunk_Members_Member_MemberState_DOWN Ifm_Interfaces_Interface_Trunk_Members_Member_MemberState = 0
	Ifm_Interfaces_Interface_Trunk_Members_Member_MemberState_UP   Ifm_Interfaces_Interface_Trunk_Members_Member_MemberState = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_Members_Member_MemberState.
var (
	Ifm_Interfaces_Interface_Trunk_Members_Member_MemberState_name = map[int32]string{
		0: "MemberState_DOWN",
		1: "MemberState_UP",
	}
	Ifm_Interfaces_Interface_Trunk_Members_Member_MemberState_value = map[string]int32{
		"MemberState_DOWN": 0,
		"MemberState_UP":   1,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_MemberState) Enum() *Ifm_Interfaces_Interface_Trunk_Members_Member_MemberState {
	p := new(Ifm_Interfaces_Interface_Trunk_Members_Member_MemberState)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_MemberState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_Members_Member_MemberState) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[18].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_Members_Member_MemberState) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[18]
}

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_MemberState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_MemberState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Trunk_Members_Member_MemberState(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Members_Member_MemberState.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_Members_Member_MemberState) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Trunk_Members_Member_Status int32

const (
	Ifm_Interfaces_Interface_Trunk_Members_Member_Status_DOWN Ifm_Interfaces_Interface_Trunk_Members_Member_Status = 0
	Ifm_Interfaces_Interface_Trunk_Members_Member_Status_UP   Ifm_Interfaces_Interface_Trunk_Members_Member_Status = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_Members_Member_Status.
var (
	Ifm_Interfaces_Interface_Trunk_Members_Member_Status_name = map[int32]string{
		0: "Status_DOWN",
		1: "Status_UP",
	}
	Ifm_Interfaces_Interface_Trunk_Members_Member_Status_value = map[string]int32{
		"Status_DOWN": 0,
		"Status_UP":   1,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Status) Enum() *Ifm_Interfaces_Interface_Trunk_Members_Member_Status {
	p := new(Ifm_Interfaces_Interface_Trunk_Members_Member_Status)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_Members_Member_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[19].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_Members_Member_Status) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[19]
}

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Trunk_Members_Member_Status(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Members_Member_Status.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_Members_Member_Status) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3, 0, 0, 1}
}

type Ifm_Interfaces_Interface_Trunk_Members_Member_Role int32

const (
	Ifm_Interfaces_Interface_Trunk_Members_Member_Role_SLAVE  Ifm_Interfaces_Interface_Trunk_Members_Member_Role = 0
	Ifm_Interfaces_Interface_Trunk_Members_Member_Role_MASTER Ifm_Interfaces_Interface_Trunk_Members_Member_Role = 1
	Ifm_Interfaces_Interface_Trunk_Members_Member_Role_COMMON Ifm_Interfaces_Interface_Trunk_Members_Member_Role = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_Members_Member_Role.
var (
	Ifm_Interfaces_Interface_Trunk_Members_Member_Role_name = map[int32]string{
		0: "Role_SLAVE",
		1: "Role_MASTER",
		2: "Role_COMMON",
	}
	Ifm_Interfaces_Interface_Trunk_Members_Member_Role_value = map[string]int32{
		"Role_SLAVE":  0,
		"Role_MASTER": 1,
		"Role_COMMON": 2,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Role) Enum() *Ifm_Interfaces_Interface_Trunk_Members_Member_Role {
	p := new(Ifm_Interfaces_Interface_Trunk_Members_Member_Role)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_Members_Member_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[20].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_Members_Member_Role) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[20]
}

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Role) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Trunk_Members_Member_Role(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Members_Member_Role.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_Members_Member_Role) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3, 0, 0, 2}
}

type Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode int32

const (
	Ifm_Interfaces_Interface_Trunk_Members_Member_INVALID_ENUM_VALUE_LacpNegotiationMode Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode = 0
	Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode_ACTIVE             Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode = 1
	Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode_PASSIVE            Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode.
var (
	Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_LacpNegotiationMode",
		1: "LacpNegotiationMode_ACTIVE",
		2: "LacpNegotiationMode_PASSIVE",
	}
	Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_LacpNegotiationMode": 0,
		"LacpNegotiationMode_ACTIVE":             1,
		"LacpNegotiationMode_PASSIVE":            2,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode) Enum() *Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode {
	p := new(Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[21].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[21]
}

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3, 0, 0, 3}
}

type Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role int32

const (
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role_NONE   Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role = 0
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role_MASTER Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role = 1
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role_SLAVE  Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role.
var (
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role_name = map[int32]string{
		0: "Role_NONE",
		1: "Role_MASTER",
		2: "Role_SLAVE",
	}
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role_value = map[string]int32{
		"Role_NONE":   0,
		"Role_MASTER": 1,
		"Role_SLAVE":  2,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role) Enum() *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role {
	p := new(Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[22].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[22]
}

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3, 0, 0, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status int32

const (
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status_UNSELECTED Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status = 0
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status_SELECTED   Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status = 1
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status_INDEP      Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status = 2
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status_FORCEX_UP  Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status.
var (
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status_name = map[int32]string{
		0: "Status_UNSELECTED",
		1: "Status_SELECTED",
		2: "Status_INDEP",
		3: "Status_FORCEX_UP",
	}
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status_value = map[string]int32{
		"Status_UNSELECTED": 0,
		"Status_SELECTED":   1,
		"Status_INDEP":      2,
		"Status_FORCEX_UP":  3,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status) Enum() *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status {
	p := new(Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[23].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[23]
}

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3, 0, 0, 0, 1, 0}
}

type Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType int32

const (
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_NULL     Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 0
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_X_10M    Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 1
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_X_100M   Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 2
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_X_1GE    Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 3
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_X_10GE   Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 4
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_X_100GE  Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 5
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_X_1TE    Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 6
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_X_10TE   Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 7
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_X_100TE  Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 8
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_X_1000TE Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 9
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_X_40GE   Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 10
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_X_400GE  Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 11
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_X_25GE   Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType = 12
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType.
var (
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_name = map[int32]string{
		0:  "PortType_NULL",
		1:  "PortType_X_10M",
		2:  "PortType_X_100M",
		3:  "PortType_X_1GE",
		4:  "PortType_X_10GE",
		5:  "PortType_X_100GE",
		6:  "PortType_X_1TE",
		7:  "PortType_X_10TE",
		8:  "PortType_X_100TE",
		9:  "PortType_X_1000TE",
		10: "PortType_X_40GE",
		11: "PortType_X_400GE",
		12: "PortType_X_25GE",
	}
	Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_value = map[string]int32{
		"PortType_NULL":     0,
		"PortType_X_10M":    1,
		"PortType_X_100M":   2,
		"PortType_X_1GE":    3,
		"PortType_X_10GE":   4,
		"PortType_X_100GE":  5,
		"PortType_X_1TE":    6,
		"PortType_X_10TE":   7,
		"PortType_X_100TE":  8,
		"PortType_X_1000TE": 9,
		"PortType_X_40GE":   10,
		"PortType_X_400GE":  11,
		"PortType_X_25GE":   12,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType) Enum() *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType {
	p := new(Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[24].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[24]
}

func (x Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3, 0, 0, 0, 1, 1}
}

type Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType int32

const (
	Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType_SLOW Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType = 0
	Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType_FAST Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType.
var (
	Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType_name = map[int32]string{
		0: "ReceiveTimeoutType_SLOW",
		1: "ReceiveTimeoutType_FAST",
	}
	Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType_value = map[string]int32{
		"ReceiveTimeoutType_SLOW": 0,
		"ReceiveTimeoutType_FAST": 1,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType) Enum() *Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType {
	p := new(Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[25].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[25]
}

func (x Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3, 1, 0}
}

type Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd int32

const (
	Ifm_Interfaces_Interface_Trunk_Lacp_INVALID_ENUM_VALUE_SelectPortStd Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd = 0
	Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd_SPEED              Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd = 1
	Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd_PRIORITY           Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd.
var (
	Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_SelectPortStd",
		1: "SelectPortStd_SPEED",
		3: "SelectPortStd_PRIORITY",
	}
	Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd_value = map[string]int32{
		"INVALID_ENUM_VALUE_SelectPortStd": 0,
		"SelectPortStd_SPEED":              1,
		"SelectPortStd_PRIORITY":           3,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd) Enum() *Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd {
	p := new(Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[26].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[26]
}

func (x Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3, 1, 1}
}

type Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource int32

const (
	Ifm_Interfaces_Interface_Trunk_Lacp_INVALID_ENUM_VALUE_SysmacSource Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource = 0
	Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource_LOCAL              Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource = 1
	Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource_REMOTE             Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource.
var (
	Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_SysmacSource",
		1: "SysmacSource_LOCAL",
		2: "SysmacSource_REMOTE",
	}
	Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource_value = map[string]int32{
		"INVALID_ENUM_VALUE_SysmacSource": 0,
		"SysmacSource_LOCAL":              1,
		"SysmacSource_REMOTE":             2,
	}
)

func (x Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource) Enum() *Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource {
	p := new(Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[27].Descriptor()
}

func (Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[27]
}

func (x Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource.Descriptor instead.
func (Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3, 1, 2}
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap int32

const (
	Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap_DISABLE Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap = 0
	Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap_ENABLE  Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap.
var (
	Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap_name = map[int32]string{
		0: "VlanSwap_DISABLE",
		1: "VlanSwap_ENABLE",
	}
	Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap_value = map[string]int32{
		"VlanSwap_DISABLE": 0,
		"VlanSwap_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap) Enum() *Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap {
	p := new(Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[28].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[28]
}

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 0, 0}
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType int32

const (
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_INVALID_ENUM_VALUE_LinkType Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType = 0
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType_ACCESS             Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType = 1
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType_TRUNK              Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType = 2
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType_HYBRID             Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType = 3
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType_DOT1QTUNNEL        Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType = 4
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType.
var (
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_LinkType",
		1: "LinkType_ACCESS",
		2: "LinkType_TRUNK",
		3: "LinkType_HYBRID",
		4: "LinkType_DOT1QTUNNEL",
	}
	Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType_value = map[string]int32{
		"INVALID_ENUM_VALUE_LinkType": 0,
		"LinkType_ACCESS":             1,
		"LinkType_TRUNK":              2,
		"LinkType_HYBRID":             3,
		"LinkType_DOT1QTUNNEL":        4,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType) Enum() *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType {
	p := new(Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[29].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[29]
}

func (x Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode int32

const (
	Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_INVALID_ENUM_VALUE_Mode Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode = 0
	Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode_MULTIPLE           Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode = 1
	Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode_SINGLE             Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode.
var (
	Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Mode",
		1: "Mode_MULTIPLE",
		2: "Mode_SINGLE",
	}
	Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_Mode": 0,
		"Mode_MULTIPLE":           1,
		"Mode_SINGLE":             2,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode) Enum() *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode {
	p := new(Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[30].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[30]
}

func (x Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 1, 1, 0, 0}
}

type Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Action int32

const (
	Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Action_DISCARD Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Action = 0
	Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Action_FORWARD Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Action = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Action.
var (
	Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Action_name = map[int32]string{
		0: "Action_DISCARD",
		1: "Action_FORWARD",
	}
	Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Action_value = map[string]int32{
		"Action_DISCARD": 0,
		"Action_FORWARD": 1,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Action) Enum() *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Action {
	p := new(Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Action)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[31].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Action) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[31]
}

func (x Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Action) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Action(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Action.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Action) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 2, 0, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Alarm int32

const (
	Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Alarm_DISABLE Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Alarm = 0
	Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Alarm_ENABLE  Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Alarm = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Alarm.
var (
	Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Alarm_name = map[int32]string{
		0: "Alarm_DISABLE",
		1: "Alarm_ENABLE",
	}
	Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Alarm_value = map[string]int32{
		"Alarm_DISABLE": 0,
		"Alarm_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Alarm) Enum() *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Alarm {
	p := new(Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Alarm)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Alarm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Alarm) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[32].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Alarm) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[32]
}

func (x Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Alarm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Alarm) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Alarm(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Alarm.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Alarm) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 2, 0, 0, 0, 1}
}

type Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type int32

const (
	Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type_BROADCAST        Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type = 0
	Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type_MULTICAST        Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type = 1
	Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type_UNKNOWNX_UNICAST Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type.
var (
	Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type_name = map[int32]string{
		0: "Type_BROADCAST",
		1: "Type_MULTICAST",
		2: "Type_UNKNOWNX_UNICAST",
	}
	Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type_value = map[string]int32{
		"Type_BROADCAST":        0,
		"Type_MULTICAST":        1,
		"Type_UNKNOWNX_UNICAST": 2,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type) Enum() *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type {
	p := new(Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[33].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[33]
}

func (x Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 2, 1, 0, 0}
}

type Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction int32

const (
	Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction_INBOUND  Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction = 0
	Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction_OUTBOUND Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction.
var (
	Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
	}
	Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction_value = map[string]int32{
		"Direction_INBOUND":  0,
		"Direction_OUTBOUND": 1,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction) Enum() *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction {
	p := new(Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[34].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[34]
}

func (x Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 2, 1, 0, 1}
}

type Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch int32

const (
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch_DISABLE Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch = 0
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch_ENABLE  Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch.
var (
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch_name = map[int32]string{
		0: "LocalSwitch_DISABLE",
		1: "LocalSwitch_ENABLE",
	}
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch_value = map[string]int32{
		"LocalSwitch_DISABLE": 0,
		"LocalSwitch_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch) Enum() *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch {
	p := new(Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[35].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[35]
}

func (x Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 3, 0}
}

type Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType int32

const (
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_POPX_OUTER            Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType = 0
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_PUSH1X_LAYER          Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType = 1
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_SWAP                  Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType = 2
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_MAPX_OFFSETX_INCREASE Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType = 3
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_MAPX_1X_TOX_1         Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType = 4
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_MAPX_2X_TOX_1         Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType = 5
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_MAPX_1X_TOX_2         Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType = 6
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_MAPX_2X_TOX_2         Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType = 7
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_POPX_DOUBLE           Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType = 8
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_PUSH2X_LAYER          Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType = 9
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_MAPX_OFFSETX_DECREASE Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType = 10
)

// Enum value maps for Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType.
var (
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_name = map[int32]string{
		0:  "ActionType_POPX_OUTER",
		1:  "ActionType_PUSH1X_LAYER",
		2:  "ActionType_SWAP",
		3:  "ActionType_MAPX_OFFSETX_INCREASE",
		4:  "ActionType_MAPX_1X_TOX_1",
		5:  "ActionType_MAPX_2X_TOX_1",
		6:  "ActionType_MAPX_1X_TOX_2",
		7:  "ActionType_MAPX_2X_TOX_2",
		8:  "ActionType_POPX_DOUBLE",
		9:  "ActionType_PUSH2X_LAYER",
		10: "ActionType_MAPX_OFFSETX_DECREASE",
	}
	Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_value = map[string]int32{
		"ActionType_POPX_OUTER":            0,
		"ActionType_PUSH1X_LAYER":          1,
		"ActionType_SWAP":                  2,
		"ActionType_MAPX_OFFSETX_INCREASE": 3,
		"ActionType_MAPX_1X_TOX_1":         4,
		"ActionType_MAPX_2X_TOX_1":         5,
		"ActionType_MAPX_1X_TOX_2":         6,
		"ActionType_MAPX_2X_TOX_2":         7,
		"ActionType_POPX_DOUBLE":           8,
		"ActionType_PUSH2X_LAYER":          9,
		"ActionType_MAPX_OFFSETX_DECREASE": 10,
	}
)

func (x Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType) Enum() *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType {
	p := new(Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[36].Descriptor()
}

func (Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[36]
}

func (x Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType.Descriptor instead.
func (Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 3, 0, 0}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_SignalProtocol int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_INVALID_ENUM_VALUE_SignalProtocol Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_SignalProtocol = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_SignalProtocol_RSVPX_TE           Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_SignalProtocol = 2
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_SignalProtocol_CRX_STATIC         Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_SignalProtocol = 4
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_SignalProtocol_SEGMENTX_ROUTING   Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_SignalProtocol = 6
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_SignalProtocol.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_SignalProtocol_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_SignalProtocol",
		2: "SignalProtocol_RSVPX_TE",
		4: "SignalProtocol_CRX_STATIC",
		6: "SignalProtocol_SEGMENTX_ROUTING",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_SignalProtocol_value = map[string]int32{
		"INVALID_ENUM_VALUE_SignalProtocol": 0,
		"SignalProtocol_RSVPX_TE":           2,
		"SignalProtocol_CRX_STATIC":         4,
		"SignalProtocol_SEGMENTX_ROUTING":   6,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_SignalProtocol) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_SignalProtocol {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_SignalProtocol)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_SignalProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_SignalProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[37].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_SignalProtocol) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[37]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_SignalProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_SignalProtocol) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_SignalProtocol(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_SignalProtocol.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_SignalProtocol) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 0, 0}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_ReserveStyle int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_INVALID_ENUM_VALUE_ReserveStyle Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_ReserveStyle = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_ReserveStyle_SE                 Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_ReserveStyle = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_ReserveStyle_FF                 Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_ReserveStyle = 2
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_ReserveStyle.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_ReserveStyle_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_ReserveStyle",
		1: "ReserveStyle_SE",
		2: "ReserveStyle_FF",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_ReserveStyle_value = map[string]int32{
		"INVALID_ENUM_VALUE_ReserveStyle": 0,
		"ReserveStyle_SE":                 1,
		"ReserveStyle_FF":                 2,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_ReserveStyle) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_ReserveStyle {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_ReserveStyle)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_ReserveStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_ReserveStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[38].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_ReserveStyle) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[38]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_ReserveStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_ReserveStyle) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_ReserveStyle(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_ReserveStyle.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_ReserveStyle) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 0}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_RecordRoute int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_INVALID_ENUM_VALUE_RecordRoute  Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_RecordRoute = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_RecordRoute_DISABLE             Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_RecordRoute = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_RecordRoute_RECORDX_ROUTEX_ONLY Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_RecordRoute = 2
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_RecordRoute_RECORDX_LABEL       Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_RecordRoute = 3
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_RecordRoute.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_RecordRoute_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_RecordRoute",
		1: "RecordRoute_DISABLE",
		2: "RecordRoute_RECORDX_ROUTEX_ONLY",
		3: "RecordRoute_RECORDX_LABEL",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_RecordRoute_value = map[string]int32{
		"INVALID_ENUM_VALUE_RecordRoute":  0,
		"RecordRoute_DISABLE":             1,
		"RecordRoute_RECORDX_ROUTEX_ONLY": 2,
		"RecordRoute_RECORDX_LABEL":       3,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_RecordRoute) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_RecordRoute {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_RecordRoute)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_RecordRoute) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_RecordRoute) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[39].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_RecordRoute) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[39]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_RecordRoute) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_RecordRoute) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_RecordRoute(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_RecordRoute.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_RecordRoute) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 1}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_INVALID_ENUM_VALUE_TieBreaking Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking_LEASTX_FILL        Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking_MOSTX_FILL         Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking = 2
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking_RANDOM             Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking = 3
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking_DEFAULT            Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking = 4
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_TieBreaking",
		1: "TieBreaking_LEASTX_FILL",
		2: "TieBreaking_MOSTX_FILL",
		3: "TieBreaking_RANDOM",
		4: "TieBreaking_DEFAULT",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking_value = map[string]int32{
		"INVALID_ENUM_VALUE_TieBreaking": 0,
		"TieBreaking_LEASTX_FILL":        1,
		"TieBreaking_MOSTX_FILL":         2,
		"TieBreaking_RANDOM":             3,
		"TieBreaking_DEFAULT":            4,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[40].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[40]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 2}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PathMetricType int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_INVALID_ENUM_VALUE_PathMetricType Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PathMetricType = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PathMetricType_NONE               Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PathMetricType = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PathMetricType_IGP                Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PathMetricType = 2
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PathMetricType_TE                 Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PathMetricType = 3
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PathMetricType.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PathMetricType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_PathMetricType",
		1: "PathMetricType_NONE",
		2: "PathMetricType_IGP",
		3: "PathMetricType_TE",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PathMetricType_value = map[string]int32{
		"INVALID_ENUM_VALUE_PathMetricType": 0,
		"PathMetricType_NONE":               1,
		"PathMetricType_IGP":                2,
		"PathMetricType_TE":                 3,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PathMetricType) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PathMetricType {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PathMetricType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PathMetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PathMetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[41].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PathMetricType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[41]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PathMetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PathMetricType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PathMetricType(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PathMetricType.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PathMetricType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 3}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PceDelegate int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PceDelegate_NO                   Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PceDelegate = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PceDelegate_ACTIVE               Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PceDelegate = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PceDelegate_ONLYX_STATUSX_REPORT Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PceDelegate = 2
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PceDelegate.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PceDelegate_name = map[int32]string{
		0: "PceDelegate_NO",
		1: "PceDelegate_ACTIVE",
		2: "PceDelegate_ONLYX_STATUSX_REPORT",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PceDelegate_value = map[string]int32{
		"PceDelegate_NO":                   0,
		"PceDelegate_ACTIVE":               1,
		"PceDelegate_ONLYX_STATUSX_REPORT": 2,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PceDelegate) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PceDelegate {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PceDelegate)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PceDelegate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PceDelegate) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[42].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PceDelegate) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[42]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PceDelegate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PceDelegate) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PceDelegate(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PceDelegate.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PceDelegate) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 4}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_EntropyLabel int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_EntropyLabel_DEFAULT Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_EntropyLabel = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_EntropyLabel_ENABLE  Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_EntropyLabel = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_EntropyLabel_BLOCK   Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_EntropyLabel = 2
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_EntropyLabel.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_EntropyLabel_name = map[int32]string{
		0: "EntropyLabel_DEFAULT",
		1: "EntropyLabel_ENABLE",
		2: "EntropyLabel_BLOCK",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_EntropyLabel_value = map[string]int32{
		"EntropyLabel_DEFAULT": 0,
		"EntropyLabel_ENABLE":  1,
		"EntropyLabel_BLOCK":   2,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_EntropyLabel) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_EntropyLabel {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_EntropyLabel)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_EntropyLabel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_EntropyLabel) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[43].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_EntropyLabel) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[43]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_EntropyLabel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_EntropyLabel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_EntropyLabel(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_EntropyLabel.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_EntropyLabel) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 5}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_Mode int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_INVALID_ENUM_VALUE_Mode Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_Mode = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_Mode_FACILITYX_BACKUP   Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_Mode = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_Mode_DETOURX_BACKUP     Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_Mode = 2
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_Mode.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_Mode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Mode",
		1: "Mode_FACILITYX_BACKUP",
		2: "Mode_DETOURX_BACKUP",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_Mode": 0,
		"Mode_FACILITYX_BACKUP":   1,
		"Mode_DETOURX_BACKUP":     2,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_Mode) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_Mode {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_Mode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[44].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_Mode) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[44]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_Mode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_Mode(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_Mode.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 0, 0}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby_RevertiveMode int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby_RevertiveMode_NONX_REVERTIVE Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby_RevertiveMode = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby_RevertiveMode_REVERTIVE      Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby_RevertiveMode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby_RevertiveMode.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby_RevertiveMode_name = map[int32]string{
		0: "RevertiveMode_NONX_REVERTIVE",
		1: "RevertiveMode_REVERTIVE",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby_RevertiveMode_value = map[string]int32{
		"RevertiveMode_NONX_REVERTIVE": 0,
		"RevertiveMode_REVERTIVE":      1,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby_RevertiveMode) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby_RevertiveMode {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby_RevertiveMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby_RevertiveMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby_RevertiveMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[45].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby_RevertiveMode) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[45]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby_RevertiveMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby_RevertiveMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby_RevertiveMode(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby_RevertiveMode.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby_RevertiveMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 1, 0}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType_PRIMARY      Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType_HOTX_STANDBY Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType_ORDINARY     Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType = 2
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType_BESTX_EFFORT Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType = 3
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType_name = map[int32]string{
		0: "PathType_PRIMARY",
		1: "PathType_HOTX_STANDBY",
		2: "PathType_ORDINARY",
		3: "PathType_BESTX_EFFORT",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType_value = map[string]int32{
		"PathType_PRIMARY":      0,
		"PathType_HOTX_STANDBY": 1,
		"PathType_ORDINARY":     2,
		"PathType_BESTX_EFFORT": 3,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[46].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[46]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 2, 0, 0}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState_DOWN Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState_UP   Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState_X_   Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState = 2
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState_NONE Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState = 3
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState_name = map[int32]string{
		0: "LspState_DOWN",
		1: "LspState_UP",
		2: "LspState_X_",
		3: "LspState_NONE",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState_value = map[string]int32{
		"LspState_DOWN": 0,
		"LspState_UP":   1,
		"LspState_X_":   2,
		"LspState_NONE": 3,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[47].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[47]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 2, 0, 1}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchResult int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchResult_MAINX_LSP         Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchResult = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchResult_HSBX_LSP          Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchResult = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchResult_BESTX_EFFORTX_LSP Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchResult = 2
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchResult.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchResult_name = map[int32]string{
		0: "SwitchResult_MAINX_LSP",
		1: "SwitchResult_HSBX_LSP",
		2: "SwitchResult_BESTX_EFFORTX_LSP",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchResult_value = map[string]int32{
		"SwitchResult_MAINX_LSP":         0,
		"SwitchResult_HSBX_LSP":          1,
		"SwitchResult_BESTX_EFFORTX_LSP": 2,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchResult) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchResult {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchResult)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchResult) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[48].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchResult) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[48]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchResult(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchResult.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchResult) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 4, 0}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchState int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchState_NONE              Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchState = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchState_WAITX_TOX_RESTORE Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchState = 1
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchState.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchState_name = map[int32]string{
		0: "SwitchState_NONE",
		1: "SwitchState_WAITX_TOX_RESTORE",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchState_value = map[string]int32{
		"SwitchState_NONE":              0,
		"SwitchState_WAITX_TOX_RESTORE": 1,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchState) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchState {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchState)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchState) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[49].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchState) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[49]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchState(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchState.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchState) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 4, 1}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap_DIFFERENTX_PATH     Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap_PARTIALX_LINKX_SAME Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap_NOTX_COMPARE        Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap = 2
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap_EXACTLYX_SAMEX_PATH Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap = 3
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap_name = map[int32]string{
		0: "UsingOverlap_DIFFERENTX_PATH",
		1: "UsingOverlap_PARTIALX_LINKX_SAME",
		2: "UsingOverlap_NOTX_COMPARE",
		3: "UsingOverlap_EXACTLYX_SAMEX_PATH",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap_value = map[string]int32{
		"UsingOverlap_DIFFERENTX_PATH":     0,
		"UsingOverlap_PARTIALX_LINKX_SAME": 1,
		"UsingOverlap_NOTX_COMPARE":        2,
		"UsingOverlap_EXACTLYX_SAMEX_PATH": 3,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[50].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[50]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 4, 2}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason_NONE              Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason_FORCE             Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason_SIGNALX_FAIL      Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason = 2
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason_DOX_NOTX_REVERT   Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason = 3
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason_WAITX_TOX_RESTORE Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason = 4
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason_BFDX_DOWN         Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason = 5
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason_SIGNALX_DEGRADE   Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason = 6
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason_FRRX_INUSE        Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason = 7
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason_name = map[int32]string{
		0: "SwitchReason_NONE",
		1: "SwitchReason_FORCE",
		2: "SwitchReason_SIGNALX_FAIL",
		3: "SwitchReason_DOX_NOTX_REVERT",
		4: "SwitchReason_WAITX_TOX_RESTORE",
		5: "SwitchReason_BFDX_DOWN",
		6: "SwitchReason_SIGNALX_DEGRADE",
		7: "SwitchReason_FRRX_INUSE",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason_value = map[string]int32{
		"SwitchReason_NONE":              0,
		"SwitchReason_FORCE":             1,
		"SwitchReason_SIGNALX_FAIL":      2,
		"SwitchReason_DOX_NOTX_REVERT":   3,
		"SwitchReason_WAITX_TOX_RESTORE": 4,
		"SwitchReason_BFDX_DOWN":         5,
		"SwitchReason_SIGNALX_DEGRADE":   6,
		"SwitchReason_FRRX_INUSE":        7,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[51].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[51]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 4, 3}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_Mode int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_INVALID_ENUM_VALUE_Mode Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_Mode = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_Mode_COLLECTX_BW        Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_Mode = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_Mode_ADJUSTMENT         Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_Mode = 2
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_Mode_NONE               Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_Mode = 3
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_Mode.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_Mode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Mode",
		1: "Mode_COLLECTX_BW",
		2: "Mode_ADJUSTMENT",
		3: "Mode_NONE",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_Mode": 0,
		"Mode_COLLECTX_BW":        1,
		"Mode_ADJUSTMENT":         2,
		"Mode_NONE":               3,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_Mode) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_Mode {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_Mode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[52].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_Mode) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[52]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_Mode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_Mode(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_Mode.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 5, 0}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_ThresholdLogic int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_ThresholdLogic_AND Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_ThresholdLogic = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_ThresholdLogic_OR  Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_ThresholdLogic = 1
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_ThresholdLogic.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_ThresholdLogic_name = map[int32]string{
		0: "ThresholdLogic_AND",
		1: "ThresholdLogic_OR",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_ThresholdLogic_value = map[string]int32{
		"ThresholdLogic_AND": 0,
		"ThresholdLogic_OR":  1,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_ThresholdLogic) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_ThresholdLogic {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_ThresholdLogic)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_ThresholdLogic) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_ThresholdLogic) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[53].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_ThresholdLogic) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[53]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_ThresholdLogic) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_ThresholdLogic) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_ThresholdLogic(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_ThresholdLogic.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_ThresholdLogic) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 5, 1}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Ability int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_INVALID_ENUM_VALUE_Ability Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Ability = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Ability_ENABLE             Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Ability = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Ability_BLOCK              Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Ability = 2
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Ability.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Ability_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Ability",
		1: "Ability_ENABLE",
		2: "Ability_BLOCK",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Ability_value = map[string]int32{
		"INVALID_ENUM_VALUE_Ability": 0,
		"Ability_ENABLE":             1,
		"Ability_BLOCK":              2,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Ability) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Ability {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Ability)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Ability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Ability) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[54].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Ability) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[54]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Ability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Ability) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Ability(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Ability.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Ability) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 6, 0}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Mode int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_INVALID_ENUM_VALUE_Mode Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Mode = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Mode_ONEX_ARMX_ECHO     Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Mode = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Mode_OPTIONX_TLV        Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Mode = 3
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Mode.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Mode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Mode",
		1: "Mode_ONEX_ARMX_ECHO",
		3: "Mode_OPTIONX_TLV",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_Mode": 0,
		"Mode_ONEX_ARMX_ECHO":     1,
		"Mode_OPTIONX_TLV":        3,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Mode) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Mode {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Mode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[55].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Mode) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[55]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Mode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Mode(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Mode.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 6, 1}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PceDelegate int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PceDelegate_NO                   Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PceDelegate = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PceDelegate_ACTIVE               Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PceDelegate = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PceDelegate_ONLYX_STATUSX_REPORT Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PceDelegate = 2
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PceDelegate.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PceDelegate_name = map[int32]string{
		0: "PceDelegate_NO",
		1: "PceDelegate_ACTIVE",
		2: "PceDelegate_ONLYX_STATUSX_REPORT",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PceDelegate_value = map[string]int32{
		"PceDelegate_NO":                   0,
		"PceDelegate_ACTIVE":               1,
		"PceDelegate_ONLYX_STATUSX_REPORT": 2,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PceDelegate) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PceDelegate {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PceDelegate)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PceDelegate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PceDelegate) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[56].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PceDelegate) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[56]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PceDelegate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PceDelegate) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PceDelegate(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PceDelegate.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PceDelegate) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 2, 0}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PathVerification int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PathVerification_INHERIT Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PathVerification = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PathVerification_ENABLE  Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PathVerification = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PathVerification_DISABLE Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PathVerification = 2
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PathVerification.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PathVerification_name = map[int32]string{
		0: "PathVerification_INHERIT",
		1: "PathVerification_ENABLE",
		2: "PathVerification_DISABLE",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PathVerification_value = map[string]int32{
		"PathVerification_INHERIT": 0,
		"PathVerification_ENABLE":  1,
		"PathVerification_DISABLE": 2,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PathVerification) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PathVerification {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PathVerification)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PathVerification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PathVerification) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[57].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PathVerification) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[57]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PathVerification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PathVerification) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PathVerification(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PathVerification.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PathVerification) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 2, 1}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby_RevertiveMode int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby_RevertiveMode_NONX_REVERTIVE Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby_RevertiveMode = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby_RevertiveMode_REVERTIVE      Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby_RevertiveMode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby_RevertiveMode.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby_RevertiveMode_name = map[int32]string{
		0: "RevertiveMode_NONX_REVERTIVE",
		1: "RevertiveMode_REVERTIVE",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby_RevertiveMode_value = map[string]int32{
		"RevertiveMode_NONX_REVERTIVE": 0,
		"RevertiveMode_REVERTIVE":      1,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby_RevertiveMode) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby_RevertiveMode {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby_RevertiveMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby_RevertiveMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby_RevertiveMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[58].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby_RevertiveMode) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[58]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby_RevertiveMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby_RevertiveMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby_RevertiveMode(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby_RevertiveMode.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby_RevertiveMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 2, 1, 0}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState_DOWN Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState_UP   Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState_X_   Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState = 2
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState_NONE Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState = 3
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState_name = map[int32]string{
		0: "LspState_DOWN",
		1: "LspState_UP",
		2: "LspState_X_",
		3: "LspState_NONE",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState_value = map[string]int32{
		"LspState_DOWN": 0,
		"LspState_UP":   1,
		"LspState_X_":   2,
		"LspState_NONE": 3,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[59].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[59]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 2, 2, 0, 0}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchResult int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchResult_MAINX_LSP         Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchResult = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchResult_HSBX_LSP          Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchResult = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchResult_BESTX_EFFORTX_LSP Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchResult = 2
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchResult.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchResult_name = map[int32]string{
		0: "SwitchResult_MAINX_LSP",
		1: "SwitchResult_HSBX_LSP",
		2: "SwitchResult_BESTX_EFFORTX_LSP",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchResult_value = map[string]int32{
		"SwitchResult_MAINX_LSP":         0,
		"SwitchResult_HSBX_LSP":          1,
		"SwitchResult_BESTX_EFFORTX_LSP": 2,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchResult) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchResult {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchResult)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchResult) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[60].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchResult) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[60]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchResult(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchResult.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchResult) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 2, 3, 0}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchState int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchState_NONE              Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchState = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchState_WAITX_TOX_RESTORE Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchState = 1
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchState.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchState_name = map[int32]string{
		0: "SwitchState_NONE",
		1: "SwitchState_WAITX_TOX_RESTORE",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchState_value = map[string]int32{
		"SwitchState_NONE":              0,
		"SwitchState_WAITX_TOX_RESTORE": 1,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchState) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchState {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchState)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchState) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[61].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchState) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[61]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchState(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchState.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchState) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 2, 3, 1}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap_DIFFERENTX_PATH     Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap_PARTIALX_LINKX_SAME Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap_NOTX_COMPARE        Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap = 2
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap_EXACTLYX_SAMEX_PATH Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap = 3
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap_name = map[int32]string{
		0: "UsingOverlap_DIFFERENTX_PATH",
		1: "UsingOverlap_PARTIALX_LINKX_SAME",
		2: "UsingOverlap_NOTX_COMPARE",
		3: "UsingOverlap_EXACTLYX_SAMEX_PATH",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap_value = map[string]int32{
		"UsingOverlap_DIFFERENTX_PATH":     0,
		"UsingOverlap_PARTIALX_LINKX_SAME": 1,
		"UsingOverlap_NOTX_COMPARE":        2,
		"UsingOverlap_EXACTLYX_SAMEX_PATH": 3,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[62].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[62]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 2, 3, 2}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason_NONE              Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason_WAITX_TOX_RESTORE Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason_FORCE             Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason = 2
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason_SIGNALX_FAIL      Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason = 3
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason_DOX_NOTX_REVERT   Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason = 4
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason_BFDX_DOWN         Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason = 5
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason_SIGNALX_DEGRADE   Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason = 6
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason_FRRX_INUSE        Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason = 7
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason_name = map[int32]string{
		0: "SwitchReason_NONE",
		1: "SwitchReason_WAITX_TOX_RESTORE",
		2: "SwitchReason_FORCE",
		3: "SwitchReason_SIGNALX_FAIL",
		4: "SwitchReason_DOX_NOTX_REVERT",
		5: "SwitchReason_BFDX_DOWN",
		6: "SwitchReason_SIGNALX_DEGRADE",
		7: "SwitchReason_FRRX_INUSE",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason_value = map[string]int32{
		"SwitchReason_NONE":              0,
		"SwitchReason_WAITX_TOX_RESTORE": 1,
		"SwitchReason_FORCE":             2,
		"SwitchReason_SIGNALX_FAIL":      3,
		"SwitchReason_DOX_NOTX_REVERT":   4,
		"SwitchReason_BFDX_DOWN":         5,
		"SwitchReason_SIGNALX_DEGRADE":   6,
		"SwitchReason_FRRX_INUSE":        7,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[63].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[63]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 2, 3, 3}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop_LabelType int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop_LabelType_LINK    Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop_LabelType = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop_LabelType_NODE    Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop_LabelType = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop_LabelType_BINDING Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop_LabelType = 2
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop_LabelType.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop_LabelType_name = map[int32]string{
		0: "LabelType_LINK",
		1: "LabelType_NODE",
		2: "LabelType_BINDING",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop_LabelType_value = map[string]int32{
		"LabelType_LINK":    0,
		"LabelType_NODE":    1,
		"LabelType_BINDING": 2,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop_LabelType) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop_LabelType {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop_LabelType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop_LabelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop_LabelType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[64].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop_LabelType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[64]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop_LabelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop_LabelType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop_LabelType(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop_LabelType.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop_LabelType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 2, 4, 0, 0, 0, 0}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Mode int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_INVALID_ENUM_VALUE_Mode Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Mode = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Mode_ONEX_ARMX_ECHO     Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Mode = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Mode_SEAMLESS           Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Mode = 2
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Mode_OPTIONX_TLV        Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Mode = 3
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Mode.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Mode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Mode",
		1: "Mode_ONEX_ARMX_ECHO",
		2: "Mode_SEAMLESS",
		3: "Mode_OPTIONX_TLV",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_Mode": 0,
		"Mode_ONEX_ARMX_ECHO":     1,
		"Mode_SEAMLESS":           2,
		"Mode_OPTIONX_TLV":        3,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Mode) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Mode {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Mode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[65].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Mode) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[65]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Mode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Mode(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Mode.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 2, 5, 0}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Ability int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_INVALID_ENUM_VALUE_Ability Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Ability = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Ability_ENABLE             Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Ability = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Ability_BLOCK              Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Ability = 2
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Ability.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Ability_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Ability",
		1: "Ability_ENABLE",
		2: "Ability_BLOCK",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Ability_value = map[string]int32{
		"INVALID_ENUM_VALUE_Ability": 0,
		"Ability_ENABLE":             1,
		"Ability_BLOCK":              2,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Ability) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Ability {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Ability)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Ability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Ability) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[66].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Ability) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[66]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Ability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Ability) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Ability(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Ability.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Ability) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 2, 5, 1}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Mode int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_INVALID_ENUM_VALUE_Mode Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Mode = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Mode_ONEX_ARMX_ECHO     Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Mode = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Mode_SEAMLESS           Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Mode = 3
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Mode.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Mode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Mode",
		1: "Mode_ONEX_ARMX_ECHO",
		3: "Mode_SEAMLESS",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Mode_value = map[string]int32{
		"INVALID_ENUM_VALUE_Mode": 0,
		"Mode_ONEX_ARMX_ECHO":     1,
		"Mode_SEAMLESS":           3,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Mode) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Mode {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Mode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[67].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Mode) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[67]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Mode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Mode(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Mode.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 2, 6, 0}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Ability int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_INVALID_ENUM_VALUE_Ability Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Ability = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Ability_ENABLE             Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Ability = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Ability_BLOCK              Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Ability = 2
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Ability.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Ability_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Ability",
		1: "Ability_ENABLE",
		2: "Ability_BLOCK",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Ability_value = map[string]int32{
		"INVALID_ENUM_VALUE_Ability": 0,
		"Ability_ENABLE":             1,
		"Ability_BLOCK":              2,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Ability) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Ability {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Ability)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Ability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Ability) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[68].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Ability) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[68]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Ability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Ability) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Ability(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Ability.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Ability) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 2, 6, 1}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_ShortcutType int32

const (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_ShortcutType_DISABLE Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_ShortcutType = 0
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_ShortcutType_ISIS    Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_ShortcutType = 1
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_ShortcutType_OSPF    Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_ShortcutType = 2
)

// Enum value maps for Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_ShortcutType.
var (
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_ShortcutType_name = map[int32]string{
		0: "ShortcutType_DISABLE",
		1: "ShortcutType_ISIS",
		2: "ShortcutType_OSPF",
	}
	Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_ShortcutType_value = map[string]int32{
		"ShortcutType_DISABLE": 0,
		"ShortcutType_ISIS":    1,
		"ShortcutType_OSPF":    2,
	}
)

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_ShortcutType) Enum() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_ShortcutType {
	p := new(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_ShortcutType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_ShortcutType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_ShortcutType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[69].Descriptor()
}

func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_ShortcutType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[69]
}

func (x Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_ShortcutType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_ShortcutType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_ShortcutType(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_ShortcutType.Descriptor instead.
func (Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_ShortcutType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 3, 0}
}

type Ifm_Interfaces_Interface_ArpSending_Type int32

const (
	Ifm_Interfaces_Interface_ArpSending_INVALID_ENUM_VALUE_Type Ifm_Interfaces_Interface_ArpSending_Type = 0
	Ifm_Interfaces_Interface_ArpSending_Type_DUALX_SEND         Ifm_Interfaces_Interface_ArpSending_Type = 1
	Ifm_Interfaces_Interface_ArpSending_Type_SINGLEX_SEND       Ifm_Interfaces_Interface_ArpSending_Type = 2
)

// Enum value maps for Ifm_Interfaces_Interface_ArpSending_Type.
var (
	Ifm_Interfaces_Interface_ArpSending_Type_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Type",
		1: "Type_DUALX_SEND",
		2: "Type_SINGLEX_SEND",
	}
	Ifm_Interfaces_Interface_ArpSending_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_DUALX_SEND":         1,
		"Type_SINGLEX_SEND":       2,
	}
)

func (x Ifm_Interfaces_Interface_ArpSending_Type) Enum() *Ifm_Interfaces_Interface_ArpSending_Type {
	p := new(Ifm_Interfaces_Interface_ArpSending_Type)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_ArpSending_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_ArpSending_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[70].Descriptor()
}

func (Ifm_Interfaces_Interface_ArpSending_Type) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[70]
}

func (x Ifm_Interfaces_Interface_ArpSending_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_ArpSending_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_ArpSending_Type(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_ArpSending_Type.Descriptor instead.
func (Ifm_Interfaces_Interface_ArpSending_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11, 0}
}

type Ifm_Interfaces_Interface_NdSending_Type int32

const (
	Ifm_Interfaces_Interface_NdSending_INVALID_ENUM_VALUE_Type Ifm_Interfaces_Interface_NdSending_Type = 0
	Ifm_Interfaces_Interface_NdSending_Type_DUALX_SEND         Ifm_Interfaces_Interface_NdSending_Type = 1
)

// Enum value maps for Ifm_Interfaces_Interface_NdSending_Type.
var (
	Ifm_Interfaces_Interface_NdSending_Type_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Type",
		1: "Type_DUALX_SEND",
	}
	Ifm_Interfaces_Interface_NdSending_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_DUALX_SEND":         1,
	}
)

func (x Ifm_Interfaces_Interface_NdSending_Type) Enum() *Ifm_Interfaces_Interface_NdSending_Type {
	p := new(Ifm_Interfaces_Interface_NdSending_Type)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_NdSending_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_NdSending_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[71].Descriptor()
}

func (Ifm_Interfaces_Interface_NdSending_Type) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[71]
}

func (x Ifm_Interfaces_Interface_NdSending_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_NdSending_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_NdSending_Type(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_NdSending_Type.Descriptor instead.
func (Ifm_Interfaces_Interface_NdSending_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 12, 0}
}

type Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict int32

const (
	Ifm_Interfaces_Interface_ArpEntry_INVALID_ENUM_VALUE_ArpLearnStrict Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict = 0
	Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict_FORCEX_DISABLE     Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict = 1
	Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict_FORCEX_ENABLE      Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict = 2
	Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict_TRUST              Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict = 3
)

// Enum value maps for Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict.
var (
	Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_ArpLearnStrict",
		1: "ArpLearnStrict_FORCEX_DISABLE",
		2: "ArpLearnStrict_FORCEX_ENABLE",
		3: "ArpLearnStrict_TRUST",
	}
	Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict_value = map[string]int32{
		"INVALID_ENUM_VALUE_ArpLearnStrict": 0,
		"ArpLearnStrict_FORCEX_DISABLE":     1,
		"ArpLearnStrict_FORCEX_ENABLE":      2,
		"ArpLearnStrict_TRUST":              3,
	}
)

func (x Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict) Enum() *Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict {
	p := new(Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[72].Descriptor()
}

func (Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[72]
}

func (x Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict.Descriptor instead.
func (Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 16, 0}
}

type Ifm_Interfaces_Interface_ArpEntry_Gratuitous int32

const (
	Ifm_Interfaces_Interface_ArpEntry_INVALID_ENUM_VALUE_Gratuitous Ifm_Interfaces_Interface_ArpEntry_Gratuitous = 0
	Ifm_Interfaces_Interface_ArpEntry_Gratuitous_ENABLE             Ifm_Interfaces_Interface_ArpEntry_Gratuitous = 1
	Ifm_Interfaces_Interface_ArpEntry_Gratuitous_ACCORDINGX_GLOBAL  Ifm_Interfaces_Interface_ArpEntry_Gratuitous = 2
	Ifm_Interfaces_Interface_ArpEntry_Gratuitous_DISABLE            Ifm_Interfaces_Interface_ArpEntry_Gratuitous = 3
)

// Enum value maps for Ifm_Interfaces_Interface_ArpEntry_Gratuitous.
var (
	Ifm_Interfaces_Interface_ArpEntry_Gratuitous_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Gratuitous",
		1: "Gratuitous_ENABLE",
		2: "Gratuitous_ACCORDINGX_GLOBAL",
		3: "Gratuitous_DISABLE",
	}
	Ifm_Interfaces_Interface_ArpEntry_Gratuitous_value = map[string]int32{
		"INVALID_ENUM_VALUE_Gratuitous": 0,
		"Gratuitous_ENABLE":             1,
		"Gratuitous_ACCORDINGX_GLOBAL":  2,
		"Gratuitous_DISABLE":            3,
	}
)

func (x Ifm_Interfaces_Interface_ArpEntry_Gratuitous) Enum() *Ifm_Interfaces_Interface_ArpEntry_Gratuitous {
	p := new(Ifm_Interfaces_Interface_ArpEntry_Gratuitous)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_ArpEntry_Gratuitous) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_ArpEntry_Gratuitous) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[73].Descriptor()
}

func (Ifm_Interfaces_Interface_ArpEntry_Gratuitous) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[73]
}

func (x Ifm_Interfaces_Interface_ArpEntry_Gratuitous) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_ArpEntry_Gratuitous) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_ArpEntry_Gratuitous(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_ArpEntry_Gratuitous.Descriptor instead.
func (Ifm_Interfaces_Interface_ArpEntry_Gratuitous) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 16, 1}
}

type Ifm_Interfaces_Interface_ArpEntry_GratuitousSend int32

const (
	Ifm_Interfaces_Interface_ArpEntry_INVALID_ENUM_VALUE_GratuitousSend Ifm_Interfaces_Interface_ArpEntry_GratuitousSend = 0
	Ifm_Interfaces_Interface_ArpEntry_GratuitousSend_ENABLE             Ifm_Interfaces_Interface_ArpEntry_GratuitousSend = 2
	Ifm_Interfaces_Interface_ArpEntry_GratuitousSend_DISABLE            Ifm_Interfaces_Interface_ArpEntry_GratuitousSend = 3
)

// Enum value maps for Ifm_Interfaces_Interface_ArpEntry_GratuitousSend.
var (
	Ifm_Interfaces_Interface_ArpEntry_GratuitousSend_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_GratuitousSend",
		2: "GratuitousSend_ENABLE",
		3: "GratuitousSend_DISABLE",
	}
	Ifm_Interfaces_Interface_ArpEntry_GratuitousSend_value = map[string]int32{
		"INVALID_ENUM_VALUE_GratuitousSend": 0,
		"GratuitousSend_ENABLE":             2,
		"GratuitousSend_DISABLE":            3,
	}
)

func (x Ifm_Interfaces_Interface_ArpEntry_GratuitousSend) Enum() *Ifm_Interfaces_Interface_ArpEntry_GratuitousSend {
	p := new(Ifm_Interfaces_Interface_ArpEntry_GratuitousSend)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_ArpEntry_GratuitousSend) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_ArpEntry_GratuitousSend) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[74].Descriptor()
}

func (Ifm_Interfaces_Interface_ArpEntry_GratuitousSend) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[74]
}

func (x Ifm_Interfaces_Interface_ArpEntry_GratuitousSend) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_ArpEntry_GratuitousSend) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_ArpEntry_GratuitousSend(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_ArpEntry_GratuitousSend.Descriptor instead.
func (Ifm_Interfaces_Interface_ArpEntry_GratuitousSend) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 16, 2}
}

type Ifm_Interfaces_Interface_Efm_Session_State int32

const (
	Ifm_Interfaces_Interface_Efm_Session_State_DISABLE Ifm_Interfaces_Interface_Efm_Session_State = 0
	Ifm_Interfaces_Interface_Efm_Session_State_ENABLE  Ifm_Interfaces_Interface_Efm_Session_State = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Efm_Session_State.
var (
	Ifm_Interfaces_Interface_Efm_Session_State_name = map[int32]string{
		0: "State_DISABLE",
		1: "State_ENABLE",
	}
	Ifm_Interfaces_Interface_Efm_Session_State_value = map[string]int32{
		"State_DISABLE": 0,
		"State_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Efm_Session_State) Enum() *Ifm_Interfaces_Interface_Efm_Session_State {
	p := new(Ifm_Interfaces_Interface_Efm_Session_State)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Efm_Session_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Efm_Session_State) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[75].Descriptor()
}

func (Ifm_Interfaces_Interface_Efm_Session_State) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[75]
}

func (x Ifm_Interfaces_Interface_Efm_Session_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Efm_Session_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Efm_Session_State(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_State.Descriptor instead.
func (Ifm_Interfaces_Interface_Efm_Session_State) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 0, 0}
}

type Ifm_Interfaces_Interface_Efm_Session_Mode int32

const (
	Ifm_Interfaces_Interface_Efm_Session_Mode_PASSIVE Ifm_Interfaces_Interface_Efm_Session_Mode = 0
	Ifm_Interfaces_Interface_Efm_Session_Mode_ACTIVE  Ifm_Interfaces_Interface_Efm_Session_Mode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Efm_Session_Mode.
var (
	Ifm_Interfaces_Interface_Efm_Session_Mode_name = map[int32]string{
		0: "Mode_PASSIVE",
		1: "Mode_ACTIVE",
	}
	Ifm_Interfaces_Interface_Efm_Session_Mode_value = map[string]int32{
		"Mode_PASSIVE": 0,
		"Mode_ACTIVE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Efm_Session_Mode) Enum() *Ifm_Interfaces_Interface_Efm_Session_Mode {
	p := new(Ifm_Interfaces_Interface_Efm_Session_Mode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Efm_Session_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Efm_Session_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[76].Descriptor()
}

func (Ifm_Interfaces_Interface_Efm_Session_Mode) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[76]
}

func (x Ifm_Interfaces_Interface_Efm_Session_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Efm_Session_Mode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Efm_Session_Mode(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_Mode.Descriptor instead.
func (Ifm_Interfaces_Interface_Efm_Session_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 0, 1}
}

type Ifm_Interfaces_Interface_Efm_Session_LinkEvent int32

const (
	Ifm_Interfaces_Interface_Efm_Session_LinkEvent_DISABLE Ifm_Interfaces_Interface_Efm_Session_LinkEvent = 0
	Ifm_Interfaces_Interface_Efm_Session_LinkEvent_ENABLE  Ifm_Interfaces_Interface_Efm_Session_LinkEvent = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Efm_Session_LinkEvent.
var (
	Ifm_Interfaces_Interface_Efm_Session_LinkEvent_name = map[int32]string{
		0: "LinkEvent_DISABLE",
		1: "LinkEvent_ENABLE",
	}
	Ifm_Interfaces_Interface_Efm_Session_LinkEvent_value = map[string]int32{
		"LinkEvent_DISABLE": 0,
		"LinkEvent_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Efm_Session_LinkEvent) Enum() *Ifm_Interfaces_Interface_Efm_Session_LinkEvent {
	p := new(Ifm_Interfaces_Interface_Efm_Session_LinkEvent)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Efm_Session_LinkEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Efm_Session_LinkEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[77].Descriptor()
}

func (Ifm_Interfaces_Interface_Efm_Session_LinkEvent) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[77]
}

func (x Ifm_Interfaces_Interface_Efm_Session_LinkEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Efm_Session_LinkEvent) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Efm_Session_LinkEvent(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_LinkEvent.Descriptor instead.
func (Ifm_Interfaces_Interface_Efm_Session_LinkEvent) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 0, 2}
}

type Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest int32

const (
	Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest_DISABLE Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest = 0
	Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest_ENABLE  Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest.
var (
	Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest_name = map[int32]string{
		0: "IgnoreLoopbackRequest_DISABLE",
		1: "IgnoreLoopbackRequest_ENABLE",
	}
	Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest_value = map[string]int32{
		"IgnoreLoopbackRequest_DISABLE": 0,
		"IgnoreLoopbackRequest_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest) Enum() *Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest {
	p := new(Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[78].Descriptor()
}

func (Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[78]
}

func (x Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest.Descriptor instead.
func (Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 0, 3}
}

type Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown int32

const (
	Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown_DISABLE Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown = 0
	Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown_ENABLE  Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown.
var (
	Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown_name = map[int32]string{
		0: "TriggerIfDown_DISABLE",
		1: "TriggerIfDown_ENABLE",
	}
	Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown_value = map[string]int32{
		"TriggerIfDown_DISABLE": 0,
		"TriggerIfDown_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown) Enum() *Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown {
	p := new(Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[79].Descriptor()
}

func (Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[79]
}

func (x Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown.Descriptor instead.
func (Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 0, 4}
}

type Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification int32

const (
	Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification_DISABLE Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification = 0
	Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification_ENABLE  Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification.
var (
	Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification_name = map[int32]string{
		0: "Notification_DISABLE",
		1: "Notification_ENABLE",
	}
	Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification_value = map[string]int32{
		"Notification_DISABLE": 0,
		"Notification_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification) Enum() *Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification {
	p := new(Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[80].Descriptor()
}

func (Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[80]
}

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification.Descriptor instead.
func (Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit int32

const (
	Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit_SECOND      Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit = 0
	Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit_MILLISECOND Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit.
var (
	Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit_name = map[int32]string{
		0: "PeriodUnit_SECOND",
		1: "PeriodUnit_MILLISECOND",
	}
	Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit_value = map[string]int32{
		"PeriodUnit_SECOND":      0,
		"PeriodUnit_MILLISECOND": 1,
	}
)

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit) Enum() *Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit {
	p := new(Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[81].Descriptor()
}

func (Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[81]
}

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit.Descriptor instead.
func (Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 0, 0, 1}
}

type Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification int32

const (
	Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification_DISABLE Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification = 0
	Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification_ENABLE  Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification.
var (
	Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification_name = map[int32]string{
		0: "Notification_DISABLE",
		1: "Notification_ENABLE",
	}
	Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification_value = map[string]int32{
		"Notification_DISABLE": 0,
		"Notification_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification) Enum() *Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification {
	p := new(Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[82].Descriptor()
}

func (Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[82]
}

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification.Descriptor instead.
func (Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 0, 1, 0}
}

type Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification int32

const (
	Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification_DISABLE Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification = 0
	Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification_ENABLE  Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification.
var (
	Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification_name = map[int32]string{
		0: "Notification_DISABLE",
		1: "Notification_ENABLE",
	}
	Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification_value = map[string]int32{
		"Notification_DISABLE": 0,
		"Notification_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification) Enum() *Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification {
	p := new(Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[83].Descriptor()
}

func (Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[83]
}

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification.Descriptor instead.
func (Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 0, 2, 0}
}

type Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification int32

const (
	Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification_DISABLE Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification = 0
	Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification_ENABLE  Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification.
var (
	Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification_name = map[int32]string{
		0: "Notification_DISABLE",
		1: "Notification_ENABLE",
	}
	Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification_value = map[string]int32{
		"Notification_DISABLE": 0,
		"Notification_ENABLE":  1,
	}
)

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification) Enum() *Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification {
	p := new(Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[84].Descriptor()
}

func (Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[84]
}

func (x Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification.Descriptor instead.
func (Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 0, 3, 0}
}

type Ifm_Interfaces_Interface_Lldp_Session_AdminStatus int32

const (
	Ifm_Interfaces_Interface_Lldp_Session_INVALID_ENUM_VALUE_AdminStatus Ifm_Interfaces_Interface_Lldp_Session_AdminStatus = 0
	Ifm_Interfaces_Interface_Lldp_Session_AdminStatus_TXX_ONLY           Ifm_Interfaces_Interface_Lldp_Session_AdminStatus = 1
	Ifm_Interfaces_Interface_Lldp_Session_AdminStatus_RXX_ONLY           Ifm_Interfaces_Interface_Lldp_Session_AdminStatus = 2
	Ifm_Interfaces_Interface_Lldp_Session_AdminStatus_TXX_RX             Ifm_Interfaces_Interface_Lldp_Session_AdminStatus = 3
	Ifm_Interfaces_Interface_Lldp_Session_AdminStatus_DISABLED           Ifm_Interfaces_Interface_Lldp_Session_AdminStatus = 4
)

// Enum value maps for Ifm_Interfaces_Interface_Lldp_Session_AdminStatus.
var (
	Ifm_Interfaces_Interface_Lldp_Session_AdminStatus_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_AdminStatus",
		1: "AdminStatus_TXX_ONLY",
		2: "AdminStatus_RXX_ONLY",
		3: "AdminStatus_TXX_RX",
		4: "AdminStatus_DISABLED",
	}
	Ifm_Interfaces_Interface_Lldp_Session_AdminStatus_value = map[string]int32{
		"INVALID_ENUM_VALUE_AdminStatus": 0,
		"AdminStatus_TXX_ONLY":           1,
		"AdminStatus_RXX_ONLY":           2,
		"AdminStatus_TXX_RX":             3,
		"AdminStatus_DISABLED":           4,
	}
)

func (x Ifm_Interfaces_Interface_Lldp_Session_AdminStatus) Enum() *Ifm_Interfaces_Interface_Lldp_Session_AdminStatus {
	p := new(Ifm_Interfaces_Interface_Lldp_Session_AdminStatus)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Lldp_Session_AdminStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Lldp_Session_AdminStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[85].Descriptor()
}

func (Ifm_Interfaces_Interface_Lldp_Session_AdminStatus) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[85]
}

func (x Ifm_Interfaces_Interface_Lldp_Session_AdminStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Lldp_Session_AdminStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Lldp_Session_AdminStatus(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_AdminStatus.Descriptor instead.
func (Ifm_Interfaces_Interface_Lldp_Session_AdminStatus) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 0}
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType int32

const (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType_OTHER              Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType = 0
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType_CHASSISX_COMPONENT Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType = 1
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType_INTERFACEX_ALIAS   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType = 2
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType_PORTX_COMPONENT    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType = 3
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType_MACX_ADDRESS       Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType = 4
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType_NETWORKX_ADDRESS   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType = 5
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType_INTERFACEX_NAME    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType = 6
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType_LOCAL              Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType = 7
)

// Enum value maps for Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType.
var (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType_name = map[int32]string{
		0: "ChassisIdSubType_OTHER",
		1: "ChassisIdSubType_CHASSISX_COMPONENT",
		2: "ChassisIdSubType_INTERFACEX_ALIAS",
		3: "ChassisIdSubType_PORTX_COMPONENT",
		4: "ChassisIdSubType_MACX_ADDRESS",
		5: "ChassisIdSubType_NETWORKX_ADDRESS",
		6: "ChassisIdSubType_INTERFACEX_NAME",
		7: "ChassisIdSubType_LOCAL",
	}
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType_value = map[string]int32{
		"ChassisIdSubType_OTHER":              0,
		"ChassisIdSubType_CHASSISX_COMPONENT": 1,
		"ChassisIdSubType_INTERFACEX_ALIAS":   2,
		"ChassisIdSubType_PORTX_COMPONENT":    3,
		"ChassisIdSubType_MACX_ADDRESS":       4,
		"ChassisIdSubType_NETWORKX_ADDRESS":   5,
		"ChassisIdSubType_INTERFACEX_NAME":    6,
		"ChassisIdSubType_LOCAL":              7,
	}
)

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType) Enum() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType {
	p := new(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[86].Descriptor()
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[86]
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType.Descriptor instead.
func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 1, 0, 0}
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType int32

const (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType_OTHER              Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType = 0
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType_INTERFACEX_ALIAS   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType = 1
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType_PORTX_COMPONENT    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType = 2
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType_MACX_ADDRESS       Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType = 3
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType_NETWORKX_ADDRESS   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType = 4
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType_INTERFACEX_NAME    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType = 5
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType_AGENTX_CIRCUITX_ID Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType = 6
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType_LOCAL              Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType = 7
)

// Enum value maps for Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType.
var (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType_name = map[int32]string{
		0: "PortIdSubType_OTHER",
		1: "PortIdSubType_INTERFACEX_ALIAS",
		2: "PortIdSubType_PORTX_COMPONENT",
		3: "PortIdSubType_MACX_ADDRESS",
		4: "PortIdSubType_NETWORKX_ADDRESS",
		5: "PortIdSubType_INTERFACEX_NAME",
		6: "PortIdSubType_AGENTX_CIRCUITX_ID",
		7: "PortIdSubType_LOCAL",
	}
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType_value = map[string]int32{
		"PortIdSubType_OTHER":              0,
		"PortIdSubType_INTERFACEX_ALIAS":   1,
		"PortIdSubType_PORTX_COMPONENT":    2,
		"PortIdSubType_MACX_ADDRESS":       3,
		"PortIdSubType_NETWORKX_ADDRESS":   4,
		"PortIdSubType_INTERFACEX_NAME":    5,
		"PortIdSubType_AGENTX_CIRCUITX_ID": 6,
		"PortIdSubType_LOCAL":              7,
	}
)

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType) Enum() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType {
	p := new(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[87].Descriptor()
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[87]
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType.Descriptor instead.
func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 1, 0, 1}
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported int32

const (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported_NO  Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported = 0
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported_YES Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported.
var (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported_name = map[int32]string{
		0: "AutoNegotiationSupported_NO",
		1: "AutoNegotiationSupported_YES",
	}
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported_value = map[string]int32{
		"AutoNegotiationSupported_NO":  0,
		"AutoNegotiationSupported_YES": 1,
	}
)

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported) Enum() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported {
	p := new(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[88].Descriptor()
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[88]
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported.Descriptor instead.
func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 1, 0, 2}
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled int32

const (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled_NO  Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled = 0
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled_YES Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled.
var (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled_name = map[int32]string{
		0: "AutoNegotiationEnabled_NO",
		1: "AutoNegotiationEnabled_YES",
	}
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled_value = map[string]int32{
		"AutoNegotiationEnabled_NO":  0,
		"AutoNegotiationEnabled_YES": 1,
	}
)

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled) Enum() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled {
	p := new(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[89].Descriptor()
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[89]
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled.Descriptor instead.
func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 1, 0, 3}
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType int32

const (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_UNKNOWN                             Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 0
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_AUI                Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 1
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_5        Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 2
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_FOIRL              Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 3
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_2        Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 4
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_T        Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 5
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FP       Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 6
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FB       Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 7
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FL       Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 8
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_36       Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 9
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_THD      Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 10
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_TFD      Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 11
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FLHD     Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 12
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FLFD     Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 13
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T4      Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 14
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_TXHD    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 15
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_TXFD    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 16
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_FXHD    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 17
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_FXFD    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 18
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T2HD    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 19
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T2FD    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 20
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_XHD    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 21
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_XFD    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 22
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_LXHD   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 23
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_LXFD   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 24
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_SXHD   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 25
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_SXFD   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 26
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_CXHD   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 27
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_CXFD   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 28
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_THD    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 29
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_TFD    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 30
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_X     Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 31
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LX4   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 32
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_R     Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 33
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_ER    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 34
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LR    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 35
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_SR    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 36
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_W     Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 37
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_EW    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 38
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LW    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 39
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_SW    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 40
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_KR4   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 70
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_CR4   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 71
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_SR4   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 72
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_FR    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 73
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_LR4   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 74
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_CR10 Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 75
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_SR10 Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 76
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_LR4  Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 77
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_ER4  Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType = 78
)

// Enum value maps for Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType.
var (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_name = map[int32]string{
		0:  "OperMauType_UNKNOWN",
		1:  "OperMauType_DOT3X_MAUX_TYPEX_AUI",
		2:  "OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_5",
		3:  "OperMauType_DOT3X_MAUX_TYPEX_FOIRL",
		4:  "OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_2",
		5:  "OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_T",
		6:  "OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FP",
		7:  "OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FB",
		8:  "OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FL",
		9:  "OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_36",
		10: "OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_THD",
		11: "OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_TFD",
		12: "OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FLHD",
		13: "OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FLFD",
		14: "OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T4",
		15: "OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_TXHD",
		16: "OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_TXFD",
		17: "OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_FXHD",
		18: "OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_FXFD",
		19: "OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T2HD",
		20: "OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T2FD",
		21: "OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_XHD",
		22: "OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_XFD",
		23: "OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_LXHD",
		24: "OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_LXFD",
		25: "OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_SXHD",
		26: "OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_SXFD",
		27: "OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_CXHD",
		28: "OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_CXFD",
		29: "OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_THD",
		30: "OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_TFD",
		31: "OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_X",
		32: "OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LX4",
		33: "OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_R",
		34: "OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_ER",
		35: "OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LR",
		36: "OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_SR",
		37: "OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_W",
		38: "OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_EW",
		39: "OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LW",
		40: "OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_SW",
		70: "OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_KR4",
		71: "OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_CR4",
		72: "OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_SR4",
		73: "OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_FR",
		74: "OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_LR4",
		75: "OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_CR10",
		76: "OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_SR10",
		77: "OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_LR4",
		78: "OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_ER4",
	}
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_value = map[string]int32{
		"OperMauType_UNKNOWN":                             0,
		"OperMauType_DOT3X_MAUX_TYPEX_AUI":                1,
		"OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_5":        2,
		"OperMauType_DOT3X_MAUX_TYPEX_FOIRL":              3,
		"OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_2":        4,
		"OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_T":        5,
		"OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FP":       6,
		"OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FB":       7,
		"OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FL":       8,
		"OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_36":       9,
		"OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_THD":      10,
		"OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_TFD":      11,
		"OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FLHD":     12,
		"OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FLFD":     13,
		"OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T4":      14,
		"OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_TXHD":    15,
		"OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_TXFD":    16,
		"OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_FXHD":    17,
		"OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_FXFD":    18,
		"OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T2HD":    19,
		"OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T2FD":    20,
		"OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_XHD":    21,
		"OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_XFD":    22,
		"OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_LXHD":   23,
		"OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_LXFD":   24,
		"OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_SXHD":   25,
		"OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_SXFD":   26,
		"OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_CXHD":   27,
		"OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_CXFD":   28,
		"OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_THD":    29,
		"OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_TFD":    30,
		"OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_X":     31,
		"OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LX4":   32,
		"OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_R":     33,
		"OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_ER":    34,
		"OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LR":    35,
		"OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_SR":    36,
		"OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_W":     37,
		"OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_EW":    38,
		"OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LW":    39,
		"OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_SW":    40,
		"OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_KR4":   70,
		"OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_CR4":   71,
		"OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_SR4":   72,
		"OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_FR":    73,
		"OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_LR4":   74,
		"OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_CR10": 75,
		"OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_SR10": 76,
		"OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_LR4":  77,
		"OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_ER4":  78,
	}
)

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType) Enum() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType {
	p := new(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[90].Descriptor()
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[90]
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType.Descriptor instead.
func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 1, 0, 4}
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported int32

const (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported_NO  Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported = 0
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported_YES Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported.
var (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported_name = map[int32]string{
		0: "LinkAggregationSupported_NO",
		1: "LinkAggregationSupported_YES",
	}
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported_value = map[string]int32{
		"LinkAggregationSupported_NO":  0,
		"LinkAggregationSupported_YES": 1,
	}
)

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported) Enum() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported {
	p := new(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[91].Descriptor()
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[91]
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported.Descriptor instead.
func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 1, 0, 5}
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled int32

const (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled_NO  Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled = 0
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled_YES Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled.
var (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled_name = map[int32]string{
		0: "LinkAggregationEnabled_NO",
		1: "LinkAggregationEnabled_YES",
	}
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled_value = map[string]int32{
		"LinkAggregationEnabled_NO":  0,
		"LinkAggregationEnabled_YES": 1,
	}
)

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled) Enum() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled {
	p := new(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[92].Descriptor()
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[92]
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled.Descriptor instead.
func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 1, 0, 6}
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_Status int32

const (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_Status_ONLINE  Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_Status = 0
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_Status_OFFLINE Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_Status = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_Status.
var (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_Status_name = map[int32]string{
		0: "Status_ONLINE",
		1: "Status_OFFLINE",
	}
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_Status_value = map[string]int32{
		"Status_ONLINE":  0,
		"Status_OFFLINE": 1,
	}
)

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_Status) Enum() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_Status {
	p := new(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_Status)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[93].Descriptor()
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_Status) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[93]
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_Status(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_Status.Descriptor instead.
func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_Status) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 1, 0, 7}
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type int32

const (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_OTHER                  Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 0
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_IPV4                   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 1
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_IPV6                   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 2
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_NSAP                   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 3
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_HDLC                   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 4
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_BBN1822                Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 5
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_MAC                    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 6
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_E163                   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 7
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_E164                   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 8
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_F69                    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 9
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_X121                   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 10
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_IPX                    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 11
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_APPLEX_TALK            Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 12
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_DECNETX_IV             Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 13
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_BANYANX_VINES          Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 14
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_E164X_WITHX_NSAP       Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 15
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_DNS                    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 16
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_DISTINGUISHEDX_NAME    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 17
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_ASX_NUMBER             Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 18
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_XTPX_OVERX_IPV4        Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 19
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_XTPX_OVERX_IPV6        Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 20
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_XTPX_NATIVEX_MODEX_XTP Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 21
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_FIBREX_CHANNELX_WWPN   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 22
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_FIBREX_CHANNELX_WWN    Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 23
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_GWID                   Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type = 24
)

// Enum value maps for Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type.
var (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_name = map[int32]string{
		0:  "Type_OTHER",
		1:  "Type_IPV4",
		2:  "Type_IPV6",
		3:  "Type_NSAP",
		4:  "Type_HDLC",
		5:  "Type_BBN1822",
		6:  "Type_MAC",
		7:  "Type_E163",
		8:  "Type_E164",
		9:  "Type_F69",
		10: "Type_X121",
		11: "Type_IPX",
		12: "Type_APPLEX_TALK",
		13: "Type_DECNETX_IV",
		14: "Type_BANYANX_VINES",
		15: "Type_E164X_WITHX_NSAP",
		16: "Type_DNS",
		17: "Type_DISTINGUISHEDX_NAME",
		18: "Type_ASX_NUMBER",
		19: "Type_XTPX_OVERX_IPV4",
		20: "Type_XTPX_OVERX_IPV6",
		21: "Type_XTPX_NATIVEX_MODEX_XTP",
		22: "Type_FIBREX_CHANNELX_WWPN",
		23: "Type_FIBREX_CHANNELX_WWN",
		24: "Type_GWID",
	}
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_value = map[string]int32{
		"Type_OTHER":                  0,
		"Type_IPV4":                   1,
		"Type_IPV6":                   2,
		"Type_NSAP":                   3,
		"Type_HDLC":                   4,
		"Type_BBN1822":                5,
		"Type_MAC":                    6,
		"Type_E163":                   7,
		"Type_E164":                   8,
		"Type_F69":                    9,
		"Type_X121":                   10,
		"Type_IPX":                    11,
		"Type_APPLEX_TALK":            12,
		"Type_DECNETX_IV":             13,
		"Type_BANYANX_VINES":          14,
		"Type_E164X_WITHX_NSAP":       15,
		"Type_DNS":                    16,
		"Type_DISTINGUISHEDX_NAME":    17,
		"Type_ASX_NUMBER":             18,
		"Type_XTPX_OVERX_IPV4":        19,
		"Type_XTPX_OVERX_IPV6":        20,
		"Type_XTPX_NATIVEX_MODEX_XTP": 21,
		"Type_FIBREX_CHANNELX_WWPN":   22,
		"Type_FIBREX_CHANNELX_WWN":    23,
		"Type_GWID":                   24,
	}
)

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type) Enum() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type {
	p := new(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[94].Descriptor()
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[94]
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type.Descriptor instead.
func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 1, 0, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType int32

const (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType_OTHER                Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType = 0
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType_UNKNOWN              Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType = 1
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType_IFX_INDEX            Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType = 2
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType_SYSTEMX_PORTX_NUMBER Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType.
var (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType_name = map[int32]string{
		0: "IfSubType_OTHER",
		1: "IfSubType_UNKNOWN",
		2: "IfSubType_IFX_INDEX",
		3: "IfSubType_SYSTEMX_PORTX_NUMBER",
	}
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType_value = map[string]int32{
		"IfSubType_OTHER":                0,
		"IfSubType_UNKNOWN":              1,
		"IfSubType_IFX_INDEX":            2,
		"IfSubType_SYSTEMX_PORTX_NUMBER": 3,
	}
)

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType) Enum() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType {
	p := new(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[95].Descriptor()
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[95]
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType.Descriptor instead.
func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 1, 0, 0, 0, 1}
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported int32

const (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported_NO  Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported = 0
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported_YES Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported.
var (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported_name = map[int32]string{
		0: "Supported_NO",
		1: "Supported_YES",
	}
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported_value = map[string]int32{
		"Supported_NO":  0,
		"Supported_YES": 1,
	}
)

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported) Enum() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported {
	p := new(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[96].Descriptor()
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[96]
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported.Descriptor instead.
func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 1, 0, 1, 0, 0}
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled int32

const (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled_NO  Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled = 0
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled_YES Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled.
var (
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled_name = map[int32]string{
		0: "Enabled_NO",
		1: "Enabled_YES",
	}
	Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled_value = map[string]int32{
		"Enabled_NO":  0,
		"Enabled_YES": 1,
	}
)

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled) Enum() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled {
	p := new(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[97].Descriptor()
}

func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[97]
}

func (x Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled.Descriptor instead.
func (Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 1, 0, 1, 0, 1}
}

type Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress_NegotiationType int32

const (
	Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress_NegotiationType_PPPX_NEGOTIATE Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress_NegotiationType = 0
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress_NegotiationType.
var (
	Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress_NegotiationType_name = map[int32]string{
		0: "NegotiationType_PPPX_NEGOTIATE",
	}
	Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress_NegotiationType_value = map[string]int32{
		"NegotiationType_PPPX_NEGOTIATE": 0,
	}
)

func (x Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress_NegotiationType) Enum() *Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress_NegotiationType {
	p := new(Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress_NegotiationType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress_NegotiationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress_NegotiationType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[98].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress_NegotiationType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[98]
}

func (x Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress_NegotiationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress_NegotiationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress_NegotiationType(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress_NegotiationType.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress_NegotiationType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 0, 2, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type int32

const (
	Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_INVALID_ENUM_VALUE_Type Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type = 0
	Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type_MAIN               Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type = 1
	Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type_UNNUMBER           Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type = 2
	Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type_NEG                Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type = 4
	Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type_SUB                Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type = 32
	Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type_DHCP               Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type = 256
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type.
var (
	Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type_name = map[int32]string{
		0:   "INVALID_ENUM_VALUE_Type",
		1:   "Type_MAIN",
		2:   "Type_UNNUMBER",
		4:   "Type_NEG",
		32:  "Type_SUB",
		256: "Type_DHCP",
	}
	Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_MAIN":               1,
		"Type_UNNUMBER":           2,
		"Type_NEG":                4,
		"Type_SUB":                32,
		"Type_DHCP":               256,
	}
)

func (x Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type) Enum() *Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type {
	p := new(Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[99].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[99]
}

func (x Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 1, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode int32

const (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode_NONE         Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode = 0
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode_SIMPLE       Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode = 1
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode_MD5          Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode = 2
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode_HMACX_SHA256 Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode.
var (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode_name = map[int32]string{
		0: "AuthenticationMode_NONE",
		1: "AuthenticationMode_SIMPLE",
		2: "AuthenticationMode_MD5",
		3: "AuthenticationMode_HMACX_SHA256",
	}
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode_value = map[string]int32{
		"AuthenticationMode_NONE":         0,
		"AuthenticationMode_SIMPLE":       1,
		"AuthenticationMode_MD5":          2,
		"AuthenticationMode_HMACX_SHA256": 3,
	}
)

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode) Enum() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode {
	p := new(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[100].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[100]
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 3, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode int32

const (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode_V3X_ONLY   Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode = 0
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode_V2V3X_BOTH Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode = 1
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode_V2X_ONLY   Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode.
var (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode_name = map[int32]string{
		0: "V3Sendmode_V3X_ONLY",
		1: "V3Sendmode_V2V3X_BOTH",
		2: "V3Sendmode_V2X_ONLY",
	}
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode_value = map[string]int32{
		"V3Sendmode_V3X_ONLY":   0,
		"V3Sendmode_V2V3X_BOTH": 1,
		"V3Sendmode_V2X_ONLY":   2,
	}
)

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode) Enum() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode {
	p := new(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[101].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[101]
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 3, 0, 0, 1}
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type int32

const (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type_NORMAL         Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type = 0
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type_ADMIN          Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type = 1
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type_MEMBER         Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type = 2
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type_LBRG           Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type = 3
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type_LBRGX_MEM      Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type = 4
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type_MEMX_LBRG      Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type = 5
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type_MEMX_LBRGX_MEM Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type = 6
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type_UNICAST        Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type = 7
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type.
var (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type_name = map[int32]string{
		0: "Type_NORMAL",
		1: "Type_ADMIN",
		2: "Type_MEMBER",
		3: "Type_LBRG",
		4: "Type_LBRGX_MEM",
		5: "Type_MEMX_LBRG",
		6: "Type_MEMX_LBRGX_MEM",
		7: "Type_UNICAST",
	}
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type_value = map[string]int32{
		"Type_NORMAL":         0,
		"Type_ADMIN":          1,
		"Type_MEMBER":         2,
		"Type_LBRG":           3,
		"Type_LBRGX_MEM":      4,
		"Type_MEMX_LBRG":      5,
		"Type_MEMX_LBRGX_MEM": 6,
		"Type_UNICAST":        7,
	}
)

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type) Enum() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type {
	p := new(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[102].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[102]
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 3, 0, 0, 2}
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State int32

const (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State_INITIALIZE Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State = 0
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State_BACKUP     Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State = 1
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State_MASTER     Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State.
var (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State_name = map[int32]string{
		0: "State_INITIALIZE",
		1: "State_BACKUP",
		2: "State_MASTER",
	}
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State_value = map[string]int32{
		"State_INITIALIZE": 0,
		"State_BACKUP":     1,
		"State_MASTER":     2,
	}
)

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State) Enum() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State {
	p := new(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[103].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[103]
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 3, 0, 0, 3}
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode int32

const (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode_INCREASE Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode = 0
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode_REDUCE   Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode.
var (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode_name = map[int32]string{
		0: "TrackMode_INCREASE",
		1: "TrackMode_REDUCE",
	}
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode_value = map[string]int32{
		"TrackMode_INCREASE": 0,
		"TrackMode_REDUCE":   1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode) Enum() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode {
	p := new(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[104].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[104]
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 3, 0, 0, 2, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType int32

const (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType_NORMAL Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType = 0
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType_LINK   Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType = 1
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType_PEER   Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType.
var (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType_name = map[int32]string{
		0: "SessionType_NORMAL",
		1: "SessionType_LINK",
		2: "SessionType_PEER",
	}
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType_value = map[string]int32{
		"SessionType_NORMAL": 0,
		"SessionType_LINK":   1,
		"SessionType_PEER":   2,
	}
)

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType) Enum() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType {
	p := new(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[105].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[105]
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 3, 0, 0, 3, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode int32

const (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode_INCREASE Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode = 0
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode_REDUCE   Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode.
var (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode_name = map[int32]string{
		0: "TrackMode_INCREASE",
		1: "TrackMode_REDUCE",
	}
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode_value = map[string]int32{
		"TrackMode_INCREASE": 0,
		"TrackMode_REDUCE":   1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode) Enum() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode {
	p := new(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[106].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[106]
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 3, 0, 0, 3, 0, 1}
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState int32

const (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState_DOWN        Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState = 0
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState_UP          Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState = 1
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState_ADMINX_DOWN Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState = 2
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState_UNKNOW      Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState.
var (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState_name = map[int32]string{
		0: "SessionState_DOWN",
		1: "SessionState_UP",
		2: "SessionState_ADMINX_DOWN",
		3: "SessionState_UNKNOW",
	}
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState_value = map[string]int32{
		"SessionState_DOWN":        0,
		"SessionState_UP":          1,
		"SessionState_ADMINX_DOWN": 2,
		"SessionState_UNKNOW":      3,
	}
)

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState) Enum() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState {
	p := new(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[107].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[107]
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 3, 0, 0, 3, 0, 2}
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode int32

const (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode_LINK   Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode = 0
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode_REDUCE Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode.
var (
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode_name = map[int32]string{
		0: "TrackMode_LINK",
		1: "TrackMode_REDUCE",
	}
	Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode_value = map[string]int32{
		"TrackMode_LINK":   0,
		"TrackMode_REDUCE": 1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode) Enum() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode {
	p := new(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[108].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[108]
}

func (x Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 3, 0, 0, 4, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type int32

const (
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_INVALID_ENUM_VALUE_Type Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type = 0
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type_GLOBAL             Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type = 1
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type_LINKX_LOCAL        Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type = 2
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type_AUTOX_LINKX_LOCAL  Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type = 3
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type_ANYCAST            Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type = 6
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type.
var (
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Type",
		1: "Type_GLOBAL",
		2: "Type_LINKX_LOCAL",
		3: "Type_AUTOX_LINKX_LOCAL",
		6: "Type_ANYCAST",
	}
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type_value = map[string]int32{
		"INVALID_ENUM_VALUE_Type": 0,
		"Type_GLOBAL":             1,
		"Type_LINKX_LOCAL":        2,
		"Type_AUTOX_LINKX_LOCAL":  3,
		"Type_ANYCAST":            6,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type) Enum() *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type {
	p := new(Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[109].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[109]
}

func (x Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 2, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType int32

const (
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType_NONE  Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType = 0
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType_CGA   Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType = 1
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType_EUI64 Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType.
var (
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType_name = map[int32]string{
		0: "AlgorithmType_NONE",
		1: "AlgorithmType_CGA",
		2: "AlgorithmType_EUI64",
	}
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType_value = map[string]int32{
		"AlgorithmType_NONE":  0,
		"AlgorithmType_CGA":   1,
		"AlgorithmType_EUI64": 2,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType) Enum() *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType {
	p := new(Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[110].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[110]
}

func (x Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 2, 0, 0, 1}
}

type Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status int32

const (
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_INVALID_ENUM_VALUE_Status Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status = 0
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status_PREFERRED          Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status = 1
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status_INACCESSIBLE       Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status = 4
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status_UNKNOWN            Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status = 5
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status_TENTATIVE          Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status = 6
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status_DUPLICATE          Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status = 7
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status.
var (
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_Status",
		1: "Status_PREFERRED",
		4: "Status_INACCESSIBLE",
		5: "Status_UNKNOWN",
		6: "Status_TENTATIVE",
		7: "Status_DUPLICATE",
	}
	Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status_value = map[string]int32{
		"INVALID_ENUM_VALUE_Status": 0,
		"Status_PREFERRED":          1,
		"Status_INACCESSIBLE":       4,
		"Status_UNKNOWN":            5,
		"Status_TENTATIVE":          6,
		"Status_DUPLICATE":          7,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status) Enum() *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status {
	p := new(Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[111].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[111]
}

func (x Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 2, 0, 0, 2}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag_OFF Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag_ON  Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag_name = map[int32]string{
		0: "NsMcastFlag_OFF",
		1: "NsMcastFlag_ON",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag_value = map[string]int32{
		"NsMcastFlag_OFF": 0,
		"NsMcastFlag_ON":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[112].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[112]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 3, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean_OFF Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean_ON  Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean_name = map[int32]string{
		0: "NaGlean_OFF",
		1: "NaGlean_ON",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean_value = map[string]int32{
		"NaGlean_OFF": 0,
		"NaGlean_ON":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[113].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[113]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 3, 0, 1}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag_OFF Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag_ON  Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag_name = map[int32]string{
		0: "MaFlag_OFF",
		1: "MaFlag_ON",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag_value = map[string]int32{
		"MaFlag_OFF": 0,
		"MaFlag_ON":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[114].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[114]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 3, 0, 2}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag_OFF Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag_ON  Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag_name = map[int32]string{
		0: "OFlag_OFF",
		1: "OFlag_ON",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag_value = map[string]int32{
		"OFlag_OFF": 0,
		"OFlag_ON":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[115].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[115]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 3, 0, 3}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag_OFF Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag_ON  Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag_name = map[int32]string{
		0: "RaHaltFlag_OFF",
		1: "RaHaltFlag_ON",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag_value = map[string]int32{
		"RaHaltFlag_OFF": 0,
		"RaHaltFlag_ON":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[116].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[116]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 3, 0, 4}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference_MEDIUM Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference_HIGH   Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference = 1
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference_LOW    Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference_name = map[int32]string{
		0: "RaPreference_MEDIUM",
		1: "RaPreference_HIGH",
		3: "RaPreference_LOW",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference_value = map[string]int32{
		"RaPreference_MEDIUM": 0,
		"RaPreference_HIGH":   1,
		"RaPreference_LOW":    3,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[117].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[117]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 3, 0, 5}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag_OFF Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag_ON  Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag_name = map[int32]string{
		0: "RaPrefixFlag_OFF",
		1: "RaPrefixFlag_ON",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag_value = map[string]int32{
		"RaPrefixFlag_OFF": 0,
		"RaPrefixFlag_ON":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[118].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[118]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 3, 0, 6}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag_OFF Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag_ON  Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag_name = map[int32]string{
		0: "RaMtuFlag_OFF",
		1: "RaMtuFlag_ON",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag_value = map[string]int32{
		"RaMtuFlag_OFF": 0,
		"RaMtuFlag_ON":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[119].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[119]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 3, 0, 7}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag_OFF Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag_ON  Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag_name = map[int32]string{
		0: "CollectHostFlag_OFF",
		1: "CollectHostFlag_ON",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag_value = map[string]int32{
		"CollectHostFlag_OFF": 0,
		"CollectHostFlag_ON":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[120].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[120]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 3, 0, 8}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable_OFF Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable_ON  Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable_name = map[int32]string{
		0: "GenerateRdEnable_OFF",
		1: "GenerateRdEnable_ON",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable_value = map[string]int32{
		"GenerateRdEnable_OFF": 0,
		"GenerateRdEnable_ON":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[121].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[121]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 3, 0, 9}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy_OFF Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy_ON  Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy_name = map[int32]string{
		0: "RouteProxy_OFF",
		1: "RouteProxy_ON",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy_value = map[string]int32{
		"RouteProxy_OFF": 0,
		"RouteProxy_ON":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[122].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[122]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 3, 1, 0}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy_OFF Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy_ON  Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy_name = map[int32]string{
		0: "InnerVlanProxy_OFF",
		1: "InnerVlanProxy_ON",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy_value = map[string]int32{
		"InnerVlanProxy_OFF": 0,
		"InnerVlanProxy_ON":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[123].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[123]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 3, 1, 1}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy_OFF Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy_ON  Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy_name = map[int32]string{
		0: "InterVlanProxy_OFF",
		1: "InterVlanProxy_ON",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy_value = map[string]int32{
		"InterVlanProxy_OFF": 0,
		"InterVlanProxy_ON":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[124].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[124]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 3, 1, 2}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy_OFF Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy_ON  Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy_name = map[int32]string{
		0: "AnywayProxy_OFF",
		1: "AnywayProxy_ON",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy_value = map[string]int32{
		"AnywayProxy_OFF": 0,
		"AnywayProxy_ON":  1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[125].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[125]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 3, 1, 3}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type_RS     Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type_RA     Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type = 1
	Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type_NS     Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type = 2
	Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type_NA     Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type = 3
	Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type_NDMISS Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type = 4
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type_name = map[int32]string{
		0: "Type_RS",
		1: "Type_RA",
		2: "Type_NS",
		3: "Type_NA",
		4: "Type_NDMISS",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type_value = map[string]int32{
		"Type_RS":     0,
		"Type_RA":     1,
		"Type_NS":     2,
		"Type_NA":     3,
		"Type_NDMISS": 4,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[126].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[126]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 3, 2, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType int32

const (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType_RS Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType = 0
	Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType_RA Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType = 1
	Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType_NS Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType = 2
	Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType_NA Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType = 3
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType.
var (
	Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType_name = map[int32]string{
		0: "PacketType_RS",
		1: "PacketType_RA",
		2: "PacketType_NS",
		3: "PacketType_NA",
	}
	Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType_value = map[string]int32{
		"PacketType_RS": 0,
		"PacketType_RA": 1,
		"PacketType_NS": 2,
		"PacketType_NA": 3,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType) Enum() *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType {
	p := new(Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[127].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[127]
}

func (x Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 3, 2, 1, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions int32

const (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions_DENY   Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions = 0
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions_PERMIT Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions.
var (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions_name = map[int32]string{
		0: "AllOptions_DENY",
		1: "AllOptions_PERMIT",
	}
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions_value = map[string]int32{
		"AllOptions_DENY":   0,
		"AllOptions_PERMIT": 1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions) Enum() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions {
	p := new(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[128].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[128]
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 5, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule int32

const (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule_DENY   Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule = 0
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule_PERMIT Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule.
var (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule_name = map[int32]string{
		0: "FilterRule_DENY",
		1: "FilterRule_PERMIT",
	}
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule_value = map[string]int32{
		"FilterRule_DENY":   0,
		"FilterRule_PERMIT": 1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule) Enum() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule {
	p := new(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[129].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[129]
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 5, 0, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions int32

const (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions_DENY   Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions = 0
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions_PERMIT Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions.
var (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions_name = map[int32]string{
		0: "AllOptions_DENY",
		1: "AllOptions_PERMIT",
	}
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions_value = map[string]int32{
		"AllOptions_DENY":   0,
		"AllOptions_PERMIT": 1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions) Enum() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions {
	p := new(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[130].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[130]
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 5, 1, 0}
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule int32

const (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule_DENY   Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule = 0
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule_PERMIT Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule.
var (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule_name = map[int32]string{
		0: "FilterRule_DENY",
		1: "FilterRule_PERMIT",
	}
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule_value = map[string]int32{
		"FilterRule_DENY":   0,
		"FilterRule_PERMIT": 1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule) Enum() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule {
	p := new(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[131].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[131]
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 5, 1, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions int32

const (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions_DENY   Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions = 0
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions_PERMIT Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions.
var (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions_name = map[int32]string{
		0: "AllOptions_DENY",
		1: "AllOptions_PERMIT",
	}
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions_value = map[string]int32{
		"AllOptions_DENY":   0,
		"AllOptions_PERMIT": 1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions) Enum() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions {
	p := new(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[132].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[132]
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 5, 2, 0}
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule int32

const (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule_DENY   Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule = 0
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule_PERMIT Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule.
var (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule_name = map[int32]string{
		0: "FilterRule_DENY",
		1: "FilterRule_PERMIT",
	}
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule_value = map[string]int32{
		"FilterRule_DENY":   0,
		"FilterRule_PERMIT": 1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule) Enum() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule {
	p := new(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[133].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[133]
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 5, 2, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType int32

const (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_INVALID_ENUM_VALUE_ExhType Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType = 0
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType_FRAGMENT           Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType = 44
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType_ESP                Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType = 50
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType_AH                 Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType = 51
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType.
var (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_ExhType",
		44: "ExhType_FRAGMENT",
		50: "ExhType_ESP",
		51: "ExhType_AH",
	}
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType_value = map[string]int32{
		"INVALID_ENUM_VALUE_ExhType": 0,
		"ExhType_FRAGMENT":           44,
		"ExhType_ESP":                50,
		"ExhType_AH":                 51,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType) Enum() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType {
	p := new(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[134].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[134]
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 5, 3, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule int32

const (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule_DENY   Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule = 0
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule_PERMIT Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule.
var (
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule_name = map[int32]string{
		0: "FilterRule_DENY",
		1: "FilterRule_PERMIT",
	}
	Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule_value = map[string]int32{
		"FilterRule_DENY":   0,
		"FilterRule_PERMIT": 1,
	}
)

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule) Enum() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule {
	p := new(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[135].Descriptor()
}

func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[135]
}

func (x Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule.Descriptor instead.
func (Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 5, 3, 0, 1}
}

type Ifm_Interfaces_Interface_DampState_SuppressStatus int32

const (
	Ifm_Interfaces_Interface_DampState_SuppressStatus_SUPPRESSED   Ifm_Interfaces_Interface_DampState_SuppressStatus = 0
	Ifm_Interfaces_Interface_DampState_SuppressStatus_UNSUPPRESSED Ifm_Interfaces_Interface_DampState_SuppressStatus = 1
)

// Enum value maps for Ifm_Interfaces_Interface_DampState_SuppressStatus.
var (
	Ifm_Interfaces_Interface_DampState_SuppressStatus_name = map[int32]string{
		0: "SuppressStatus_SUPPRESSED",
		1: "SuppressStatus_UNSUPPRESSED",
	}
	Ifm_Interfaces_Interface_DampState_SuppressStatus_value = map[string]int32{
		"SuppressStatus_SUPPRESSED":   0,
		"SuppressStatus_UNSUPPRESSED": 1,
	}
)

func (x Ifm_Interfaces_Interface_DampState_SuppressStatus) Enum() *Ifm_Interfaces_Interface_DampState_SuppressStatus {
	p := new(Ifm_Interfaces_Interface_DampState_SuppressStatus)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_DampState_SuppressStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_DampState_SuppressStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[136].Descriptor()
}

func (Ifm_Interfaces_Interface_DampState_SuppressStatus) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[136]
}

func (x Ifm_Interfaces_Interface_DampState_SuppressStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_DampState_SuppressStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_DampState_SuppressStatus(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_DampState_SuppressStatus.Descriptor instead.
func (Ifm_Interfaces_Interface_DampState_SuppressStatus) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 27, 0}
}

type Ifm_Interfaces_Interface_ErrorDown_Cause int32

const (
	Ifm_Interfaces_Interface_ErrorDown_Cause_BPDUX_PROTECTION                   Ifm_Interfaces_Interface_ErrorDown_Cause = 0
	Ifm_Interfaces_Interface_ErrorDown_Cause_AUTOX_DEFEND                       Ifm_Interfaces_Interface_ErrorDown_Cause = 1
	Ifm_Interfaces_Interface_ErrorDown_Cause_MONITORX_LINK                      Ifm_Interfaces_Interface_ErrorDown_Cause = 2
	Ifm_Interfaces_Interface_ErrorDown_Cause_PORTSECX_REACHEDX_LIMIT            Ifm_Interfaces_Interface_ErrorDown_Cause = 65
	Ifm_Interfaces_Interface_ErrorDown_Cause_STORMX_CONTROL                     Ifm_Interfaces_Interface_ErrorDown_Cause = 66
	Ifm_Interfaces_Interface_ErrorDown_Cause_LOOPBACKX_DETECT                   Ifm_Interfaces_Interface_ErrorDown_Cause = 67
	Ifm_Interfaces_Interface_ErrorDown_Cause_DUALX_ACTIVE                       Ifm_Interfaces_Interface_ErrorDown_Cause = 68
	Ifm_Interfaces_Interface_ErrorDown_Cause_MACX_ADDRESSX_FLAPPING             Ifm_Interfaces_Interface_ErrorDown_Cause = 69
	Ifm_Interfaces_Interface_ErrorDown_Cause_NOX_STACKX_LINK                    Ifm_Interfaces_Interface_ErrorDown_Cause = 70
	Ifm_Interfaces_Interface_ErrorDown_Cause_CRCX_STATISTICS                    Ifm_Interfaces_Interface_ErrorDown_Cause = 71
	Ifm_Interfaces_Interface_ErrorDown_Cause_TRANSCEIVERX_POWERX_LOW            Ifm_Interfaces_Interface_ErrorDown_Cause = 72
	Ifm_Interfaces_Interface_ErrorDown_Cause_LINKX_FLAP                         Ifm_Interfaces_Interface_ErrorDown_Cause = 73
	Ifm_Interfaces_Interface_ErrorDown_Cause_L2X_LOOPX_OCCURED                  Ifm_Interfaces_Interface_ErrorDown_Cause = 74
	Ifm_Interfaces_Interface_ErrorDown_Cause_STACKX_MEMBERX_EXCEEDX_LIMIT       Ifm_Interfaces_Interface_ErrorDown_Cause = 75
	Ifm_Interfaces_Interface_ErrorDown_Cause_SPINEX_MEMBERX_EXCEEDX_LIMIT       Ifm_Interfaces_Interface_ErrorDown_Cause = 76
	Ifm_Interfaces_Interface_ErrorDown_Cause_RESOURCEX_MISMATCH                 Ifm_Interfaces_Interface_ErrorDown_Cause = 77
	Ifm_Interfaces_Interface_ErrorDown_Cause_LEAFX_MSTP                         Ifm_Interfaces_Interface_ErrorDown_Cause = 78
	Ifm_Interfaces_Interface_ErrorDown_Cause_MX_LAG                             Ifm_Interfaces_Interface_ErrorDown_Cause = 79
	Ifm_Interfaces_Interface_ErrorDown_Cause_FABRICX_UPLINKX_THRESHOLD          Ifm_Interfaces_Interface_ErrorDown_Cause = 80
	Ifm_Interfaces_Interface_ErrorDown_Cause_STACKX_CONFIGX_CONFLICT            Ifm_Interfaces_Interface_ErrorDown_Cause = 81
	Ifm_Interfaces_Interface_ErrorDown_Cause_SPINEX_TYPEX_UNSUPPORTED           Ifm_Interfaces_Interface_ErrorDown_Cause = 82
	Ifm_Interfaces_Interface_ErrorDown_Cause_STACKX_PACKETX_DEFENSIVE           Ifm_Interfaces_Interface_ErrorDown_Cause = 83
	Ifm_Interfaces_Interface_ErrorDown_Cause_FORWARDX_ENGINEX_BUFFERX_FAILED    Ifm_Interfaces_Interface_ErrorDown_Cause = 85
	Ifm_Interfaces_Interface_ErrorDown_Cause_FORWARDX_ENGINEX_INTERFACEX_FAILED Ifm_Interfaces_Interface_ErrorDown_Cause = 86
	Ifm_Interfaces_Interface_ErrorDown_Cause_FABRICX_LINKX_FAILURE              Ifm_Interfaces_Interface_ErrorDown_Cause = 87
	Ifm_Interfaces_Interface_ErrorDown_Cause_MX_LAGX_CONSISTENCYX_CHECK         Ifm_Interfaces_Interface_ErrorDown_Cause = 88
)

// Enum value maps for Ifm_Interfaces_Interface_ErrorDown_Cause.
var (
	Ifm_Interfaces_Interface_ErrorDown_Cause_name = map[int32]string{
		0:  "Cause_BPDUX_PROTECTION",
		1:  "Cause_AUTOX_DEFEND",
		2:  "Cause_MONITORX_LINK",
		65: "Cause_PORTSECX_REACHEDX_LIMIT",
		66: "Cause_STORMX_CONTROL",
		67: "Cause_LOOPBACKX_DETECT",
		68: "Cause_DUALX_ACTIVE",
		69: "Cause_MACX_ADDRESSX_FLAPPING",
		70: "Cause_NOX_STACKX_LINK",
		71: "Cause_CRCX_STATISTICS",
		72: "Cause_TRANSCEIVERX_POWERX_LOW",
		73: "Cause_LINKX_FLAP",
		74: "Cause_L2X_LOOPX_OCCURED",
		75: "Cause_STACKX_MEMBERX_EXCEEDX_LIMIT",
		76: "Cause_SPINEX_MEMBERX_EXCEEDX_LIMIT",
		77: "Cause_RESOURCEX_MISMATCH",
		78: "Cause_LEAFX_MSTP",
		79: "Cause_MX_LAG",
		80: "Cause_FABRICX_UPLINKX_THRESHOLD",
		81: "Cause_STACKX_CONFIGX_CONFLICT",
		82: "Cause_SPINEX_TYPEX_UNSUPPORTED",
		83: "Cause_STACKX_PACKETX_DEFENSIVE",
		85: "Cause_FORWARDX_ENGINEX_BUFFERX_FAILED",
		86: "Cause_FORWARDX_ENGINEX_INTERFACEX_FAILED",
		87: "Cause_FABRICX_LINKX_FAILURE",
		88: "Cause_MX_LAGX_CONSISTENCYX_CHECK",
	}
	Ifm_Interfaces_Interface_ErrorDown_Cause_value = map[string]int32{
		"Cause_BPDUX_PROTECTION":                   0,
		"Cause_AUTOX_DEFEND":                       1,
		"Cause_MONITORX_LINK":                      2,
		"Cause_PORTSECX_REACHEDX_LIMIT":            65,
		"Cause_STORMX_CONTROL":                     66,
		"Cause_LOOPBACKX_DETECT":                   67,
		"Cause_DUALX_ACTIVE":                       68,
		"Cause_MACX_ADDRESSX_FLAPPING":             69,
		"Cause_NOX_STACKX_LINK":                    70,
		"Cause_CRCX_STATISTICS":                    71,
		"Cause_TRANSCEIVERX_POWERX_LOW":            72,
		"Cause_LINKX_FLAP":                         73,
		"Cause_L2X_LOOPX_OCCURED":                  74,
		"Cause_STACKX_MEMBERX_EXCEEDX_LIMIT":       75,
		"Cause_SPINEX_MEMBERX_EXCEEDX_LIMIT":       76,
		"Cause_RESOURCEX_MISMATCH":                 77,
		"Cause_LEAFX_MSTP":                         78,
		"Cause_MX_LAG":                             79,
		"Cause_FABRICX_UPLINKX_THRESHOLD":          80,
		"Cause_STACKX_CONFIGX_CONFLICT":            81,
		"Cause_SPINEX_TYPEX_UNSUPPORTED":           82,
		"Cause_STACKX_PACKETX_DEFENSIVE":           83,
		"Cause_FORWARDX_ENGINEX_BUFFERX_FAILED":    85,
		"Cause_FORWARDX_ENGINEX_INTERFACEX_FAILED": 86,
		"Cause_FABRICX_LINKX_FAILURE":              87,
		"Cause_MX_LAGX_CONSISTENCYX_CHECK":         88,
	}
)

func (x Ifm_Interfaces_Interface_ErrorDown_Cause) Enum() *Ifm_Interfaces_Interface_ErrorDown_Cause {
	p := new(Ifm_Interfaces_Interface_ErrorDown_Cause)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_ErrorDown_Cause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_ErrorDown_Cause) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[137].Descriptor()
}

func (Ifm_Interfaces_Interface_ErrorDown_Cause) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[137]
}

func (x Ifm_Interfaces_Interface_ErrorDown_Cause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_ErrorDown_Cause) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_ErrorDown_Cause(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_ErrorDown_Cause.Descriptor instead.
func (Ifm_Interfaces_Interface_ErrorDown_Cause) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 28, 0}
}

type Ifm_Interfaces_Interface_ArpStatusDetect_Mode int32

const (
	Ifm_Interfaces_Interface_ArpStatusDetect_Mode_LOOSE  Ifm_Interfaces_Interface_ArpStatusDetect_Mode = 0
	Ifm_Interfaces_Interface_ArpStatusDetect_Mode_STRICT Ifm_Interfaces_Interface_ArpStatusDetect_Mode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_ArpStatusDetect_Mode.
var (
	Ifm_Interfaces_Interface_ArpStatusDetect_Mode_name = map[int32]string{
		0: "Mode_LOOSE",
		1: "Mode_STRICT",
	}
	Ifm_Interfaces_Interface_ArpStatusDetect_Mode_value = map[string]int32{
		"Mode_LOOSE":  0,
		"Mode_STRICT": 1,
	}
)

func (x Ifm_Interfaces_Interface_ArpStatusDetect_Mode) Enum() *Ifm_Interfaces_Interface_ArpStatusDetect_Mode {
	p := new(Ifm_Interfaces_Interface_ArpStatusDetect_Mode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_ArpStatusDetect_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_ArpStatusDetect_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[138].Descriptor()
}

func (Ifm_Interfaces_Interface_ArpStatusDetect_Mode) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[138]
}

func (x Ifm_Interfaces_Interface_ArpStatusDetect_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_ArpStatusDetect_Mode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_ArpStatusDetect_Mode(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_ArpStatusDetect_Mode.Descriptor instead.
func (Ifm_Interfaces_Interface_ArpStatusDetect_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 29, 0}
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy int32

const (
	Ifm_Interfaces_Interface_DhcpRelayAttribute_INVALID_ENUM_VALUE_ReplyPacketPolicy Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy = 0
	Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy_BROADCASTX_ALWAYS  Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy = 1
)

// Enum value maps for Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy.
var (
	Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_ReplyPacketPolicy",
		1: "ReplyPacketPolicy_BROADCASTX_ALWAYS",
	}
	Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy_value = map[string]int32{
		"INVALID_ENUM_VALUE_ReplyPacketPolicy": 0,
		"ReplyPacketPolicy_BROADCASTX_ALWAYS":  1,
	}
)

func (x Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy) Enum() *Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy {
	p := new(Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[139].Descriptor()
}

func (Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[139]
}

func (x Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy.Descriptor instead.
func (Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 0}
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode int32

const (
	Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_INVALID_ENUM_VALUE_SubscriberIdMode Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode = 0
	Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode_SELFX_DEFINE       Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode.
var (
	Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_SubscriberIdMode",
		1: "SubscriberIdMode_SELFX_DEFINE",
	}
	Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_SubscriberIdMode": 0,
		"SubscriberIdMode_SELFX_DEFINE":       1,
	}
)

func (x Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode) Enum() *Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode {
	p := new(Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[140].Descriptor()
}

func (Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[140]
}

func (x Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode.Descriptor instead.
func (Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 0, 0}
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat int32

const (
	Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat_SOURCEX_IPX_ADDRESS Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat = 0
)

// Enum value maps for Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat.
var (
	Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat_name = map[int32]string{
		0: "SubOptionFormat_SOURCEX_IPX_ADDRESS",
	}
	Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat_value = map[string]int32{
		"SubOptionFormat_SOURCEX_IPX_ADDRESS": 0,
	}
)

func (x Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat) Enum() *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat {
	p := new(Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[141].Descriptor()
}

func (Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[141]
}

func (x Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat.Descriptor instead.
func (Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 5, 0, 0}
}

type Ifm_Interfaces_Interface_DhcpRelayIf_ReplyPacketPolicy int32

const (
	Ifm_Interfaces_Interface_DhcpRelayIf_INVALID_ENUM_VALUE_ReplyPacketPolicy Ifm_Interfaces_Interface_DhcpRelayIf_ReplyPacketPolicy = 0
	Ifm_Interfaces_Interface_DhcpRelayIf_ReplyPacketPolicy_BROADCASTX_ALWAYS  Ifm_Interfaces_Interface_DhcpRelayIf_ReplyPacketPolicy = 1
)

// Enum value maps for Ifm_Interfaces_Interface_DhcpRelayIf_ReplyPacketPolicy.
var (
	Ifm_Interfaces_Interface_DhcpRelayIf_ReplyPacketPolicy_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_ReplyPacketPolicy",
		1: "ReplyPacketPolicy_BROADCASTX_ALWAYS",
	}
	Ifm_Interfaces_Interface_DhcpRelayIf_ReplyPacketPolicy_value = map[string]int32{
		"INVALID_ENUM_VALUE_ReplyPacketPolicy": 0,
		"ReplyPacketPolicy_BROADCASTX_ALWAYS":  1,
	}
)

func (x Ifm_Interfaces_Interface_DhcpRelayIf_ReplyPacketPolicy) Enum() *Ifm_Interfaces_Interface_DhcpRelayIf_ReplyPacketPolicy {
	p := new(Ifm_Interfaces_Interface_DhcpRelayIf_ReplyPacketPolicy)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_DhcpRelayIf_ReplyPacketPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_DhcpRelayIf_ReplyPacketPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[142].Descriptor()
}

func (Ifm_Interfaces_Interface_DhcpRelayIf_ReplyPacketPolicy) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[142]
}

func (x Ifm_Interfaces_Interface_DhcpRelayIf_ReplyPacketPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_DhcpRelayIf_ReplyPacketPolicy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_DhcpRelayIf_ReplyPacketPolicy(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayIf_ReplyPacketPolicy.Descriptor instead.
func (Ifm_Interfaces_Interface_DhcpRelayIf_ReplyPacketPolicy) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 33, 0}
}

type Ifm_Interfaces_Interface_DhcpRelayIf_Option82_SubscriberIdMode int32

const (
	Ifm_Interfaces_Interface_DhcpRelayIf_Option82_INVALID_ENUM_VALUE_SubscriberIdMode Ifm_Interfaces_Interface_DhcpRelayIf_Option82_SubscriberIdMode = 0
	Ifm_Interfaces_Interface_DhcpRelayIf_Option82_SubscriberIdMode_SELFX_DEFINE       Ifm_Interfaces_Interface_DhcpRelayIf_Option82_SubscriberIdMode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_DhcpRelayIf_Option82_SubscriberIdMode.
var (
	Ifm_Interfaces_Interface_DhcpRelayIf_Option82_SubscriberIdMode_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_SubscriberIdMode",
		1: "SubscriberIdMode_SELFX_DEFINE",
	}
	Ifm_Interfaces_Interface_DhcpRelayIf_Option82_SubscriberIdMode_value = map[string]int32{
		"INVALID_ENUM_VALUE_SubscriberIdMode": 0,
		"SubscriberIdMode_SELFX_DEFINE":       1,
	}
)

func (x Ifm_Interfaces_Interface_DhcpRelayIf_Option82_SubscriberIdMode) Enum() *Ifm_Interfaces_Interface_DhcpRelayIf_Option82_SubscriberIdMode {
	p := new(Ifm_Interfaces_Interface_DhcpRelayIf_Option82_SubscriberIdMode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_DhcpRelayIf_Option82_SubscriberIdMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_DhcpRelayIf_Option82_SubscriberIdMode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[143].Descriptor()
}

func (Ifm_Interfaces_Interface_DhcpRelayIf_Option82_SubscriberIdMode) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[143]
}

func (x Ifm_Interfaces_Interface_DhcpRelayIf_Option82_SubscriberIdMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_DhcpRelayIf_Option82_SubscriberIdMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_DhcpRelayIf_Option82_SubscriberIdMode(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayIf_Option82_SubscriberIdMode.Descriptor instead.
func (Ifm_Interfaces_Interface_DhcpRelayIf_Option82_SubscriberIdMode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 33, 0, 0}
}

type Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable int32

const (
	Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_INVALID_ENUM_VALUE_ServerEnable Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable = 0
	Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable_ENABLE             Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable = 1
	Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable_DISABLE            Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable = 2
)

// Enum value maps for Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable.
var (
	Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_ServerEnable",
		1: "ServerEnable_ENABLE",
		2: "ServerEnable_DISABLE",
	}
	Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable_value = map[string]int32{
		"INVALID_ENUM_VALUE_ServerEnable": 0,
		"ServerEnable_ENABLE":             1,
		"ServerEnable_DISABLE":            2,
	}
)

func (x Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable) Enum() *Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable {
	p := new(Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[144].Descriptor()
}

func (Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[144]
}

func (x Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable.Descriptor instead.
func (Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 34, 0, 0}
}

type Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType int32

const (
	Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_INVALID_ENUM_VALUE_SubOptionType Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType = 0
	Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType_CIRCUITX_ID        Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType = 1
	Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType_REMOTEX_ID         Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType = 2
	Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType_CIRCUITX_REMOTE    Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType = 3
)

// Enum value maps for Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType.
var (
	Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType_name = map[int32]string{
		0: "INVALID_ENUM_VALUE_SubOptionType",
		1: "SubOptionType_CIRCUITX_ID",
		2: "SubOptionType_REMOTEX_ID",
		3: "SubOptionType_CIRCUITX_REMOTE",
	}
	Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType_value = map[string]int32{
		"INVALID_ENUM_VALUE_SubOptionType": 0,
		"SubOptionType_CIRCUITX_ID":        1,
		"SubOptionType_REMOTEX_ID":         2,
		"SubOptionType_CIRCUITX_REMOTE":    3,
	}
)

func (x Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType) Enum() *Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType {
	p := new(Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[145].Descriptor()
}

func (Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[145]
}

func (x Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType.Descriptor instead.
func (Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 34, 1, 0, 0}
}

type Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState int32

const (
	Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState_INIT       Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState = 0
	Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState_SELECTING  Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState = 1
	Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState_REQUESTING Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState = 2
	Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState_BOUND      Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState = 3
	Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState_RENEWING   Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState = 4
	Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState_REBINDING  Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState = 5
)

// Enum value maps for Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState.
var (
	Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState_name = map[int32]string{
		0: "FsmState_INIT",
		1: "FsmState_SELECTING",
		2: "FsmState_REQUESTING",
		3: "FsmState_BOUND",
		4: "FsmState_RENEWING",
		5: "FsmState_REBINDING",
	}
	Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState_value = map[string]int32{
		"FsmState_INIT":       0,
		"FsmState_SELECTING":  1,
		"FsmState_REQUESTING": 2,
		"FsmState_BOUND":      3,
		"FsmState_RENEWING":   4,
		"FsmState_REBINDING":  5,
	}
)

func (x Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState) Enum() *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState {
	p := new(Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[146].Descriptor()
}

func (Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[146]
}

func (x Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState.Descriptor instead.
func (Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 35, 0, 0}
}

type Ifm_Interfaces_Interface_FrEncapsulation_Encapsulation int32

const (
	Ifm_Interfaces_Interface_FrEncapsulation_INVALID_ENUM_VALUE_Encapsulation Ifm_Interfaces_Interface_FrEncapsulation_Encapsulation = 0
	Ifm_Interfaces_Interface_FrEncapsulation_Encapsulation_IETF               Ifm_Interfaces_Interface_FrEncapsulation_Encapsulation = 19
	Ifm_Interfaces_Interface_FrEncapsulation_Encapsulation_NONSTANDARD        Ifm_Interfaces_Interface_FrEncapsulation_Encapsulation = 20
)

// Enum value maps for Ifm_Interfaces_Interface_FrEncapsulation_Encapsulation.
var (
	Ifm_Interfaces_Interface_FrEncapsulation_Encapsulation_name = map[int32]string{
		0:  "INVALID_ENUM_VALUE_Encapsulation",
		19: "Encapsulation_IETF",
		20: "Encapsulation_NONSTANDARD",
	}
	Ifm_Interfaces_Interface_FrEncapsulation_Encapsulation_value = map[string]int32{
		"INVALID_ENUM_VALUE_Encapsulation": 0,
		"Encapsulation_IETF":               19,
		"Encapsulation_NONSTANDARD":        20,
	}
)

func (x Ifm_Interfaces_Interface_FrEncapsulation_Encapsulation) Enum() *Ifm_Interfaces_Interface_FrEncapsulation_Encapsulation {
	p := new(Ifm_Interfaces_Interface_FrEncapsulation_Encapsulation)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_FrEncapsulation_Encapsulation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_FrEncapsulation_Encapsulation) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[147].Descriptor()
}

func (Ifm_Interfaces_Interface_FrEncapsulation_Encapsulation) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[147]
}

func (x Ifm_Interfaces_Interface_FrEncapsulation_Encapsulation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_FrEncapsulation_Encapsulation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_FrEncapsulation_Encapsulation(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_FrEncapsulation_Encapsulation.Descriptor instead.
func (Ifm_Interfaces_Interface_FrEncapsulation_Encapsulation) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 40, 0}
}

type Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode int32

const (
	Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode_L2 Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode = 0
	Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode_L3 Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode = 1
)

// Enum value maps for Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode.
var (
	Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode_name = map[int32]string{
		0: "Mode_L2",
		1: "Mode_L3",
	}
	Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode_value = map[string]int32{
		"Mode_L2": 0,
		"Mode_L3": 1,
	}
)

func (x Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode) Enum() *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode {
	p := new(Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[148].Descriptor()
}

func (Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[148]
}

func (x Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode.Descriptor instead.
func (Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 42, 0, 0}
}

type Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction int32

const (
	Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction_INBOUND     Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction = 0
	Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction_OUTBOUND    Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction = 1
	Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction_BIDIRECTION Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction = 2
)

// Enum value maps for Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction.
var (
	Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction_name = map[int32]string{
		0: "Direction_INBOUND",
		1: "Direction_OUTBOUND",
		2: "Direction_BIDIRECTION",
	}
	Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction_value = map[string]int32{
		"Direction_INBOUND":     0,
		"Direction_OUTBOUND":    1,
		"Direction_BIDIRECTION": 2,
	}
)

func (x Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction) Enum() *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction {
	p := new(Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[149].Descriptor()
}

func (Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[149]
}

func (x Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction.Descriptor instead.
func (Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 42, 0, 1}
}

type Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action int32

const (
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action_RECEIVEX_PKT Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action = 0
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action_SENDX_PKT    Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action = 1
)

// Enum value maps for Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action.
var (
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action_name = map[int32]string{
		0: "Action_RECEIVEX_PKT",
		1: "Action_SENDX_PKT",
	}
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action_value = map[string]int32{
		"Action_RECEIVEX_PKT": 0,
		"Action_SENDX_PKT":    1,
	}
)

func (x Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action) Enum() *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action {
	p := new(Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[150].Descriptor()
}

func (Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[150]
}

func (x Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action.Descriptor instead.
func (Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 43, 0, 0}
}

type Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName int32

const (
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_USERX_DEFINED         Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 0
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_ECHO                  Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 1
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_ECHOX_REPLY           Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 2
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_FRAGMENTNEEDX_DFSET   Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 3
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_HOSTX_REDIRECT        Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 4
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_HOSTX_TOSX_REDIRECT   Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 5
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_HOSTX_UNREACHABLE     Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 6
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_INFORMATIONX_REPLY    Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 7
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_INFORMATIONX_REQUEST  Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 8
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_NETX_REDIRECT         Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 9
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_NETX_TOSX_REDIRECT    Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 10
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_NETX_UNREACHABLE      Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 11
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_PARAMETERX_PROBLEM    Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 12
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_PORTX_UNREACHABLE     Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 13
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_PROTOCOLX_UNREACHABLE Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 14
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_REASSEMBLYX_TIMEOUT   Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 15
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_SOURCEX_QUENCH        Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 16
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_SOURCEX_ROUTEX_FAILED Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 17
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_TIMESTAMPX_REPLY      Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 18
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_TIMESTAMPX_REQUEST    Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 19
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_TTLX_EXCEEDED         Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName = 20
)

// Enum value maps for Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName.
var (
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_name = map[int32]string{
		0:  "IcmpName_USERX_DEFINED",
		1:  "IcmpName_ECHO",
		2:  "IcmpName_ECHOX_REPLY",
		3:  "IcmpName_FRAGMENTNEEDX_DFSET",
		4:  "IcmpName_HOSTX_REDIRECT",
		5:  "IcmpName_HOSTX_TOSX_REDIRECT",
		6:  "IcmpName_HOSTX_UNREACHABLE",
		7:  "IcmpName_INFORMATIONX_REPLY",
		8:  "IcmpName_INFORMATIONX_REQUEST",
		9:  "IcmpName_NETX_REDIRECT",
		10: "IcmpName_NETX_TOSX_REDIRECT",
		11: "IcmpName_NETX_UNREACHABLE",
		12: "IcmpName_PARAMETERX_PROBLEM",
		13: "IcmpName_PORTX_UNREACHABLE",
		14: "IcmpName_PROTOCOLX_UNREACHABLE",
		15: "IcmpName_REASSEMBLYX_TIMEOUT",
		16: "IcmpName_SOURCEX_QUENCH",
		17: "IcmpName_SOURCEX_ROUTEX_FAILED",
		18: "IcmpName_TIMESTAMPX_REPLY",
		19: "IcmpName_TIMESTAMPX_REQUEST",
		20: "IcmpName_TTLX_EXCEEDED",
	}
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_value = map[string]int32{
		"IcmpName_USERX_DEFINED":         0,
		"IcmpName_ECHO":                  1,
		"IcmpName_ECHOX_REPLY":           2,
		"IcmpName_FRAGMENTNEEDX_DFSET":   3,
		"IcmpName_HOSTX_REDIRECT":        4,
		"IcmpName_HOSTX_TOSX_REDIRECT":   5,
		"IcmpName_HOSTX_UNREACHABLE":     6,
		"IcmpName_INFORMATIONX_REPLY":    7,
		"IcmpName_INFORMATIONX_REQUEST":  8,
		"IcmpName_NETX_REDIRECT":         9,
		"IcmpName_NETX_TOSX_REDIRECT":    10,
		"IcmpName_NETX_UNREACHABLE":      11,
		"IcmpName_PARAMETERX_PROBLEM":    12,
		"IcmpName_PORTX_UNREACHABLE":     13,
		"IcmpName_PROTOCOLX_UNREACHABLE": 14,
		"IcmpName_REASSEMBLYX_TIMEOUT":   15,
		"IcmpName_SOURCEX_QUENCH":        16,
		"IcmpName_SOURCEX_ROUTEX_FAILED": 17,
		"IcmpName_TIMESTAMPX_REPLY":      18,
		"IcmpName_TIMESTAMPX_REQUEST":    19,
		"IcmpName_TTLX_EXCEEDED":         20,
	}
)

func (x Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName) Enum() *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName {
	p := new(Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[151].Descriptor()
}

func (Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[151]
}

func (x Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName.Descriptor instead.
func (Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 43, 0, 1}
}

type Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation int32

const (
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation_ENABLE  Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation = 0
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation_DISABLE Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation = 1
)

// Enum value maps for Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation.
var (
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation_name = map[int32]string{
		0: "SwitchOperation_ENABLE",
		1: "SwitchOperation_DISABLE",
	}
	Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation_value = map[string]int32{
		"SwitchOperation_ENABLE":  0,
		"SwitchOperation_DISABLE": 1,
	}
)

func (x Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation) Enum() *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation {
	p := new(Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[152].Descriptor()
}

func (Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[152]
}

func (x Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation.Descriptor instead.
func (Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 43, 0, 2}
}

type Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType int32

const (
	Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType_ROUTEX_ALERT  Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType = 0
	Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType_ROUTEX_RECORD Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType = 1
	Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType_SOURCEX_ROUTE Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType = 2
	Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType_TIMEX_STAMP   Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType = 3
)

// Enum value maps for Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType.
var (
	Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType_name = map[int32]string{
		0: "OptionType_ROUTEX_ALERT",
		1: "OptionType_ROUTEX_RECORD",
		2: "OptionType_SOURCEX_ROUTE",
		3: "OptionType_TIMEX_STAMP",
	}
	Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType_value = map[string]int32{
		"OptionType_ROUTEX_ALERT":  0,
		"OptionType_ROUTEX_RECORD": 1,
		"OptionType_SOURCEX_ROUTE": 2,
		"OptionType_TIMEX_STAMP":   3,
	}
)

func (x Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType) Enum() *Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType {
	p := new(Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[153].Descriptor()
}

func (Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[153]
}

func (x Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType.Descriptor instead.
func (Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 44, 0, 0}
}

type Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch int32

const (
	Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch_ENABLE  Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch = 0
	Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch_DISABLE Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch = 1
)

// Enum value maps for Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch.
var (
	Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch_name = map[int32]string{
		0: "Switch_ENABLE",
		1: "Switch_DISABLE",
	}
	Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch_value = map[string]int32{
		"Switch_ENABLE":  0,
		"Switch_DISABLE": 1,
	}
)

func (x Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch) Enum() *Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch {
	p := new(Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch)
	*p = x
	return p
}

func (x Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[154].Descriptor()
}

func (Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[154]
}

func (x Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch(num)
	return nil
}

// Deprecated: Use Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch.Descriptor instead.
func (Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 44, 0, 1}
}

type Ifm_StaticDimensionRanges_StaticDimensionRange_Type int32

const (
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_ETHERNET           Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 0
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_GIGABITETHERNET    Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 2
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_ETHX_TRUNK         Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 4
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_IPX_TRUNK          Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 5
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_VIRTUALX_ETHERNET  Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 6
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_SERIAL             Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 8
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_POS                Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 9
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_CPOS               Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 10
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_ATM                Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 11
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_TUNNEL             Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 14
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_VLANIF             Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 15
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_NULL               Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 18
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_LOOPBACK           Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 19
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_X_100GE            Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 20
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_LMPIF              Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 21
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_MTUNNEL            Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 22
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_X_40GE             Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 23
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_X_10GE             Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 24
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_GEBRIEF            Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 25
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_METH               Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 26
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_STACKX_PORT        Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 27
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_SIP                Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 28
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_E1                 Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 30
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_MPX_GROUP          Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 31
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_IMAX_GROUP         Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 32
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_VMETH              Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 33
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_REMOTEX_AP         Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 35
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_VBRIDGE            Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 36
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_ATMX_BUNDLE        Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 37
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_FIBERX_CHANNEL     Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 38
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_INFINIBAND         Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 39
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_VBDIF              Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 40
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_T1                 Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 41
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_T3                 Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 42
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_VC4                Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 43
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_VC12               Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 44
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_GLOBALX_VE         Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 45
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_FABRICX_PORT       Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 46
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_E3                 Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 48
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_VP                 Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 49
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_DCNINTERFACE       Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 50
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_CPOSX_TRUNK        Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 51
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_TRUNKX_SERIAL      Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 52
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_GLOBALX_MPX_GROUP  Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 53
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_OTN                Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 55
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_GLOBALX_IMAX_GROUP Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 57
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_POSX_TRUNK         Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 59
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_GMPLSX_UNI         Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 63
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_WDM                Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 64
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_NVE                Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 65
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_FCOEX_PORT         Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 67
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_VIRTUALX_TEMPLATE  Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 68
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_FC                 Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 70
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_X_4X10GE           Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 71
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_X_10X10GE          Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 72
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_X_3X40GE           Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 73
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_X_4X25GE           Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 74
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_X_25GE             Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 75
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_IMETH              Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 79
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_PWX_VE             Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 88
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_VXX_TUNNEL         Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 89
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_SERVICEIF          Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 90
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_XGIGABITETHERNET   Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 91
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_X_200GE            Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 92
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_VIRTUALX_ODUK      Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 94
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_FLEXE              Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 95
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_FLEXEX_200GE       Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 96
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_X_50X_100GE        Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 101
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_X_50GE             Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 102
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_FLEXEX_50G         Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 103
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_FLEXEX_100G        Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 104
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_FLEXEX_50X_100G    Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 105
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_VIRTUALX_SERIAL    Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 107
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_X_400GE            Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 108
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_HPGE               Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 114
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_VIRTUALX_IF        Ifm_StaticDimensionRanges_StaticDimensionRange_Type = 116
)

// Enum value maps for Ifm_StaticDimensionRanges_StaticDimensionRange_Type.
var (
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_name = map[int32]string{
		0:   "Type_ETHERNET",
		2:   "Type_GIGABITETHERNET",
		4:   "Type_ETHX_TRUNK",
		5:   "Type_IPX_TRUNK",
		6:   "Type_VIRTUALX_ETHERNET",
		8:   "Type_SERIAL",
		9:   "Type_POS",
		10:  "Type_CPOS",
		11:  "Type_ATM",
		14:  "Type_TUNNEL",
		15:  "Type_VLANIF",
		18:  "Type_NULL",
		19:  "Type_LOOPBACK",
		20:  "Type_X_100GE",
		21:  "Type_LMPIF",
		22:  "Type_MTUNNEL",
		23:  "Type_X_40GE",
		24:  "Type_X_10GE",
		25:  "Type_GEBRIEF",
		26:  "Type_METH",
		27:  "Type_STACKX_PORT",
		28:  "Type_SIP",
		30:  "Type_E1",
		31:  "Type_MPX_GROUP",
		32:  "Type_IMAX_GROUP",
		33:  "Type_VMETH",
		35:  "Type_REMOTEX_AP",
		36:  "Type_VBRIDGE",
		37:  "Type_ATMX_BUNDLE",
		38:  "Type_FIBERX_CHANNEL",
		39:  "Type_INFINIBAND",
		40:  "Type_VBDIF",
		41:  "Type_T1",
		42:  "Type_T3",
		43:  "Type_VC4",
		44:  "Type_VC12",
		45:  "Type_GLOBALX_VE",
		46:  "Type_FABRICX_PORT",
		48:  "Type_E3",
		49:  "Type_VP",
		50:  "Type_DCNINTERFACE",
		51:  "Type_CPOSX_TRUNK",
		52:  "Type_TRUNKX_SERIAL",
		53:  "Type_GLOBALX_MPX_GROUP",
		55:  "Type_OTN",
		57:  "Type_GLOBALX_IMAX_GROUP",
		59:  "Type_POSX_TRUNK",
		63:  "Type_GMPLSX_UNI",
		64:  "Type_WDM",
		65:  "Type_NVE",
		67:  "Type_FCOEX_PORT",
		68:  "Type_VIRTUALX_TEMPLATE",
		70:  "Type_FC",
		71:  "Type_X_4X10GE",
		72:  "Type_X_10X10GE",
		73:  "Type_X_3X40GE",
		74:  "Type_X_4X25GE",
		75:  "Type_X_25GE",
		79:  "Type_IMETH",
		88:  "Type_PWX_VE",
		89:  "Type_VXX_TUNNEL",
		90:  "Type_SERVICEIF",
		91:  "Type_XGIGABITETHERNET",
		92:  "Type_X_200GE",
		94:  "Type_VIRTUALX_ODUK",
		95:  "Type_FLEXE",
		96:  "Type_FLEXEX_200GE",
		101: "Type_X_50X_100GE",
		102: "Type_X_50GE",
		103: "Type_FLEXEX_50G",
		104: "Type_FLEXEX_100G",
		105: "Type_FLEXEX_50X_100G",
		107: "Type_VIRTUALX_SERIAL",
		108: "Type_X_400GE",
		114: "Type_HPGE",
		116: "Type_VIRTUALX_IF",
	}
	Ifm_StaticDimensionRanges_StaticDimensionRange_Type_value = map[string]int32{
		"Type_ETHERNET":           0,
		"Type_GIGABITETHERNET":    2,
		"Type_ETHX_TRUNK":         4,
		"Type_IPX_TRUNK":          5,
		"Type_VIRTUALX_ETHERNET":  6,
		"Type_SERIAL":             8,
		"Type_POS":                9,
		"Type_CPOS":               10,
		"Type_ATM":                11,
		"Type_TUNNEL":             14,
		"Type_VLANIF":             15,
		"Type_NULL":               18,
		"Type_LOOPBACK":           19,
		"Type_X_100GE":            20,
		"Type_LMPIF":              21,
		"Type_MTUNNEL":            22,
		"Type_X_40GE":             23,
		"Type_X_10GE":             24,
		"Type_GEBRIEF":            25,
		"Type_METH":               26,
		"Type_STACKX_PORT":        27,
		"Type_SIP":                28,
		"Type_E1":                 30,
		"Type_MPX_GROUP":          31,
		"Type_IMAX_GROUP":         32,
		"Type_VMETH":              33,
		"Type_REMOTEX_AP":         35,
		"Type_VBRIDGE":            36,
		"Type_ATMX_BUNDLE":        37,
		"Type_FIBERX_CHANNEL":     38,
		"Type_INFINIBAND":         39,
		"Type_VBDIF":              40,
		"Type_T1":                 41,
		"Type_T3":                 42,
		"Type_VC4":                43,
		"Type_VC12":               44,
		"Type_GLOBALX_VE":         45,
		"Type_FABRICX_PORT":       46,
		"Type_E3":                 48,
		"Type_VP":                 49,
		"Type_DCNINTERFACE":       50,
		"Type_CPOSX_TRUNK":        51,
		"Type_TRUNKX_SERIAL":      52,
		"Type_GLOBALX_MPX_GROUP":  53,
		"Type_OTN":                55,
		"Type_GLOBALX_IMAX_GROUP": 57,
		"Type_POSX_TRUNK":         59,
		"Type_GMPLSX_UNI":         63,
		"Type_WDM":                64,
		"Type_NVE":                65,
		"Type_FCOEX_PORT":         67,
		"Type_VIRTUALX_TEMPLATE":  68,
		"Type_FC":                 70,
		"Type_X_4X10GE":           71,
		"Type_X_10X10GE":          72,
		"Type_X_3X40GE":           73,
		"Type_X_4X25GE":           74,
		"Type_X_25GE":             75,
		"Type_IMETH":              79,
		"Type_PWX_VE":             88,
		"Type_VXX_TUNNEL":         89,
		"Type_SERVICEIF":          90,
		"Type_XGIGABITETHERNET":   91,
		"Type_X_200GE":            92,
		"Type_VIRTUALX_ODUK":      94,
		"Type_FLEXE":              95,
		"Type_FLEXEX_200GE":       96,
		"Type_X_50X_100GE":        101,
		"Type_X_50GE":             102,
		"Type_FLEXEX_50G":         103,
		"Type_FLEXEX_100G":        104,
		"Type_FLEXEX_50X_100G":    105,
		"Type_VIRTUALX_SERIAL":    107,
		"Type_X_400GE":            108,
		"Type_HPGE":               114,
		"Type_VIRTUALX_IF":        116,
	}
)

func (x Ifm_StaticDimensionRanges_StaticDimensionRange_Type) Enum() *Ifm_StaticDimensionRanges_StaticDimensionRange_Type {
	p := new(Ifm_StaticDimensionRanges_StaticDimensionRange_Type)
	*p = x
	return p
}

func (x Ifm_StaticDimensionRanges_StaticDimensionRange_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_StaticDimensionRanges_StaticDimensionRange_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[155].Descriptor()
}

func (Ifm_StaticDimensionRanges_StaticDimensionRange_Type) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[155]
}

func (x Ifm_StaticDimensionRanges_StaticDimensionRange_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_StaticDimensionRanges_StaticDimensionRange_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_StaticDimensionRanges_StaticDimensionRange_Type(num)
	return nil
}

// Deprecated: Use Ifm_StaticDimensionRanges_StaticDimensionRange_Type.Descriptor instead.
func (Ifm_StaticDimensionRanges_StaticDimensionRange_Type) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 4, 0, 0}
}

type Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType int32

const (
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_BPDUX_PROTECTION                   Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 0
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_AUTOX_DEFEND                       Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 1
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_MONITORX_LINK                      Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 2
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_PORTSECX_REACHEDX_LIMIT            Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 65
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_STORMX_CONTROL                     Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 66
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_LOOPBACKX_DETECT                   Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 67
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_DUALX_ACTIVE                       Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 68
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_MACX_ADDRESSX_FLAPPING             Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 69
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_NOX_STACKX_LINK                    Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 70
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_CRCX_STATISTICS                    Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 71
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_TRANSCEIVERX_POWERX_LOW            Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 72
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_LINKX_FLAP                         Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 73
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_L2X_LOOPX_OCCURED                  Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 74
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_STACKX_MEMBERX_EXCEEDX_LIMIT       Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 75
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_SPINEX_MEMBERX_EXCEEDX_LIMIT       Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 76
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_RESOURCEX_MISMATCH                 Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 77
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_LEAFX_MSTP                         Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 78
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_MX_LAG                             Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 79
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_FABRICX_UPLINKX_THRESHOLD          Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 80
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_STACKX_CONFIGX_CONFLICT            Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 81
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_SPINEX_TYPEX_UNSUPPORTED           Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 82
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_STACKX_PACKETX_DEFENSIVE           Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 83
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_FORWARDX_ENGINEX_BUFFERX_FAILED    Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 85
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_FORWARDX_ENGINEX_INTERFACEX_FAILED Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 86
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_FABRICX_LINKX_FAILURE              Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 87
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_MX_LAGX_CONSISTENCYX_CHECK         Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType = 88
)

// Enum value maps for Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType.
var (
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_name = map[int32]string{
		0:  "ErrorDownType_BPDUX_PROTECTION",
		1:  "ErrorDownType_AUTOX_DEFEND",
		2:  "ErrorDownType_MONITORX_LINK",
		65: "ErrorDownType_PORTSECX_REACHEDX_LIMIT",
		66: "ErrorDownType_STORMX_CONTROL",
		67: "ErrorDownType_LOOPBACKX_DETECT",
		68: "ErrorDownType_DUALX_ACTIVE",
		69: "ErrorDownType_MACX_ADDRESSX_FLAPPING",
		70: "ErrorDownType_NOX_STACKX_LINK",
		71: "ErrorDownType_CRCX_STATISTICS",
		72: "ErrorDownType_TRANSCEIVERX_POWERX_LOW",
		73: "ErrorDownType_LINKX_FLAP",
		74: "ErrorDownType_L2X_LOOPX_OCCURED",
		75: "ErrorDownType_STACKX_MEMBERX_EXCEEDX_LIMIT",
		76: "ErrorDownType_SPINEX_MEMBERX_EXCEEDX_LIMIT",
		77: "ErrorDownType_RESOURCEX_MISMATCH",
		78: "ErrorDownType_LEAFX_MSTP",
		79: "ErrorDownType_MX_LAG",
		80: "ErrorDownType_FABRICX_UPLINKX_THRESHOLD",
		81: "ErrorDownType_STACKX_CONFIGX_CONFLICT",
		82: "ErrorDownType_SPINEX_TYPEX_UNSUPPORTED",
		83: "ErrorDownType_STACKX_PACKETX_DEFENSIVE",
		85: "ErrorDownType_FORWARDX_ENGINEX_BUFFERX_FAILED",
		86: "ErrorDownType_FORWARDX_ENGINEX_INTERFACEX_FAILED",
		87: "ErrorDownType_FABRICX_LINKX_FAILURE",
		88: "ErrorDownType_MX_LAGX_CONSISTENCYX_CHECK",
	}
	Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_value = map[string]int32{
		"ErrorDownType_BPDUX_PROTECTION":                   0,
		"ErrorDownType_AUTOX_DEFEND":                       1,
		"ErrorDownType_MONITORX_LINK":                      2,
		"ErrorDownType_PORTSECX_REACHEDX_LIMIT":            65,
		"ErrorDownType_STORMX_CONTROL":                     66,
		"ErrorDownType_LOOPBACKX_DETECT":                   67,
		"ErrorDownType_DUALX_ACTIVE":                       68,
		"ErrorDownType_MACX_ADDRESSX_FLAPPING":             69,
		"ErrorDownType_NOX_STACKX_LINK":                    70,
		"ErrorDownType_CRCX_STATISTICS":                    71,
		"ErrorDownType_TRANSCEIVERX_POWERX_LOW":            72,
		"ErrorDownType_LINKX_FLAP":                         73,
		"ErrorDownType_L2X_LOOPX_OCCURED":                  74,
		"ErrorDownType_STACKX_MEMBERX_EXCEEDX_LIMIT":       75,
		"ErrorDownType_SPINEX_MEMBERX_EXCEEDX_LIMIT":       76,
		"ErrorDownType_RESOURCEX_MISMATCH":                 77,
		"ErrorDownType_LEAFX_MSTP":                         78,
		"ErrorDownType_MX_LAG":                             79,
		"ErrorDownType_FABRICX_UPLINKX_THRESHOLD":          80,
		"ErrorDownType_STACKX_CONFIGX_CONFLICT":            81,
		"ErrorDownType_SPINEX_TYPEX_UNSUPPORTED":           82,
		"ErrorDownType_STACKX_PACKETX_DEFENSIVE":           83,
		"ErrorDownType_FORWARDX_ENGINEX_BUFFERX_FAILED":    85,
		"ErrorDownType_FORWARDX_ENGINEX_INTERFACEX_FAILED": 86,
		"ErrorDownType_FABRICX_LINKX_FAILURE":              87,
		"ErrorDownType_MX_LAGX_CONSISTENCYX_CHECK":         88,
	}
)

func (x Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType) Enum() *Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType {
	p := new(Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType)
	*p = x
	return p
}

func (x Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[156].Descriptor()
}

func (Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[156]
}

func (x Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType(num)
	return nil
}

// Deprecated: Use Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType.Descriptor instead.
func (Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 7, 0, 0}
}

type Ifm_HdlcDamp_DampLevel int32

const (
	Ifm_HdlcDamp_DampLevel_LIGHT  Ifm_HdlcDamp_DampLevel = 0
	Ifm_HdlcDamp_DampLevel_MIDDLE Ifm_HdlcDamp_DampLevel = 1
	Ifm_HdlcDamp_DampLevel_HEAVY  Ifm_HdlcDamp_DampLevel = 2
	Ifm_HdlcDamp_DampLevel_MANUAL Ifm_HdlcDamp_DampLevel = 3
)

// Enum value maps for Ifm_HdlcDamp_DampLevel.
var (
	Ifm_HdlcDamp_DampLevel_name = map[int32]string{
		0: "DampLevel_LIGHT",
		1: "DampLevel_MIDDLE",
		2: "DampLevel_HEAVY",
		3: "DampLevel_MANUAL",
	}
	Ifm_HdlcDamp_DampLevel_value = map[string]int32{
		"DampLevel_LIGHT":  0,
		"DampLevel_MIDDLE": 1,
		"DampLevel_HEAVY":  2,
		"DampLevel_MANUAL": 3,
	}
)

func (x Ifm_HdlcDamp_DampLevel) Enum() *Ifm_HdlcDamp_DampLevel {
	p := new(Ifm_HdlcDamp_DampLevel)
	*p = x
	return p
}

func (x Ifm_HdlcDamp_DampLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ifm_HdlcDamp_DampLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_huawei_ifm_proto_enumTypes[157].Descriptor()
}

func (Ifm_HdlcDamp_DampLevel) Type() protoreflect.EnumType {
	return &file_huawei_ifm_proto_enumTypes[157]
}

func (x Ifm_HdlcDamp_DampLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ifm_HdlcDamp_DampLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ifm_HdlcDamp_DampLevel(num)
	return nil
}

// Deprecated: Use Ifm_HdlcDamp_DampLevel.Descriptor instead.
func (Ifm_HdlcDamp_DampLevel) EnumDescriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 8, 0}
}

type Ifm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalConfig          *Ifm_GlobalConfig          `protobuf:"bytes,1,opt,name=global_config,json=globalConfig" json:"global_config,omitempty"`
	Interfaces            *Ifm_Interfaces            `protobuf:"bytes,2,opt,name=interfaces" json:"interfaces,omitempty"`
	Global                *Ifm_Global                `protobuf:"bytes,3,opt,name=global" json:"global,omitempty"`
	Damp                  *Ifm_Damp                  `protobuf:"bytes,4,opt,name=damp" json:"damp,omitempty"`
	StaticDimensionRanges *Ifm_StaticDimensionRanges `protobuf:"bytes,5,opt,name=static_dimension_ranges,json=staticDimensionRanges" json:"static_dimension_ranges,omitempty"`
	Ipv4InterfaceCount    *Ifm_Ipv4InterfaceCount    `protobuf:"bytes,6,opt,name=ipv4_interface_count,json=ipv4InterfaceCount" json:"ipv4_interface_count,omitempty"`
	RemoteInterfaces      *Ifm_RemoteInterfaces      `protobuf:"bytes,7,opt,name=remote_interfaces,json=remoteInterfaces" json:"remote_interfaces,omitempty"`
	AutoRecoveryTimes     *Ifm_AutoRecoveryTimes     `protobuf:"bytes,8,opt,name=auto_recovery_times,json=autoRecoveryTimes" json:"auto_recovery_times,omitempty"`
	HdlcDamp              *Ifm_HdlcDamp              `protobuf:"bytes,9,opt,name=hdlc_damp,json=hdlcDamp" json:"hdlc_damp,omitempty"`
}

func (x *Ifm) Reset() {
	*x = Ifm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm) ProtoMessage() {}

func (x *Ifm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm.ProtoReflect.Descriptor instead.
func (*Ifm) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0}
}

func (x *Ifm) GetGlobalConfig() *Ifm_GlobalConfig {
	if x != nil {
		return x.GlobalConfig
	}
	return nil
}

func (x *Ifm) GetInterfaces() *Ifm_Interfaces {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *Ifm) GetGlobal() *Ifm_Global {
	if x != nil {
		return x.Global
	}
	return nil
}

func (x *Ifm) GetDamp() *Ifm_Damp {
	if x != nil {
		return x.Damp
	}
	return nil
}

func (x *Ifm) GetStaticDimensionRanges() *Ifm_StaticDimensionRanges {
	if x != nil {
		return x.StaticDimensionRanges
	}
	return nil
}

func (x *Ifm) GetIpv4InterfaceCount() *Ifm_Ipv4InterfaceCount {
	if x != nil {
		return x.Ipv4InterfaceCount
	}
	return nil
}

func (x *Ifm) GetRemoteInterfaces() *Ifm_RemoteInterfaces {
	if x != nil {
		return x.RemoteInterfaces
	}
	return nil
}

func (x *Ifm) GetAutoRecoveryTimes() *Ifm_AutoRecoveryTimes {
	if x != nil {
		return x.AutoRecoveryTimes
	}
	return nil
}

func (x *Ifm) GetHdlcDamp() *Ifm_HdlcDamp {
	if x != nil {
		return x.HdlcDamp
	}
	return nil
}

type Ifm_GlobalConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatisticInterval *uint32 `protobuf:"varint,1,opt,name=statistic_interval,json=statisticInterval" json:"statistic_interval,omitempty"`
}

func (x *Ifm_GlobalConfig) Reset() {
	*x = Ifm_GlobalConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_GlobalConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_GlobalConfig) ProtoMessage() {}

func (x *Ifm_GlobalConfig) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_GlobalConfig.ProtoReflect.Descriptor instead.
func (*Ifm_GlobalConfig) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Ifm_GlobalConfig) GetStatisticInterval() uint32 {
	if x != nil && x.StatisticInterval != nil {
		return *x.StatisticInterval
	}
	return 0
}

type Ifm_Interfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface []*Ifm_Interfaces_Interface `protobuf:"bytes,1,rep,name=interface" json:"interface,omitempty"`
}

func (x *Ifm_Interfaces) Reset() {
	*x = Ifm_Interfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces) ProtoMessage() {}

func (x *Ifm_Interfaces) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Ifm_Interfaces) GetInterface() []*Ifm_Interfaces_Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

type Ifm_Global struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatisticInterval          *uint32                        `protobuf:"varint,1,opt,name=statistic_interval,json=statisticInterval" json:"statistic_interval,omitempty"`
	Ipv4IgnorePrimarySub       *bool                          `protobuf:"varint,2,opt,name=ipv4_ignore_primary_sub,json=ipv4IgnorePrimarySub" json:"ipv4_ignore_primary_sub,omitempty"`
	Ipv4ConflictEnable         *Ifm_Global_Ipv4ConflictEnable `protobuf:"bytes,3,opt,name=ipv4_conflict_enable,json=ipv4ConflictEnable" json:"ipv4_conflict_enable,omitempty"`
	Ipv6ConflictEnable         *Ifm_Global_Ipv6ConflictEnable `protobuf:"bytes,4,opt,name=ipv6_conflict_enable,json=ipv6ConflictEnable" json:"ipv6_conflict_enable,omitempty"`
	SubInterfaceLinkTrapEnable *bool                          `protobuf:"varint,5,opt,name=sub_interface_link_trap_enable,json=subInterfaceLinkTrapEnable" json:"sub_interface_link_trap_enable,omitempty"`
}

func (x *Ifm_Global) Reset() {
	*x = Ifm_Global{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Global) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Global) ProtoMessage() {}

func (x *Ifm_Global) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Global.ProtoReflect.Descriptor instead.
func (*Ifm_Global) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Ifm_Global) GetStatisticInterval() uint32 {
	if x != nil && x.StatisticInterval != nil {
		return *x.StatisticInterval
	}
	return 0
}

func (x *Ifm_Global) GetIpv4IgnorePrimarySub() bool {
	if x != nil && x.Ipv4IgnorePrimarySub != nil {
		return *x.Ipv4IgnorePrimarySub
	}
	return false
}

func (x *Ifm_Global) GetIpv4ConflictEnable() *Ifm_Global_Ipv4ConflictEnable {
	if x != nil {
		return x.Ipv4ConflictEnable
	}
	return nil
}

func (x *Ifm_Global) GetIpv6ConflictEnable() *Ifm_Global_Ipv6ConflictEnable {
	if x != nil {
		return x.Ipv6ConflictEnable
	}
	return nil
}

func (x *Ifm_Global) GetSubInterfaceLinkTrapEnable() bool {
	if x != nil && x.SubInterfaceLinkTrapEnable != nil {
		return *x.SubInterfaceLinkTrapEnable
	}
	return false
}

type Ifm_Damp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxOff *bool           `protobuf:"varint,1,opt,name=tx_off,json=txOff" json:"tx_off,omitempty"`
	Level *Ifm_Damp_Level `protobuf:"bytes,2,opt,name=level" json:"level,omitempty"`
}

func (x *Ifm_Damp) Reset() {
	*x = Ifm_Damp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Damp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Damp) ProtoMessage() {}

func (x *Ifm_Damp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Damp.ProtoReflect.Descriptor instead.
func (*Ifm_Damp) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Ifm_Damp) GetTxOff() bool {
	if x != nil && x.TxOff != nil {
		return *x.TxOff
	}
	return false
}

func (x *Ifm_Damp) GetLevel() *Ifm_Damp_Level {
	if x != nil {
		return x.Level
	}
	return nil
}

type Ifm_StaticDimensionRanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StaticDimensionRange []*Ifm_StaticDimensionRanges_StaticDimensionRange `protobuf:"bytes,1,rep,name=static_dimension_range,json=staticDimensionRange" json:"static_dimension_range,omitempty"`
}

func (x *Ifm_StaticDimensionRanges) Reset() {
	*x = Ifm_StaticDimensionRanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_StaticDimensionRanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_StaticDimensionRanges) ProtoMessage() {}

func (x *Ifm_StaticDimensionRanges) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_StaticDimensionRanges.ProtoReflect.Descriptor instead.
func (*Ifm_StaticDimensionRanges) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Ifm_StaticDimensionRanges) GetStaticDimensionRange() []*Ifm_StaticDimensionRanges_StaticDimensionRange {
	if x != nil {
		return x.StaticDimensionRange
	}
	return nil
}

type Ifm_Ipv4InterfaceCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhysicalUpCount   *uint32 `protobuf:"varint,1,opt,name=physical_up_count,json=physicalUpCount" json:"physical_up_count,omitempty"`
	PhysicalDownCount *uint32 `protobuf:"varint,2,opt,name=physical_down_count,json=physicalDownCount" json:"physical_down_count,omitempty"`
	ProtocolUpCount   *uint32 `protobuf:"varint,3,opt,name=protocol_up_count,json=protocolUpCount" json:"protocol_up_count,omitempty"`
	ProtocolDownCount *uint32 `protobuf:"varint,4,opt,name=protocol_down_count,json=protocolDownCount" json:"protocol_down_count,omitempty"`
}

func (x *Ifm_Ipv4InterfaceCount) Reset() {
	*x = Ifm_Ipv4InterfaceCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Ipv4InterfaceCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Ipv4InterfaceCount) ProtoMessage() {}

func (x *Ifm_Ipv4InterfaceCount) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Ipv4InterfaceCount.ProtoReflect.Descriptor instead.
func (*Ifm_Ipv4InterfaceCount) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Ifm_Ipv4InterfaceCount) GetPhysicalUpCount() uint32 {
	if x != nil && x.PhysicalUpCount != nil {
		return *x.PhysicalUpCount
	}
	return 0
}

func (x *Ifm_Ipv4InterfaceCount) GetPhysicalDownCount() uint32 {
	if x != nil && x.PhysicalDownCount != nil {
		return *x.PhysicalDownCount
	}
	return 0
}

func (x *Ifm_Ipv4InterfaceCount) GetProtocolUpCount() uint32 {
	if x != nil && x.ProtocolUpCount != nil {
		return *x.ProtocolUpCount
	}
	return 0
}

func (x *Ifm_Ipv4InterfaceCount) GetProtocolDownCount() uint32 {
	if x != nil && x.ProtocolDownCount != nil {
		return *x.ProtocolDownCount
	}
	return 0
}

type Ifm_RemoteInterfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteInterface []*Ifm_RemoteInterfaces_RemoteInterface `protobuf:"bytes,1,rep,name=remote_interface,json=remoteInterface" json:"remote_interface,omitempty"`
}

func (x *Ifm_RemoteInterfaces) Reset() {
	*x = Ifm_RemoteInterfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_RemoteInterfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_RemoteInterfaces) ProtoMessage() {}

func (x *Ifm_RemoteInterfaces) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_RemoteInterfaces.ProtoReflect.Descriptor instead.
func (*Ifm_RemoteInterfaces) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Ifm_RemoteInterfaces) GetRemoteInterface() []*Ifm_RemoteInterfaces_RemoteInterface {
	if x != nil {
		return x.RemoteInterface
	}
	return nil
}

type Ifm_AutoRecoveryTimes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoRecoveryTime []*Ifm_AutoRecoveryTimes_AutoRecoveryTime `protobuf:"bytes,1,rep,name=auto_recovery_time,json=autoRecoveryTime" json:"auto_recovery_time,omitempty"`
}

func (x *Ifm_AutoRecoveryTimes) Reset() {
	*x = Ifm_AutoRecoveryTimes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_AutoRecoveryTimes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_AutoRecoveryTimes) ProtoMessage() {}

func (x *Ifm_AutoRecoveryTimes) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_AutoRecoveryTimes.ProtoReflect.Descriptor instead.
func (*Ifm_AutoRecoveryTimes) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 7}
}

func (x *Ifm_AutoRecoveryTimes) GetAutoRecoveryTime() []*Ifm_AutoRecoveryTimes_AutoRecoveryTime {
	if x != nil {
		return x.AutoRecoveryTime
	}
	return nil
}

type Ifm_HdlcDamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable          *bool                   `protobuf:"varint,1,opt,name=enable" json:"enable,omitempty"`
	DampLevel       *Ifm_HdlcDamp_DampLevel `protobuf:"varint,2,opt,name=damp_level,json=dampLevel,enum=huawei_ifm.Ifm_HdlcDamp_DampLevel" json:"damp_level,omitempty"`
	Suppress        *uint32                 `protobuf:"varint,3,opt,name=suppress" json:"suppress,omitempty"`
	Reuse           *uint32                 `protobuf:"varint,4,opt,name=reuse" json:"reuse,omitempty"`
	MaxSuppressTime *uint32                 `protobuf:"varint,5,opt,name=max_suppress_time,json=maxSuppressTime" json:"max_suppress_time,omitempty"`
	HalfLifeperiod  *uint32                 `protobuf:"varint,6,opt,name=half_lifeperiod,json=halfLifeperiod" json:"half_lifeperiod,omitempty"`
}

func (x *Ifm_HdlcDamp) Reset() {
	*x = Ifm_HdlcDamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_HdlcDamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_HdlcDamp) ProtoMessage() {}

func (x *Ifm_HdlcDamp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_HdlcDamp.ProtoReflect.Descriptor instead.
func (*Ifm_HdlcDamp) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 8}
}

func (x *Ifm_HdlcDamp) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *Ifm_HdlcDamp) GetDampLevel() Ifm_HdlcDamp_DampLevel {
	if x != nil && x.DampLevel != nil {
		return *x.DampLevel
	}
	return Ifm_HdlcDamp_DampLevel_LIGHT
}

func (x *Ifm_HdlcDamp) GetSuppress() uint32 {
	if x != nil && x.Suppress != nil {
		return *x.Suppress
	}
	return 0
}

func (x *Ifm_HdlcDamp) GetReuse() uint32 {
	if x != nil && x.Reuse != nil {
		return *x.Reuse
	}
	return 0
}

func (x *Ifm_HdlcDamp) GetMaxSuppressTime() uint32 {
	if x != nil && x.MaxSuppressTime != nil {
		return *x.MaxSuppressTime
	}
	return 0
}

func (x *Ifm_HdlcDamp) GetHalfLifeperiod() uint32 {
	if x != nil && x.HalfLifeperiod != nil {
		return *x.HalfLifeperiod
	}
	return 0
}

type Ifm_Interfaces_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                    *string                                           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Index                   *uint32                                           `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Class1                  *Ifm_Interfaces_Interface_Class1                  `protobuf:"varint,3,opt,name=class1,enum=huawei_ifm.Ifm_Interfaces_Interface_Class1" json:"class1,omitempty"`
	Type                    *Ifm_Interfaces_Interface_Type                    `protobuf:"varint,4,opt,name=type,enum=huawei_ifm.Ifm_Interfaces_Interface_Type" json:"type,omitempty"`
	Position                *string                                           `protobuf:"bytes,5,opt,name=position" json:"position,omitempty"`
	ParentName              *string                                           `protobuf:"bytes,6,opt,name=parent_name,json=parentName" json:"parent_name,omitempty"`
	Number                  *string                                           `protobuf:"bytes,7,opt,name=number" json:"number,omitempty"`
	Description             *string                                           `protobuf:"bytes,8,opt,name=description" json:"description,omitempty"`
	AggregationName         *string                                           `protobuf:"bytes,9,opt,name=aggregation_name,json=aggregationName" json:"aggregation_name,omitempty"`
	AdminStatus             *Ifm_Interfaces_Interface_AdminStatus             `protobuf:"varint,10,opt,name=admin_status,json=adminStatus,enum=huawei_ifm.Ifm_Interfaces_Interface_AdminStatus" json:"admin_status,omitempty"`
	LinkProtocol            *Ifm_Interfaces_Interface_LinkProtocol            `protobuf:"varint,11,opt,name=link_protocol,json=linkProtocol,enum=huawei_ifm.Ifm_Interfaces_Interface_LinkProtocol" json:"link_protocol,omitempty"`
	StatisticEnable         *bool                                             `protobuf:"varint,12,opt,name=statistic_enable,json=statisticEnable" json:"statistic_enable,omitempty"`
	Bandwidth               *uint32                                           `protobuf:"varint,13,opt,name=bandwidth" json:"bandwidth,omitempty"`
	Mtu                     *uint32                                           `protobuf:"varint,14,opt,name=mtu" json:"mtu,omitempty"`
	SpreadMtuFlag           *bool                                             `protobuf:"varint,15,opt,name=spread_mtu_flag,json=spreadMtuFlag" json:"spread_mtu_flag,omitempty"`
	StatisticInterval       *uint32                                           `protobuf:"varint,16,opt,name=statistic_interval,json=statisticInterval" json:"statistic_interval,omitempty"`
	VrfName                 *string                                           `protobuf:"bytes,17,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	MacAddress              *string                                           `protobuf:"bytes,18,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	Dynamic                 *Ifm_Interfaces_Interface_Dynamic                 `protobuf:"bytes,19,opt,name=dynamic" json:"dynamic,omitempty"`
	MibStatistics           *Ifm_Interfaces_Interface_MibStatistics           `protobuf:"bytes,20,opt,name=mib_statistics,json=mibStatistics" json:"mib_statistics,omitempty"`
	CommonStatistics        *Ifm_Interfaces_Interface_CommonStatistics        `protobuf:"bytes,21,opt,name=common_statistics,json=commonStatistics" json:"common_statistics,omitempty"`
	Trunk                   *Ifm_Interfaces_Interface_Trunk                   `protobuf:"bytes,22,opt,name=trunk" json:"trunk,omitempty"`
	Bas                     *Ifm_Interfaces_Interface_Bas                     `protobuf:"bytes,23,opt,name=bas" json:"bas,omitempty"`
	MulticastBas            *Ifm_Interfaces_Interface_MulticastBas            `protobuf:"bytes,24,opt,name=multicast_bas,json=multicastBas" json:"multicast_bas,omitempty"`
	Vrrp                    *Ifm_Interfaces_Interface_Vrrp                    `protobuf:"bytes,25,opt,name=vrrp" json:"vrrp,omitempty"`
	Rbs                     *Ifm_Interfaces_Interface_Rbs                     `protobuf:"bytes,26,opt,name=rbs" json:"rbs,omitempty"`
	Ethernet                *Ifm_Interfaces_Interface_Ethernet                `protobuf:"bytes,27,opt,name=ethernet" json:"ethernet,omitempty"`
	IsL2Switch              *bool                                             `protobuf:"varint,28,opt,name=is_l2_switch,json=isL2Switch" json:"is_l2_switch,omitempty"`
	RouterType              *Ifm_Interfaces_Interface_RouterType              `protobuf:"varint,29,opt,name=router_type,json=routerType,enum=huawei_ifm.Ifm_Interfaces_Interface_RouterType" json:"router_type,omitempty"`
	ClearIpDf               *bool                                             `protobuf:"varint,30,opt,name=clear_ip_df,json=clearIpDf" json:"clear_ip_df,omitempty"`
	LinkUpDownTrapEnable    *bool                                             `protobuf:"varint,31,opt,name=link_up_down_trap_enable,json=linkUpDownTrapEnable" json:"link_up_down_trap_enable,omitempty"`
	StatisticMode           *Ifm_Interfaces_Interface_StatisticMode           `protobuf:"varint,32,opt,name=statistic_mode,json=statisticMode,enum=huawei_ifm.Ifm_Interfaces_Interface_StatisticMode" json:"statistic_mode,omitempty"`
	L2ModeEnable            *bool                                             `protobuf:"varint,33,opt,name=l2_mode_enable,json=l2ModeEnable" json:"l2_mode_enable,omitempty"`
	DownDelayTime           *uint32                                           `protobuf:"varint,34,opt,name=down_delay_time,json=downDelayTime" json:"down_delay_time,omitempty"`
	TunnelProtocol          *Ifm_Interfaces_Interface_TunnelProtocol          `protobuf:"bytes,35,opt,name=tunnel_protocol,json=tunnelProtocol" json:"tunnel_protocol,omitempty"`
	BdifAttribute           *Ifm_Interfaces_Interface_BdifAttribute           `protobuf:"bytes,36,opt,name=bdif_attribute,json=bdifAttribute" json:"bdif_attribute,omitempty"`
	ArpSending              *Ifm_Interfaces_Interface_ArpSending              `protobuf:"bytes,37,opt,name=arp_sending,json=arpSending" json:"arp_sending,omitempty"`
	NdSending               *Ifm_Interfaces_Interface_NdSending               `protobuf:"bytes,38,opt,name=nd_sending,json=ndSending" json:"nd_sending,omitempty"`
	Bfd                     *Ifm_Interfaces_Interface_Bfd                     `protobuf:"bytes,39,opt,name=bfd" json:"bfd,omitempty"`
	NveAttribute            *Ifm_Interfaces_Interface_NveAttribute            `protobuf:"bytes,40,opt,name=nve_attribute,json=nveAttribute" json:"nve_attribute,omitempty"`
	Nvo3Gateway             *Ifm_Interfaces_Interface_Nvo3Gateway             `protobuf:"bytes,41,opt,name=nvo3_gateway,json=nvo3Gateway" json:"nvo3_gateway,omitempty"`
	ArpEntry                *Ifm_Interfaces_Interface_ArpEntry                `protobuf:"bytes,42,opt,name=arp_entry,json=arpEntry" json:"arp_entry,omitempty"`
	Evpn                    *Ifm_Interfaces_Interface_Evpn                    `protobuf:"bytes,43,opt,name=evpn" json:"evpn,omitempty"`
	Efm                     *Ifm_Interfaces_Interface_Efm                     `protobuf:"bytes,44,opt,name=efm" json:"efm,omitempty"`
	VlanifAttribute         *Ifm_Interfaces_Interface_VlanifAttribute         `protobuf:"bytes,45,opt,name=vlanif_attribute,json=vlanifAttribute" json:"vlanif_attribute,omitempty"`
	Lldp                    *Ifm_Interfaces_Interface_Lldp                    `protobuf:"bytes,47,opt,name=lldp" json:"lldp,omitempty"`
	ControlFlap             *Ifm_Interfaces_Interface_ControlFlap             `protobuf:"bytes,48,opt,name=control_flap,json=controlFlap" json:"control_flap,omitempty"`
	TrapThreshold           *Ifm_Interfaces_Interface_TrapThreshold           `protobuf:"bytes,49,opt,name=trap_threshold,json=trapThreshold" json:"trap_threshold,omitempty"`
	Damping                 *Ifm_Interfaces_Interface_Damping                 `protobuf:"bytes,50,opt,name=damping" json:"damping,omitempty"`
	Ipv4                    *Ifm_Interfaces_Interface_Ipv4                    `protobuf:"bytes,51,opt,name=ipv4" json:"ipv4,omitempty"`
	Ipv6                    *Ifm_Interfaces_Interface_Ipv6                    `protobuf:"bytes,52,opt,name=ipv6" json:"ipv6,omitempty"`
	VsName                  *string                                           `protobuf:"bytes,53,opt,name=vs_name,json=vsName" json:"vs_name,omitempty"`
	L2SwitchPortIndex       *uint32                                           `protobuf:"varint,54,opt,name=l2_switch_port_index,json=l2SwitchPortIndex" json:"l2_switch_port_index,omitempty"`
	ServiceType             *Ifm_Interfaces_Interface_ServiceType             `protobuf:"varint,55,opt,name=service_type,json=serviceType,enum=huawei_ifm.Ifm_Interfaces_Interface_ServiceType" json:"service_type,omitempty"`
	EncapsulationType       *Ifm_Interfaces_Interface_EncapsulationType       `protobuf:"varint,56,opt,name=encapsulation_type,json=encapsulationType,enum=huawei_ifm.Ifm_Interfaces_Interface_EncapsulationType" json:"encapsulation_type,omitempty"`
	Dhcpv6RelayIf           *Ifm_Interfaces_Interface_Dhcpv6RelayIf           `protobuf:"bytes,57,opt,name=dhcpv6_relay_if,json=dhcpv6RelayIf" json:"dhcpv6_relay_if,omitempty"`
	NetworkLayerStatus      *Ifm_Interfaces_Interface_NetworkLayerStatus      `protobuf:"varint,58,opt,name=network_layer_status,json=networkLayerStatus,enum=huawei_ifm.Ifm_Interfaces_Interface_NetworkLayerStatus" json:"network_layer_status,omitempty"`
	ProtocolUpDelayTime     *uint32                                           `protobuf:"varint,59,opt,name=protocol_up_delay_time,json=protocolUpDelayTime" json:"protocol_up_delay_time,omitempty"`
	DampState               *Ifm_Interfaces_Interface_DampState               `protobuf:"bytes,60,opt,name=damp_state,json=dampState" json:"damp_state,omitempty"`
	ErrorDown               *Ifm_Interfaces_Interface_ErrorDown               `protobuf:"bytes,61,opt,name=error_down,json=errorDown" json:"error_down,omitempty"`
	ArpStatusDetect         *Ifm_Interfaces_Interface_ArpStatusDetect         `protobuf:"bytes,62,opt,name=arp_status_detect,json=arpStatusDetect" json:"arp_status_detect,omitempty"`
	ArpPortSecurity         *Ifm_Interfaces_Interface_ArpPortSecurity         `protobuf:"bytes,63,opt,name=arp_port_security,json=arpPortSecurity" json:"arp_port_security,omitempty"`
	Nve                     *Ifm_Interfaces_Interface_Nve                     `protobuf:"bytes,64,opt,name=nve" json:"nve,omitempty"`
	DhcpRelayAttribute      *Ifm_Interfaces_Interface_DhcpRelayAttribute      `protobuf:"bytes,65,opt,name=dhcp_relay_attribute,json=dhcpRelayAttribute" json:"dhcp_relay_attribute,omitempty"`
	DhcpRelayIf             *Ifm_Interfaces_Interface_DhcpRelayIf             `protobuf:"bytes,66,opt,name=dhcp_relay_if,json=dhcpRelayIf" json:"dhcp_relay_if,omitempty"`
	DhcpIf                  *Ifm_Interfaces_Interface_DhcpIf                  `protobuf:"bytes,67,opt,name=dhcp_if,json=dhcpIf" json:"dhcp_if,omitempty"`
	DhcpClientIf            *Ifm_Interfaces_Interface_DhcpClientIf            `protobuf:"bytes,68,opt,name=dhcp_client_if,json=dhcpClientIf" json:"dhcp_client_if,omitempty"`
	DhcpSnoopingIf          *Ifm_Interfaces_Interface_DhcpSnoopingIf          `protobuf:"bytes,69,opt,name=dhcp_snooping_if,json=dhcpSnoopingIf" json:"dhcp_snooping_if,omitempty"`
	Dhcpv6RelayAttribute    *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute    `protobuf:"bytes,70,opt,name=dhcpv6_relay_attribute,json=dhcpv6RelayAttribute" json:"dhcpv6_relay_attribute,omitempty"`
	If_8021PPriority        *Ifm_Interfaces_Interface_If8021PPriority         `protobuf:"bytes,71,opt,name=if_8021p_priority,json=if8021pPriority" json:"if_8021p_priority,omitempty"`
	ManagementPlaneDefendIf *Ifm_Interfaces_Interface_ManagementPlaneDefendIf `protobuf:"bytes,72,opt,name=management_plane_defend_if,json=managementPlaneDefendIf" json:"management_plane_defend_if,omitempty"`
	FrEncapsulation         *Ifm_Interfaces_Interface_FrEncapsulation         `protobuf:"bytes,73,opt,name=fr_encapsulation,json=frEncapsulation" json:"fr_encapsulation,omitempty"`
	TrackMonitorGroup       *Ifm_Interfaces_Interface_TrackMonitorGroup       `protobuf:"bytes,74,opt,name=track_monitor_group,json=trackMonitorGroup" json:"track_monitor_group,omitempty"`
	Nvo3VtepStatistics      *Ifm_Interfaces_Interface_Nvo3VtepStatistics      `protobuf:"bytes,75,opt,name=nvo3_vtep_statistics,json=nvo3VtepStatistics" json:"nvo3_vtep_statistics,omitempty"`
	IfIcmpSecuritys         *Ifm_Interfaces_Interface_IfIcmpSecuritys         `protobuf:"bytes,76,opt,name=if_icmp_securitys,json=ifIcmpSecuritys" json:"if_icmp_securitys,omitempty"`
	IfIpOptSecuritys        *Ifm_Interfaces_Interface_IfIpOptSecuritys        `protobuf:"bytes,77,opt,name=if_ip_opt_securitys,json=ifIpOptSecuritys" json:"if_ip_opt_securitys,omitempty"`
	IpVerifySrcAddr         *Ifm_Interfaces_Interface_IpVerifySrcAddr         `protobuf:"bytes,78,opt,name=ip_verify_src_addr,json=ipVerifySrcAddr" json:"ip_verify_src_addr,omitempty"`
	IpFwdBroadcast          *Ifm_Interfaces_Interface_IpFwdBroadcast          `protobuf:"bytes,79,opt,name=ip_fwd_broadcast,json=ipFwdBroadcast" json:"ip_fwd_broadcast,omitempty"`
}

func (x *Ifm_Interfaces_Interface) Reset() {
	*x = Ifm_Interfaces_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Ifm_Interfaces_Interface) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *Ifm_Interfaces_Interface) GetClass1() Ifm_Interfaces_Interface_Class1 {
	if x != nil && x.Class1 != nil {
		return *x.Class1
	}
	return Ifm_Interfaces_Interface_Class_MAINX_INTERFACE
}

func (x *Ifm_Interfaces_Interface) GetType() Ifm_Interfaces_Interface_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Ifm_Interfaces_Interface_Type_ETHERNET
}

func (x *Ifm_Interfaces_Interface) GetPosition() string {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetParentName() string {
	if x != nil && x.ParentName != nil {
		return *x.ParentName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetNumber() string {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetAggregationName() string {
	if x != nil && x.AggregationName != nil {
		return *x.AggregationName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetAdminStatus() Ifm_Interfaces_Interface_AdminStatus {
	if x != nil && x.AdminStatus != nil {
		return *x.AdminStatus
	}
	return Ifm_Interfaces_Interface_AdminStatus_DOWN
}

func (x *Ifm_Interfaces_Interface) GetLinkProtocol() Ifm_Interfaces_Interface_LinkProtocol {
	if x != nil && x.LinkProtocol != nil {
		return *x.LinkProtocol
	}
	return Ifm_Interfaces_Interface_LinkProtocol_ETHERNET
}

func (x *Ifm_Interfaces_Interface) GetStatisticEnable() bool {
	if x != nil && x.StatisticEnable != nil {
		return *x.StatisticEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface) GetBandwidth() uint32 {
	if x != nil && x.Bandwidth != nil {
		return *x.Bandwidth
	}
	return 0
}

func (x *Ifm_Interfaces_Interface) GetMtu() uint32 {
	if x != nil && x.Mtu != nil {
		return *x.Mtu
	}
	return 0
}

func (x *Ifm_Interfaces_Interface) GetSpreadMtuFlag() bool {
	if x != nil && x.SpreadMtuFlag != nil {
		return *x.SpreadMtuFlag
	}
	return false
}

func (x *Ifm_Interfaces_Interface) GetStatisticInterval() uint32 {
	if x != nil && x.StatisticInterval != nil {
		return *x.StatisticInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface) GetVrfName() string {
	if x != nil && x.VrfName != nil {
		return *x.VrfName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetMacAddress() string {
	if x != nil && x.MacAddress != nil {
		return *x.MacAddress
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetDynamic() *Ifm_Interfaces_Interface_Dynamic {
	if x != nil {
		return x.Dynamic
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetMibStatistics() *Ifm_Interfaces_Interface_MibStatistics {
	if x != nil {
		return x.MibStatistics
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetCommonStatistics() *Ifm_Interfaces_Interface_CommonStatistics {
	if x != nil {
		return x.CommonStatistics
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetTrunk() *Ifm_Interfaces_Interface_Trunk {
	if x != nil {
		return x.Trunk
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetBas() *Ifm_Interfaces_Interface_Bas {
	if x != nil {
		return x.Bas
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetMulticastBas() *Ifm_Interfaces_Interface_MulticastBas {
	if x != nil {
		return x.MulticastBas
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetVrrp() *Ifm_Interfaces_Interface_Vrrp {
	if x != nil {
		return x.Vrrp
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetRbs() *Ifm_Interfaces_Interface_Rbs {
	if x != nil {
		return x.Rbs
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetEthernet() *Ifm_Interfaces_Interface_Ethernet {
	if x != nil {
		return x.Ethernet
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIsL2Switch() bool {
	if x != nil && x.IsL2Switch != nil {
		return *x.IsL2Switch
	}
	return false
}

func (x *Ifm_Interfaces_Interface) GetRouterType() Ifm_Interfaces_Interface_RouterType {
	if x != nil && x.RouterType != nil {
		return *x.RouterType
	}
	return Ifm_Interfaces_Interface_RouterType_PTOP
}

func (x *Ifm_Interfaces_Interface) GetClearIpDf() bool {
	if x != nil && x.ClearIpDf != nil {
		return *x.ClearIpDf
	}
	return false
}

func (x *Ifm_Interfaces_Interface) GetLinkUpDownTrapEnable() bool {
	if x != nil && x.LinkUpDownTrapEnable != nil {
		return *x.LinkUpDownTrapEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface) GetStatisticMode() Ifm_Interfaces_Interface_StatisticMode {
	if x != nil && x.StatisticMode != nil {
		return *x.StatisticMode
	}
	return Ifm_Interfaces_Interface_INVALID_ENUM_VALUE_StatisticMode
}

func (x *Ifm_Interfaces_Interface) GetL2ModeEnable() bool {
	if x != nil && x.L2ModeEnable != nil {
		return *x.L2ModeEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface) GetDownDelayTime() uint32 {
	if x != nil && x.DownDelayTime != nil {
		return *x.DownDelayTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface) GetTunnelProtocol() *Ifm_Interfaces_Interface_TunnelProtocol {
	if x != nil {
		return x.TunnelProtocol
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetBdifAttribute() *Ifm_Interfaces_Interface_BdifAttribute {
	if x != nil {
		return x.BdifAttribute
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetArpSending() *Ifm_Interfaces_Interface_ArpSending {
	if x != nil {
		return x.ArpSending
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetNdSending() *Ifm_Interfaces_Interface_NdSending {
	if x != nil {
		return x.NdSending
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetBfd() *Ifm_Interfaces_Interface_Bfd {
	if x != nil {
		return x.Bfd
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetNveAttribute() *Ifm_Interfaces_Interface_NveAttribute {
	if x != nil {
		return x.NveAttribute
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetNvo3Gateway() *Ifm_Interfaces_Interface_Nvo3Gateway {
	if x != nil {
		return x.Nvo3Gateway
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetArpEntry() *Ifm_Interfaces_Interface_ArpEntry {
	if x != nil {
		return x.ArpEntry
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetEvpn() *Ifm_Interfaces_Interface_Evpn {
	if x != nil {
		return x.Evpn
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetEfm() *Ifm_Interfaces_Interface_Efm {
	if x != nil {
		return x.Efm
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetVlanifAttribute() *Ifm_Interfaces_Interface_VlanifAttribute {
	if x != nil {
		return x.VlanifAttribute
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetLldp() *Ifm_Interfaces_Interface_Lldp {
	if x != nil {
		return x.Lldp
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetControlFlap() *Ifm_Interfaces_Interface_ControlFlap {
	if x != nil {
		return x.ControlFlap
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetTrapThreshold() *Ifm_Interfaces_Interface_TrapThreshold {
	if x != nil {
		return x.TrapThreshold
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetDamping() *Ifm_Interfaces_Interface_Damping {
	if x != nil {
		return x.Damping
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIpv4() *Ifm_Interfaces_Interface_Ipv4 {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIpv6() *Ifm_Interfaces_Interface_Ipv6 {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetVsName() string {
	if x != nil && x.VsName != nil {
		return *x.VsName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface) GetL2SwitchPortIndex() uint32 {
	if x != nil && x.L2SwitchPortIndex != nil {
		return *x.L2SwitchPortIndex
	}
	return 0
}

func (x *Ifm_Interfaces_Interface) GetServiceType() Ifm_Interfaces_Interface_ServiceType {
	if x != nil && x.ServiceType != nil {
		return *x.ServiceType
	}
	return Ifm_Interfaces_Interface_ServiceType_NONE
}

func (x *Ifm_Interfaces_Interface) GetEncapsulationType() Ifm_Interfaces_Interface_EncapsulationType {
	if x != nil && x.EncapsulationType != nil {
		return *x.EncapsulationType
	}
	return Ifm_Interfaces_Interface_EncapsulationType_VLANX_TYPE
}

func (x *Ifm_Interfaces_Interface) GetDhcpv6RelayIf() *Ifm_Interfaces_Interface_Dhcpv6RelayIf {
	if x != nil {
		return x.Dhcpv6RelayIf
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetNetworkLayerStatus() Ifm_Interfaces_Interface_NetworkLayerStatus {
	if x != nil && x.NetworkLayerStatus != nil {
		return *x.NetworkLayerStatus
	}
	return Ifm_Interfaces_Interface_NetworkLayerStatus_IPV4X_IPV6X_UP
}

func (x *Ifm_Interfaces_Interface) GetProtocolUpDelayTime() uint32 {
	if x != nil && x.ProtocolUpDelayTime != nil {
		return *x.ProtocolUpDelayTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface) GetDampState() *Ifm_Interfaces_Interface_DampState {
	if x != nil {
		return x.DampState
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetErrorDown() *Ifm_Interfaces_Interface_ErrorDown {
	if x != nil {
		return x.ErrorDown
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetArpStatusDetect() *Ifm_Interfaces_Interface_ArpStatusDetect {
	if x != nil {
		return x.ArpStatusDetect
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetArpPortSecurity() *Ifm_Interfaces_Interface_ArpPortSecurity {
	if x != nil {
		return x.ArpPortSecurity
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetNve() *Ifm_Interfaces_Interface_Nve {
	if x != nil {
		return x.Nve
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetDhcpRelayAttribute() *Ifm_Interfaces_Interface_DhcpRelayAttribute {
	if x != nil {
		return x.DhcpRelayAttribute
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetDhcpRelayIf() *Ifm_Interfaces_Interface_DhcpRelayIf {
	if x != nil {
		return x.DhcpRelayIf
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetDhcpIf() *Ifm_Interfaces_Interface_DhcpIf {
	if x != nil {
		return x.DhcpIf
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetDhcpClientIf() *Ifm_Interfaces_Interface_DhcpClientIf {
	if x != nil {
		return x.DhcpClientIf
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetDhcpSnoopingIf() *Ifm_Interfaces_Interface_DhcpSnoopingIf {
	if x != nil {
		return x.DhcpSnoopingIf
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetDhcpv6RelayAttribute() *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute {
	if x != nil {
		return x.Dhcpv6RelayAttribute
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIf_8021PPriority() *Ifm_Interfaces_Interface_If8021PPriority {
	if x != nil {
		return x.If_8021PPriority
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetManagementPlaneDefendIf() *Ifm_Interfaces_Interface_ManagementPlaneDefendIf {
	if x != nil {
		return x.ManagementPlaneDefendIf
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetFrEncapsulation() *Ifm_Interfaces_Interface_FrEncapsulation {
	if x != nil {
		return x.FrEncapsulation
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetTrackMonitorGroup() *Ifm_Interfaces_Interface_TrackMonitorGroup {
	if x != nil {
		return x.TrackMonitorGroup
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetNvo3VtepStatistics() *Ifm_Interfaces_Interface_Nvo3VtepStatistics {
	if x != nil {
		return x.Nvo3VtepStatistics
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIfIcmpSecuritys() *Ifm_Interfaces_Interface_IfIcmpSecuritys {
	if x != nil {
		return x.IfIcmpSecuritys
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIfIpOptSecuritys() *Ifm_Interfaces_Interface_IfIpOptSecuritys {
	if x != nil {
		return x.IfIpOptSecuritys
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIpVerifySrcAddr() *Ifm_Interfaces_Interface_IpVerifySrcAddr {
	if x != nil {
		return x.IpVerifySrcAddr
	}
	return nil
}

func (x *Ifm_Interfaces_Interface) GetIpFwdBroadcast() *Ifm_Interfaces_Interface_IpFwdBroadcast {
	if x != nil {
		return x.IpFwdBroadcast
	}
	return nil
}

type Ifm_Interfaces_Interface_Dynamic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperStatus         *Ifm_Interfaces_Interface_Dynamic_OperStatus       `protobuf:"varint,1,opt,name=oper_status,json=operStatus,enum=huawei_ifm.Ifm_Interfaces_Interface_Dynamic_OperStatus" json:"oper_status,omitempty"`
	PhysicalStatus     *Ifm_Interfaces_Interface_Dynamic_PhysicalStatus   `protobuf:"varint,2,opt,name=physical_status,json=physicalStatus,enum=huawei_ifm.Ifm_Interfaces_Interface_Dynamic_PhysicalStatus" json:"physical_status,omitempty"`
	LinkStatus         *Ifm_Interfaces_Interface_Dynamic_LinkStatus       `protobuf:"varint,3,opt,name=link_status,json=linkStatus,enum=huawei_ifm.Ifm_Interfaces_Interface_Dynamic_LinkStatus" json:"link_status,omitempty"`
	Mtu                *uint32                                            `protobuf:"varint,4,opt,name=mtu" json:"mtu,omitempty"`
	Bandwidth          *uint64                                            `protobuf:"varint,5,opt,name=bandwidth" json:"bandwidth,omitempty"`
	Ipv4Status         *Ifm_Interfaces_Interface_Dynamic_Ipv4Status       `protobuf:"varint,6,opt,name=ipv4_status,json=ipv4Status,enum=huawei_ifm.Ifm_Interfaces_Interface_Dynamic_Ipv4Status" json:"ipv4_status,omitempty"`
	Ipv6Status         *Ifm_Interfaces_Interface_Dynamic_Ipv6Status       `protobuf:"varint,7,opt,name=ipv6_status,json=ipv6Status,enum=huawei_ifm.Ifm_Interfaces_Interface_Dynamic_Ipv6Status" json:"ipv6_status,omitempty"`
	IsControlFlapDamp  *bool                                              `protobuf:"varint,8,opt,name=is_control_flap_damp,json=isControlFlapDamp" json:"is_control_flap_damp,omitempty"`
	MacAddress         *string                                            `protobuf:"bytes,9,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	LineProtocolUpTime *string                                            `protobuf:"bytes,10,opt,name=line_protocol_up_time,json=lineProtocolUpTime" json:"line_protocol_up_time,omitempty"`
	IsOffline          *bool                                              `protobuf:"varint,11,opt,name=is_offline,json=isOffline" json:"is_offline,omitempty"`
	LinkQualityGrade   *Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade `protobuf:"varint,12,opt,name=link_quality_grade,json=linkQualityGrade,enum=huawei_ifm.Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade" json:"link_quality_grade,omitempty"`
	SubIfCounts        *uint32                                            `protobuf:"varint,13,opt,name=sub_if_counts,json=subIfCounts" json:"sub_if_counts,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Dynamic) Reset() {
	*x = Ifm_Interfaces_Interface_Dynamic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Dynamic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Dynamic) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Dynamic) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dynamic.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Dynamic) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Dynamic) GetOperStatus() Ifm_Interfaces_Interface_Dynamic_OperStatus {
	if x != nil && x.OperStatus != nil {
		return *x.OperStatus
	}
	return Ifm_Interfaces_Interface_Dynamic_OperStatus_DOWN
}

func (x *Ifm_Interfaces_Interface_Dynamic) GetPhysicalStatus() Ifm_Interfaces_Interface_Dynamic_PhysicalStatus {
	if x != nil && x.PhysicalStatus != nil {
		return *x.PhysicalStatus
	}
	return Ifm_Interfaces_Interface_Dynamic_PhysicalStatus_DOWN
}

func (x *Ifm_Interfaces_Interface_Dynamic) GetLinkStatus() Ifm_Interfaces_Interface_Dynamic_LinkStatus {
	if x != nil && x.LinkStatus != nil {
		return *x.LinkStatus
	}
	return Ifm_Interfaces_Interface_Dynamic_LinkStatus_DOWN
}

func (x *Ifm_Interfaces_Interface_Dynamic) GetMtu() uint32 {
	if x != nil && x.Mtu != nil {
		return *x.Mtu
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Dynamic) GetBandwidth() uint64 {
	if x != nil && x.Bandwidth != nil {
		return *x.Bandwidth
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Dynamic) GetIpv4Status() Ifm_Interfaces_Interface_Dynamic_Ipv4Status {
	if x != nil && x.Ipv4Status != nil {
		return *x.Ipv4Status
	}
	return Ifm_Interfaces_Interface_Dynamic_Ipv4Status_DOWN
}

func (x *Ifm_Interfaces_Interface_Dynamic) GetIpv6Status() Ifm_Interfaces_Interface_Dynamic_Ipv6Status {
	if x != nil && x.Ipv6Status != nil {
		return *x.Ipv6Status
	}
	return Ifm_Interfaces_Interface_Dynamic_Ipv6Status_DOWN
}

func (x *Ifm_Interfaces_Interface_Dynamic) GetIsControlFlapDamp() bool {
	if x != nil && x.IsControlFlapDamp != nil {
		return *x.IsControlFlapDamp
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Dynamic) GetMacAddress() string {
	if x != nil && x.MacAddress != nil {
		return *x.MacAddress
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Dynamic) GetLineProtocolUpTime() string {
	if x != nil && x.LineProtocolUpTime != nil {
		return *x.LineProtocolUpTime
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Dynamic) GetIsOffline() bool {
	if x != nil && x.IsOffline != nil {
		return *x.IsOffline
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Dynamic) GetLinkQualityGrade() Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade {
	if x != nil && x.LinkQualityGrade != nil {
		return *x.LinkQualityGrade
	}
	return Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade_GOOD
}

func (x *Ifm_Interfaces_Interface_Dynamic) GetSubIfCounts() uint32 {
	if x != nil && x.SubIfCounts != nil {
		return *x.SubIfCounts
	}
	return 0
}

type Ifm_Interfaces_Interface_MibStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiveByte            *uint64 `protobuf:"varint,1,opt,name=receive_byte,json=receiveByte" json:"receive_byte,omitempty"`
	SendByte               *uint64 `protobuf:"varint,2,opt,name=send_byte,json=sendByte" json:"send_byte,omitempty"`
	ReceivePacket          *uint64 `protobuf:"varint,3,opt,name=receive_packet,json=receivePacket" json:"receive_packet,omitempty"`
	SendPacket             *uint64 `protobuf:"varint,4,opt,name=send_packet,json=sendPacket" json:"send_packet,omitempty"`
	ReceiveUnicastPacket   *uint64 `protobuf:"varint,5,opt,name=receive_unicast_packet,json=receiveUnicastPacket" json:"receive_unicast_packet,omitempty"`
	ReceiveMulticastPacket *uint64 `protobuf:"varint,6,opt,name=receive_multicast_packet,json=receiveMulticastPacket" json:"receive_multicast_packet,omitempty"`
	ReceiveBroadPacket     *uint64 `protobuf:"varint,7,opt,name=receive_broad_packet,json=receiveBroadPacket" json:"receive_broad_packet,omitempty"`
	SendUnicastPacket      *uint64 `protobuf:"varint,8,opt,name=send_unicast_packet,json=sendUnicastPacket" json:"send_unicast_packet,omitempty"`
	SendMulticastPacket    *uint64 `protobuf:"varint,9,opt,name=send_multicast_packet,json=sendMulticastPacket" json:"send_multicast_packet,omitempty"`
	SendBroadPacket        *uint64 `protobuf:"varint,10,opt,name=send_broad_packet,json=sendBroadPacket" json:"send_broad_packet,omitempty"`
	ReceiveErrorPacket     *uint64 `protobuf:"varint,11,opt,name=receive_error_packet,json=receiveErrorPacket" json:"receive_error_packet,omitempty"`
	ReceiveDropPacket      *uint64 `protobuf:"varint,12,opt,name=receive_drop_packet,json=receiveDropPacket" json:"receive_drop_packet,omitempty"`
	SendErrorPacket        *uint64 `protobuf:"varint,13,opt,name=send_error_packet,json=sendErrorPacket" json:"send_error_packet,omitempty"`
	SendDropPacket         *uint64 `protobuf:"varint,14,opt,name=send_drop_packet,json=sendDropPacket" json:"send_drop_packet,omitempty"`
}

func (x *Ifm_Interfaces_Interface_MibStatistics) Reset() {
	*x = Ifm_Interfaces_Interface_MibStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_MibStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_MibStatistics) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_MibStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_MibStatistics.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_MibStatistics) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetReceiveByte() uint64 {
	if x != nil && x.ReceiveByte != nil {
		return *x.ReceiveByte
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetSendByte() uint64 {
	if x != nil && x.SendByte != nil {
		return *x.SendByte
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetReceivePacket() uint64 {
	if x != nil && x.ReceivePacket != nil {
		return *x.ReceivePacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetSendPacket() uint64 {
	if x != nil && x.SendPacket != nil {
		return *x.SendPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetReceiveUnicastPacket() uint64 {
	if x != nil && x.ReceiveUnicastPacket != nil {
		return *x.ReceiveUnicastPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetReceiveMulticastPacket() uint64 {
	if x != nil && x.ReceiveMulticastPacket != nil {
		return *x.ReceiveMulticastPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetReceiveBroadPacket() uint64 {
	if x != nil && x.ReceiveBroadPacket != nil {
		return *x.ReceiveBroadPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetSendUnicastPacket() uint64 {
	if x != nil && x.SendUnicastPacket != nil {
		return *x.SendUnicastPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetSendMulticastPacket() uint64 {
	if x != nil && x.SendMulticastPacket != nil {
		return *x.SendMulticastPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetSendBroadPacket() uint64 {
	if x != nil && x.SendBroadPacket != nil {
		return *x.SendBroadPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetReceiveErrorPacket() uint64 {
	if x != nil && x.ReceiveErrorPacket != nil {
		return *x.ReceiveErrorPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetReceiveDropPacket() uint64 {
	if x != nil && x.ReceiveDropPacket != nil {
		return *x.ReceiveDropPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetSendErrorPacket() uint64 {
	if x != nil && x.SendErrorPacket != nil {
		return *x.SendErrorPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MibStatistics) GetSendDropPacket() uint64 {
	if x != nil && x.SendDropPacket != nil {
		return *x.SendDropPacket
	}
	return 0
}

type Ifm_Interfaces_Interface_CommonStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatiInterval              *uint32 `protobuf:"varint,1,opt,name=stati_interval,json=statiInterval" json:"stati_interval,omitempty"`
	InByteRate                 *uint64 `protobuf:"varint,2,opt,name=in_byte_rate,json=inByteRate" json:"in_byte_rate,omitempty"`
	InBitRate                  *uint64 `protobuf:"varint,3,opt,name=in_bit_rate,json=inBitRate" json:"in_bit_rate,omitempty"`
	InPacketRate               *uint64 `protobuf:"varint,4,opt,name=in_packet_rate,json=inPacketRate" json:"in_packet_rate,omitempty"`
	InUseRate                  *string `protobuf:"bytes,5,opt,name=in_use_rate,json=inUseRate" json:"in_use_rate,omitempty"`
	OutByteRate                *uint64 `protobuf:"varint,6,opt,name=out_byte_rate,json=outByteRate" json:"out_byte_rate,omitempty"`
	OutBitRate                 *uint64 `protobuf:"varint,7,opt,name=out_bit_rate,json=outBitRate" json:"out_bit_rate,omitempty"`
	OutPacketRate              *uint64 `protobuf:"varint,8,opt,name=out_packet_rate,json=outPacketRate" json:"out_packet_rate,omitempty"`
	OutUseRate                 *string `protobuf:"bytes,9,opt,name=out_use_rate,json=outUseRate" json:"out_use_rate,omitempty"`
	ReceiveByte                *uint64 `protobuf:"varint,10,opt,name=receive_byte,json=receiveByte" json:"receive_byte,omitempty"`
	SendByte                   *uint64 `protobuf:"varint,11,opt,name=send_byte,json=sendByte" json:"send_byte,omitempty"`
	ReceivePacket              *uint64 `protobuf:"varint,12,opt,name=receive_packet,json=receivePacket" json:"receive_packet,omitempty"`
	SendPacket                 *uint64 `protobuf:"varint,13,opt,name=send_packet,json=sendPacket" json:"send_packet,omitempty"`
	ReceiveUnicastPacket       *uint64 `protobuf:"varint,14,opt,name=receive_unicast_packet,json=receiveUnicastPacket" json:"receive_unicast_packet,omitempty"`
	ReceiveMulticastPacket     *uint64 `protobuf:"varint,15,opt,name=receive_multicast_packet,json=receiveMulticastPacket" json:"receive_multicast_packet,omitempty"`
	ReceiveBroadPacket         *uint64 `protobuf:"varint,16,opt,name=receive_broad_packet,json=receiveBroadPacket" json:"receive_broad_packet,omitempty"`
	SendUnicastPacket          *uint64 `protobuf:"varint,17,opt,name=send_unicast_packet,json=sendUnicastPacket" json:"send_unicast_packet,omitempty"`
	SendMulticastPacket        *uint64 `protobuf:"varint,18,opt,name=send_multicast_packet,json=sendMulticastPacket" json:"send_multicast_packet,omitempty"`
	SendBroadPacket            *uint64 `protobuf:"varint,19,opt,name=send_broad_packet,json=sendBroadPacket" json:"send_broad_packet,omitempty"`
	ReceiveErrorPacket         *uint64 `protobuf:"varint,20,opt,name=receive_error_packet,json=receiveErrorPacket" json:"receive_error_packet,omitempty"`
	ReceiveDropPacket          *uint64 `protobuf:"varint,21,opt,name=receive_drop_packet,json=receiveDropPacket" json:"receive_drop_packet,omitempty"`
	SendErrorPacket            *uint64 `protobuf:"varint,22,opt,name=send_error_packet,json=sendErrorPacket" json:"send_error_packet,omitempty"`
	SendDropPacket             *uint64 `protobuf:"varint,23,opt,name=send_drop_packet,json=sendDropPacket" json:"send_drop_packet,omitempty"`
	SendUnicastBit             *uint64 `protobuf:"varint,24,opt,name=send_unicast_bit,json=sendUnicastBit" json:"send_unicast_bit,omitempty"`
	ReceiveUnicastBit          *uint64 `protobuf:"varint,25,opt,name=receive_unicast_bit,json=receiveUnicastBit" json:"receive_unicast_bit,omitempty"`
	SendMulticastBit           *uint64 `protobuf:"varint,26,opt,name=send_multicast_bit,json=sendMulticastBit" json:"send_multicast_bit,omitempty"`
	ReceiveMulticastBit        *uint64 `protobuf:"varint,27,opt,name=receive_multicast_bit,json=receiveMulticastBit" json:"receive_multicast_bit,omitempty"`
	SendBroadBit               *uint64 `protobuf:"varint,28,opt,name=send_broad_bit,json=sendBroadBit" json:"send_broad_bit,omitempty"`
	ReceiveBroadBit            *uint64 `protobuf:"varint,29,opt,name=receive_broad_bit,json=receiveBroadBit" json:"receive_broad_bit,omitempty"`
	SendUnicastBitRate         *uint64 `protobuf:"varint,30,opt,name=send_unicast_bit_rate,json=sendUnicastBitRate" json:"send_unicast_bit_rate,omitempty"`
	ReceiveUnicastBitRate      *uint64 `protobuf:"varint,31,opt,name=receive_unicast_bit_rate,json=receiveUnicastBitRate" json:"receive_unicast_bit_rate,omitempty"`
	SendMulticastBitRate       *uint64 `protobuf:"varint,32,opt,name=send_multicast_bit_rate,json=sendMulticastBitRate" json:"send_multicast_bit_rate,omitempty"`
	ReceiveMulticastBitRate    *uint64 `protobuf:"varint,33,opt,name=receive_multicast_bit_rate,json=receiveMulticastBitRate" json:"receive_multicast_bit_rate,omitempty"`
	SendBroadBitRate           *uint64 `protobuf:"varint,34,opt,name=send_broad_bit_rate,json=sendBroadBitRate" json:"send_broad_bit_rate,omitempty"`
	ReceiveBroadBitRate        *uint64 `protobuf:"varint,35,opt,name=receive_broad_bit_rate,json=receiveBroadBitRate" json:"receive_broad_bit_rate,omitempty"`
	SendUnicastPacketRate      *uint64 `protobuf:"varint,36,opt,name=send_unicast_packet_rate,json=sendUnicastPacketRate" json:"send_unicast_packet_rate,omitempty"`
	ReceiveUnicastPacketRate   *uint64 `protobuf:"varint,37,opt,name=receive_unicast_packet_rate,json=receiveUnicastPacketRate" json:"receive_unicast_packet_rate,omitempty"`
	SendMulticastPacketRate    *uint64 `protobuf:"varint,38,opt,name=send_multicast_packet_rate,json=sendMulticastPacketRate" json:"send_multicast_packet_rate,omitempty"`
	ReceiveMulticastPacketRate *uint64 `protobuf:"varint,39,opt,name=receive_multicast_packet_rate,json=receiveMulticastPacketRate" json:"receive_multicast_packet_rate,omitempty"`
	SendBroadcastPacketRate    *uint64 `protobuf:"varint,40,opt,name=send_broadcast_packet_rate,json=sendBroadcastPacketRate" json:"send_broadcast_packet_rate,omitempty"`
	ReceiveBroadcastPacketRate *uint64 `protobuf:"varint,41,opt,name=receive_broadcast_packet_rate,json=receiveBroadcastPacketRate" json:"receive_broadcast_packet_rate,omitempty"`
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) Reset() {
	*x = Ifm_Interfaces_Interface_CommonStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_CommonStatistics) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_CommonStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_CommonStatistics.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_CommonStatistics) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 2}
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetStatiInterval() uint32 {
	if x != nil && x.StatiInterval != nil {
		return *x.StatiInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetInByteRate() uint64 {
	if x != nil && x.InByteRate != nil {
		return *x.InByteRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetInBitRate() uint64 {
	if x != nil && x.InBitRate != nil {
		return *x.InBitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetInPacketRate() uint64 {
	if x != nil && x.InPacketRate != nil {
		return *x.InPacketRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetInUseRate() string {
	if x != nil && x.InUseRate != nil {
		return *x.InUseRate
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetOutByteRate() uint64 {
	if x != nil && x.OutByteRate != nil {
		return *x.OutByteRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetOutBitRate() uint64 {
	if x != nil && x.OutBitRate != nil {
		return *x.OutBitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetOutPacketRate() uint64 {
	if x != nil && x.OutPacketRate != nil {
		return *x.OutPacketRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetOutUseRate() string {
	if x != nil && x.OutUseRate != nil {
		return *x.OutUseRate
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveByte() uint64 {
	if x != nil && x.ReceiveByte != nil {
		return *x.ReceiveByte
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendByte() uint64 {
	if x != nil && x.SendByte != nil {
		return *x.SendByte
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceivePacket() uint64 {
	if x != nil && x.ReceivePacket != nil {
		return *x.ReceivePacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendPacket() uint64 {
	if x != nil && x.SendPacket != nil {
		return *x.SendPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveUnicastPacket() uint64 {
	if x != nil && x.ReceiveUnicastPacket != nil {
		return *x.ReceiveUnicastPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveMulticastPacket() uint64 {
	if x != nil && x.ReceiveMulticastPacket != nil {
		return *x.ReceiveMulticastPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveBroadPacket() uint64 {
	if x != nil && x.ReceiveBroadPacket != nil {
		return *x.ReceiveBroadPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendUnicastPacket() uint64 {
	if x != nil && x.SendUnicastPacket != nil {
		return *x.SendUnicastPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendMulticastPacket() uint64 {
	if x != nil && x.SendMulticastPacket != nil {
		return *x.SendMulticastPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendBroadPacket() uint64 {
	if x != nil && x.SendBroadPacket != nil {
		return *x.SendBroadPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveErrorPacket() uint64 {
	if x != nil && x.ReceiveErrorPacket != nil {
		return *x.ReceiveErrorPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveDropPacket() uint64 {
	if x != nil && x.ReceiveDropPacket != nil {
		return *x.ReceiveDropPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendErrorPacket() uint64 {
	if x != nil && x.SendErrorPacket != nil {
		return *x.SendErrorPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendDropPacket() uint64 {
	if x != nil && x.SendDropPacket != nil {
		return *x.SendDropPacket
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendUnicastBit() uint64 {
	if x != nil && x.SendUnicastBit != nil {
		return *x.SendUnicastBit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveUnicastBit() uint64 {
	if x != nil && x.ReceiveUnicastBit != nil {
		return *x.ReceiveUnicastBit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendMulticastBit() uint64 {
	if x != nil && x.SendMulticastBit != nil {
		return *x.SendMulticastBit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveMulticastBit() uint64 {
	if x != nil && x.ReceiveMulticastBit != nil {
		return *x.ReceiveMulticastBit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendBroadBit() uint64 {
	if x != nil && x.SendBroadBit != nil {
		return *x.SendBroadBit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveBroadBit() uint64 {
	if x != nil && x.ReceiveBroadBit != nil {
		return *x.ReceiveBroadBit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendUnicastBitRate() uint64 {
	if x != nil && x.SendUnicastBitRate != nil {
		return *x.SendUnicastBitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveUnicastBitRate() uint64 {
	if x != nil && x.ReceiveUnicastBitRate != nil {
		return *x.ReceiveUnicastBitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendMulticastBitRate() uint64 {
	if x != nil && x.SendMulticastBitRate != nil {
		return *x.SendMulticastBitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveMulticastBitRate() uint64 {
	if x != nil && x.ReceiveMulticastBitRate != nil {
		return *x.ReceiveMulticastBitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendBroadBitRate() uint64 {
	if x != nil && x.SendBroadBitRate != nil {
		return *x.SendBroadBitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveBroadBitRate() uint64 {
	if x != nil && x.ReceiveBroadBitRate != nil {
		return *x.ReceiveBroadBitRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendUnicastPacketRate() uint64 {
	if x != nil && x.SendUnicastPacketRate != nil {
		return *x.SendUnicastPacketRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveUnicastPacketRate() uint64 {
	if x != nil && x.ReceiveUnicastPacketRate != nil {
		return *x.ReceiveUnicastPacketRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendMulticastPacketRate() uint64 {
	if x != nil && x.SendMulticastPacketRate != nil {
		return *x.SendMulticastPacketRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveMulticastPacketRate() uint64 {
	if x != nil && x.ReceiveMulticastPacketRate != nil {
		return *x.ReceiveMulticastPacketRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetSendBroadcastPacketRate() uint64 {
	if x != nil && x.SendBroadcastPacketRate != nil {
		return *x.SendBroadcastPacketRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_CommonStatistics) GetReceiveBroadcastPacketRate() uint64 {
	if x != nil && x.ReceiveBroadcastPacketRate != nil {
		return *x.ReceiveBroadcastPacketRate
	}
	return 0
}

type Ifm_Interfaces_Interface_Trunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                     *Ifm_Interfaces_Interface_Trunk_Type        `protobuf:"varint,1,opt,name=type,enum=huawei_ifm.Ifm_Interfaces_Interface_Trunk_Type" json:"type,omitempty"`
	WorkMode                 *Ifm_Interfaces_Interface_Trunk_WorkMode    `protobuf:"varint,2,opt,name=work_mode,json=workMode,enum=huawei_ifm.Ifm_Interfaces_Interface_Trunk_WorkMode" json:"work_mode,omitempty"`
	Members                  *Ifm_Interfaces_Interface_Trunk_Members     `protobuf:"bytes,3,opt,name=members" json:"members,omitempty"`
	Lacp                     *Ifm_Interfaces_Interface_Trunk_Lacp        `protobuf:"bytes,4,opt,name=lacp" json:"lacp,omitempty"`
	MinUpNum                 *uint32                                     `protobuf:"varint,5,opt,name=min_up_num,json=minUpNum" json:"min_up_num,omitempty"`
	MinUpBandwidth           *uint32                                     `protobuf:"varint,6,opt,name=min_up_bandwidth,json=minUpBandwidth" json:"min_up_bandwidth,omitempty"`
	MaxUpNum                 *uint32                                     `protobuf:"varint,7,opt,name=max_up_num,json=maxUpNum" json:"max_up_num,omitempty"`
	HashType                 *Ifm_Interfaces_Interface_Trunk_HashType    `protobuf:"varint,8,opt,name=hash_type,json=hashType,enum=huawei_ifm.Ifm_Interfaces_Interface_Trunk_HashType" json:"hash_type,omitempty"`
	UpMemberNum              *uint32                                     `protobuf:"varint,9,opt,name=up_member_num,json=upMemberNum" json:"up_member_num,omitempty"`
	OnlineMemberNum          *uint32                                     `protobuf:"varint,10,opt,name=online_member_num,json=onlineMemberNum" json:"online_member_num,omitempty"`
	MemberNum                *uint32                                     `protobuf:"varint,11,opt,name=member_num,json=memberNum" json:"member_num,omitempty"`
	MaxBandwidth             *uint64                                     `protobuf:"varint,12,opt,name=max_bandwidth,json=maxBandwidth" json:"max_bandwidth,omitempty"`
	SmartLinkFlushVlan       *uint32                                     `protobuf:"varint,13,opt,name=smart_link_flush_vlan,json=smartLinkFlushVlan" json:"smart_link_flush_vlan,omitempty"`
	InactivePortShutdown     *bool                                       `protobuf:"varint,14,opt,name=inactive_port_shutdown,json=inactivePortShutdown" json:"inactive_port_shutdown,omitempty"`
	PreemptEnable            *bool                                       `protobuf:"varint,15,opt,name=preempt_enable,json=preemptEnable" json:"preempt_enable,omitempty"`
	PreemptDelayMinutes      *uint32                                     `protobuf:"varint,16,opt,name=preempt_delay_minutes,json=preemptDelayMinutes" json:"preempt_delay_minutes,omitempty"`
	PreemptDelaySeconds      *uint32                                     `protobuf:"varint,17,opt,name=preempt_delay_seconds,json=preemptDelaySeconds" json:"preempt_delay_seconds,omitempty"`
	PreemptDelayMilliseconds *uint32                                     `protobuf:"varint,18,opt,name=preempt_delay_milliseconds,json=preemptDelayMilliseconds" json:"preempt_delay_milliseconds,omitempty"`
	Forwardings              *Ifm_Interfaces_Interface_Trunk_Forwardings `protobuf:"bytes,19,opt,name=forwardings" json:"forwardings,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Trunk) Reset() {
	*x = Ifm_Interfaces_Interface_Trunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Trunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Trunk) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Trunk) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Trunk) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3}
}

func (x *Ifm_Interfaces_Interface_Trunk) GetType() Ifm_Interfaces_Interface_Trunk_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Ifm_Interfaces_Interface_Trunk_INVALID_ENUM_VALUE_Type
}

func (x *Ifm_Interfaces_Interface_Trunk) GetWorkMode() Ifm_Interfaces_Interface_Trunk_WorkMode {
	if x != nil && x.WorkMode != nil {
		return *x.WorkMode
	}
	return Ifm_Interfaces_Interface_Trunk_INVALID_ENUM_VALUE_WorkMode
}

func (x *Ifm_Interfaces_Interface_Trunk) GetMembers() *Ifm_Interfaces_Interface_Trunk_Members {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Trunk) GetLacp() *Ifm_Interfaces_Interface_Trunk_Lacp {
	if x != nil {
		return x.Lacp
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Trunk) GetMinUpNum() uint32 {
	if x != nil && x.MinUpNum != nil {
		return *x.MinUpNum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk) GetMinUpBandwidth() uint32 {
	if x != nil && x.MinUpBandwidth != nil {
		return *x.MinUpBandwidth
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk) GetMaxUpNum() uint32 {
	if x != nil && x.MaxUpNum != nil {
		return *x.MaxUpNum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk) GetHashType() Ifm_Interfaces_Interface_Trunk_HashType {
	if x != nil && x.HashType != nil {
		return *x.HashType
	}
	return Ifm_Interfaces_Interface_Trunk_INVALID_ENUM_VALUE_HashType
}

func (x *Ifm_Interfaces_Interface_Trunk) GetUpMemberNum() uint32 {
	if x != nil && x.UpMemberNum != nil {
		return *x.UpMemberNum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk) GetOnlineMemberNum() uint32 {
	if x != nil && x.OnlineMemberNum != nil {
		return *x.OnlineMemberNum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk) GetMemberNum() uint32 {
	if x != nil && x.MemberNum != nil {
		return *x.MemberNum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk) GetMaxBandwidth() uint64 {
	if x != nil && x.MaxBandwidth != nil {
		return *x.MaxBandwidth
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk) GetSmartLinkFlushVlan() uint32 {
	if x != nil && x.SmartLinkFlushVlan != nil {
		return *x.SmartLinkFlushVlan
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk) GetInactivePortShutdown() bool {
	if x != nil && x.InactivePortShutdown != nil {
		return *x.InactivePortShutdown
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Trunk) GetPreemptEnable() bool {
	if x != nil && x.PreemptEnable != nil {
		return *x.PreemptEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Trunk) GetPreemptDelayMinutes() uint32 {
	if x != nil && x.PreemptDelayMinutes != nil {
		return *x.PreemptDelayMinutes
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk) GetPreemptDelaySeconds() uint32 {
	if x != nil && x.PreemptDelaySeconds != nil {
		return *x.PreemptDelaySeconds
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk) GetPreemptDelayMilliseconds() uint32 {
	if x != nil && x.PreemptDelayMilliseconds != nil {
		return *x.PreemptDelayMilliseconds
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk) GetForwardings() *Ifm_Interfaces_Interface_Trunk_Forwardings {
	if x != nil {
		return x.Forwardings
	}
	return nil
}

type Ifm_Interfaces_Interface_Bas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessType *Ifm_Interfaces_Interface_Bas_AccessType `protobuf:"bytes,1,opt,name=access_type,json=accessType" json:"access_type,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Bas) Reset() {
	*x = Ifm_Interfaces_Interface_Bas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Bas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Bas) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Bas) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Bas.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Bas) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 4}
}

func (x *Ifm_Interfaces_Interface_Bas) GetAccessType() *Ifm_Interfaces_Interface_Bas_AccessType {
	if x != nil {
		return x.AccessType
	}
	return nil
}

type Ifm_Interfaces_Interface_MulticastBas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAggregationPevlan   *uint32                                         `protobuf:"varint,1,opt,name=user_aggregation_pevlan,json=userAggregationPevlan" json:"user_aggregation_pevlan,omitempty"`
	UserAggregationCevlan   *uint32                                         `protobuf:"varint,2,opt,name=user_aggregation_cevlan,json=userAggregationCevlan" json:"user_aggregation_cevlan,omitempty"`
	CopyBySessionEnable     *bool                                           `protobuf:"varint,3,opt,name=copy_by_session_enable,json=copyBySessionEnable" json:"copy_by_session_enable,omitempty"`
	CopyByVlanEnable        *bool                                           `protobuf:"varint,4,opt,name=copy_by_vlan_enable,json=copyByVlanEnable" json:"copy_by_vlan_enable,omitempty"`
	AuthorizationEnable     *bool                                           `protobuf:"varint,5,opt,name=authorization_enable,json=authorizationEnable" json:"authorization_enable,omitempty"`
	IgmpQueryAutoSendEnable *bool                                           `protobuf:"varint,6,opt,name=igmp_query_auto_send_enable,json=igmpQueryAutoSendEnable" json:"igmp_query_auto_send_enable,omitempty"`
	VlanType                *Ifm_Interfaces_Interface_MulticastBas_VlanType `protobuf:"bytes,7,opt,name=vlan_type,json=vlanType" json:"vlan_type,omitempty"`
}

func (x *Ifm_Interfaces_Interface_MulticastBas) Reset() {
	*x = Ifm_Interfaces_Interface_MulticastBas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_MulticastBas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_MulticastBas) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_MulticastBas) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_MulticastBas.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_MulticastBas) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 5}
}

func (x *Ifm_Interfaces_Interface_MulticastBas) GetUserAggregationPevlan() uint32 {
	if x != nil && x.UserAggregationPevlan != nil {
		return *x.UserAggregationPevlan
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MulticastBas) GetUserAggregationCevlan() uint32 {
	if x != nil && x.UserAggregationCevlan != nil {
		return *x.UserAggregationCevlan
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MulticastBas) GetCopyBySessionEnable() bool {
	if x != nil && x.CopyBySessionEnable != nil {
		return *x.CopyBySessionEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_MulticastBas) GetCopyByVlanEnable() bool {
	if x != nil && x.CopyByVlanEnable != nil {
		return *x.CopyByVlanEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_MulticastBas) GetAuthorizationEnable() bool {
	if x != nil && x.AuthorizationEnable != nil {
		return *x.AuthorizationEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_MulticastBas) GetIgmpQueryAutoSendEnable() bool {
	if x != nil && x.IgmpQueryAutoSendEnable != nil {
		return *x.IgmpQueryAutoSendEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_MulticastBas) GetVlanType() *Ifm_Interfaces_Interface_MulticastBas_VlanType {
	if x != nil {
		return x.VlanType
	}
	return nil
}

type Ifm_Interfaces_Interface_Vrrp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IfTrackAdminVrrps *Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps `protobuf:"bytes,1,opt,name=if_track_admin_vrrps,json=ifTrackAdminVrrps" json:"if_track_admin_vrrps,omitempty"`
	BackupGroups      *Ifm_Interfaces_Interface_Vrrp_BackupGroups      `protobuf:"bytes,2,opt,name=backup_groups,json=backupGroups" json:"backup_groups,omitempty"`
	TrackAdmins       *Ifm_Interfaces_Interface_Vrrp_TrackAdmins       `protobuf:"bytes,3,opt,name=track_admins,json=trackAdmins" json:"track_admins,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Vrrp) Reset() {
	*x = Ifm_Interfaces_Interface_Vrrp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Vrrp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Vrrp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Vrrp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Vrrp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Vrrp) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 6}
}

func (x *Ifm_Interfaces_Interface_Vrrp) GetIfTrackAdminVrrps() *Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps {
	if x != nil {
		return x.IfTrackAdminVrrps
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Vrrp) GetBackupGroups() *Ifm_Interfaces_Interface_Vrrp_BackupGroups {
	if x != nil {
		return x.BackupGroups
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Vrrp) GetTrackAdmins() *Ifm_Interfaces_Interface_Vrrp_TrackAdmins {
	if x != nil {
		return x.TrackAdmins
	}
	return nil
}

type Ifm_Interfaces_Interface_Rbs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindRbp *Ifm_Interfaces_Interface_Rbs_BindRbp `protobuf:"bytes,1,opt,name=bind_rbp,json=bindRbp" json:"bind_rbp,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Rbs) Reset() {
	*x = Ifm_Interfaces_Interface_Rbs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Rbs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Rbs) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Rbs) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Rbs.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Rbs) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 7}
}

func (x *Ifm_Interfaces_Interface_Rbs) GetBindRbp() *Ifm_Interfaces_Interface_Rbs_BindRbp {
	if x != nil {
		return x.BindRbp
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainInterface  *Ifm_Interfaces_Interface_Ethernet_MainInterface  `protobuf:"bytes,1,opt,name=main_interface,json=mainInterface" json:"main_interface,omitempty"`
	L3SubInterface *Ifm_Interfaces_Interface_Ethernet_L3SubInterface `protobuf:"bytes,2,opt,name=l3_sub_interface,json=l3SubInterface" json:"l3_sub_interface,omitempty"`
	Mac            *Ifm_Interfaces_Interface_Ethernet_Mac            `protobuf:"bytes,3,opt,name=mac" json:"mac,omitempty"`
	L2SubInterface *Ifm_Interfaces_Interface_Ethernet_L2SubInterface `protobuf:"bytes,4,opt,name=l2_sub_interface,json=l2SubInterface" json:"l2_sub_interface,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8}
}

func (x *Ifm_Interfaces_Interface_Ethernet) GetMainInterface() *Ifm_Interfaces_Interface_Ethernet_MainInterface {
	if x != nil {
		return x.MainInterface
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet) GetL3SubInterface() *Ifm_Interfaces_Interface_Ethernet_L3SubInterface {
	if x != nil {
		return x.L3SubInterface
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet) GetMac() *Ifm_Interfaces_Interface_Ethernet_Mac {
	if x != nil {
		return x.Mac
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet) GetL2SubInterface() *Ifm_Interfaces_Interface_Ethernet_L2SubInterface {
	if x != nil {
		return x.L2SubInterface
	}
	return nil
}

type Ifm_Interfaces_Interface_TunnelProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *Ifm_Interfaces_Interface_TunnelProtocol_Type `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_TunnelProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol) GetType() *Ifm_Interfaces_Interface_TunnelProtocol_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

type Ifm_Interfaces_Interface_BdifAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BandWidth   *uint32 `protobuf:"varint,1,opt,name=band_width,json=bandWidth" json:"band_width,omitempty"`
	DampingTime *uint32 `protobuf:"varint,2,opt,name=damping_time,json=dampingTime" json:"damping_time,omitempty"`
}

func (x *Ifm_Interfaces_Interface_BdifAttribute) Reset() {
	*x = Ifm_Interfaces_Interface_BdifAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_BdifAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_BdifAttribute) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_BdifAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_BdifAttribute.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_BdifAttribute) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 10}
}

func (x *Ifm_Interfaces_Interface_BdifAttribute) GetBandWidth() uint32 {
	if x != nil && x.BandWidth != nil {
		return *x.BandWidth
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_BdifAttribute) GetDampingTime() uint32 {
	if x != nil && x.DampingTime != nil {
		return *x.DampingTime
	}
	return 0
}

type Ifm_Interfaces_Interface_ArpSending struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       *Ifm_Interfaces_Interface_ArpSending_Type `protobuf:"varint,1,opt,name=type,enum=huawei_ifm.Ifm_Interfaces_Interface_ArpSending_Type" json:"type,omitempty"`
	ExpireTime *uint32                                   `protobuf:"varint,2,opt,name=expire_time,json=expireTime" json:"expire_time,omitempty"`
}

func (x *Ifm_Interfaces_Interface_ArpSending) Reset() {
	*x = Ifm_Interfaces_Interface_ArpSending{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_ArpSending) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ArpSending) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ArpSending) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ArpSending.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ArpSending) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 11}
}

func (x *Ifm_Interfaces_Interface_ArpSending) GetType() Ifm_Interfaces_Interface_ArpSending_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Ifm_Interfaces_Interface_ArpSending_INVALID_ENUM_VALUE_Type
}

func (x *Ifm_Interfaces_Interface_ArpSending) GetExpireTime() uint32 {
	if x != nil && x.ExpireTime != nil {
		return *x.ExpireTime
	}
	return 0
}

type Ifm_Interfaces_Interface_NdSending struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       *Ifm_Interfaces_Interface_NdSending_Type `protobuf:"varint,1,opt,name=type,enum=huawei_ifm.Ifm_Interfaces_Interface_NdSending_Type" json:"type,omitempty"`
	ExpireTime *uint32                                  `protobuf:"varint,2,opt,name=expire_time,json=expireTime" json:"expire_time,omitempty"`
}

func (x *Ifm_Interfaces_Interface_NdSending) Reset() {
	*x = Ifm_Interfaces_Interface_NdSending{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_NdSending) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_NdSending) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_NdSending) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_NdSending.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_NdSending) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 12}
}

func (x *Ifm_Interfaces_Interface_NdSending) GetType() Ifm_Interfaces_Interface_NdSending_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Ifm_Interfaces_Interface_NdSending_INVALID_ENUM_VALUE_Type
}

func (x *Ifm_Interfaces_Interface_NdSending) GetExpireTime() uint32 {
	if x != nil && x.ExpireTime != nil {
		return *x.ExpireTime
	}
	return 0
}

type Ifm_Interfaces_Interface_Bfd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableTrunkCrcBitError *bool `protobuf:"varint,1,opt,name=enable_trunk_crc_bit_error,json=enableTrunkCrcBitError" json:"enable_trunk_crc_bit_error,omitempty"`
	EnableTriggerIfDown    *bool `protobuf:"varint,2,opt,name=enable_trigger_if_down,json=enableTriggerIfDown" json:"enable_trigger_if_down,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Bfd) Reset() {
	*x = Ifm_Interfaces_Interface_Bfd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Bfd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Bfd) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Bfd) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Bfd.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Bfd) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 13}
}

func (x *Ifm_Interfaces_Interface_Bfd) GetEnableTrunkCrcBitError() bool {
	if x != nil && x.EnableTrunkCrcBitError != nil {
		return *x.EnableTrunkCrcBitError
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Bfd) GetEnableTriggerIfDown() bool {
	if x != nil && x.EnableTriggerIfDown != nil {
		return *x.EnableTriggerIfDown
	}
	return false
}

type Ifm_Interfaces_Interface_NveAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vtep *Ifm_Interfaces_Interface_NveAttribute_Vtep `protobuf:"bytes,1,opt,name=vtep" json:"vtep,omitempty"`
}

func (x *Ifm_Interfaces_Interface_NveAttribute) Reset() {
	*x = Ifm_Interfaces_Interface_NveAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_NveAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_NveAttribute) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_NveAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_NveAttribute.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_NveAttribute) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 14}
}

func (x *Ifm_Interfaces_Interface_NveAttribute) GetVtep() *Ifm_Interfaces_Interface_NveAttribute_Vtep {
	if x != nil {
		return x.Vtep
	}
	return nil
}

type Ifm_Interfaces_Interface_Nvo3Gateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VxlanAnycastGateway  *bool `protobuf:"varint,1,opt,name=vxlan_anycast_gateway,json=vxlanAnycastGateway" json:"vxlan_anycast_gateway,omitempty"`
	CommonAnycastGateway *bool `protobuf:"varint,2,opt,name=common_anycast_gateway,json=commonAnycastGateway" json:"common_anycast_gateway,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Nvo3Gateway) Reset() {
	*x = Ifm_Interfaces_Interface_Nvo3Gateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Nvo3Gateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Nvo3Gateway) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Nvo3Gateway) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Nvo3Gateway.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Nvo3Gateway) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 15}
}

func (x *Ifm_Interfaces_Interface_Nvo3Gateway) GetVxlanAnycastGateway() bool {
	if x != nil && x.VxlanAnycastGateway != nil {
		return *x.VxlanAnycastGateway
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Nvo3Gateway) GetCommonAnycastGateway() bool {
	if x != nil && x.CommonAnycastGateway != nil {
		return *x.CommonAnycastGateway
	}
	return false
}

type Ifm_Interfaces_Interface_ArpEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpireTime              *uint32                                           `protobuf:"varint,1,opt,name=expire_time,json=expireTime" json:"expire_time,omitempty"`
	ProbeInterval           *uint32                                           `protobuf:"varint,2,opt,name=probe_interval,json=probeInterval" json:"probe_interval,omitempty"`
	ProbeTimes              *uint32                                           `protobuf:"varint,3,opt,name=probe_times,json=probeTimes" json:"probe_times,omitempty"`
	ArpLearnDisable         *bool                                             `protobuf:"varint,4,opt,name=arp_learn_disable,json=arpLearnDisable" json:"arp_learn_disable,omitempty"`
	ArpLearnStrict          *Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict `protobuf:"varint,5,opt,name=arp_learn_strict,json=arpLearnStrict,enum=huawei_ifm.Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict" json:"arp_learn_strict,omitempty"`
	RouteProxyEnable        *bool                                             `protobuf:"varint,6,opt,name=route_proxy_enable,json=routeProxyEnable" json:"route_proxy_enable,omitempty"`
	InnerProxyEnable        *bool                                             `protobuf:"varint,7,opt,name=inner_proxy_enable,json=innerProxyEnable" json:"inner_proxy_enable,omitempty"`
	InterProxyEnable        *bool                                             `protobuf:"varint,8,opt,name=inter_proxy_enable,json=interProxyEnable" json:"inter_proxy_enable,omitempty"`
	LocalProxyEnable        *bool                                             `protobuf:"varint,9,opt,name=local_proxy_enable,json=localProxyEnable" json:"local_proxy_enable,omitempty"`
	FakeExpireTime          *uint32                                           `protobuf:"varint,10,opt,name=fake_expire_time,json=fakeExpireTime" json:"fake_expire_time,omitempty"`
	ProbeUnicast            *bool                                             `protobuf:"varint,11,opt,name=probe_unicast,json=probeUnicast" json:"probe_unicast,omitempty"`
	DestMacCheck            *bool                                             `protobuf:"varint,12,opt,name=dest_mac_check,json=destMacCheck" json:"dest_mac_check,omitempty"`
	SrcMacCheck             *bool                                             `protobuf:"varint,13,opt,name=src_mac_check,json=srcMacCheck" json:"src_mac_check,omitempty"`
	DistributeEnable        *bool                                             `protobuf:"varint,14,opt,name=distribute_enable,json=distributeEnable" json:"distribute_enable,omitempty"`
	Gratuitous              *Ifm_Interfaces_Interface_ArpEntry_Gratuitous     `protobuf:"varint,15,opt,name=gratuitous,enum=huawei_ifm.Ifm_Interfaces_Interface_ArpEntry_Gratuitous" json:"gratuitous,omitempty"`
	HostCollectEnable       *bool                                             `protobuf:"varint,16,opt,name=host_collect_enable,json=hostCollectEnable" json:"host_collect_enable,omitempty"`
	GenerateRdtblEnable     *bool                                             `protobuf:"varint,17,opt,name=generate_rdtbl_enable,json=generateRdtblEnable" json:"generate_rdtbl_enable,omitempty"`
	BroadcastDetectInterval *uint32                                           `protobuf:"varint,18,opt,name=broadcast_detect_interval,json=broadcastDetectInterval" json:"broadcast_detect_interval,omitempty"`
	BroadcastDetectTimes    *uint32                                           `protobuf:"varint,19,opt,name=broadcast_detect_times,json=broadcastDetectTimes" json:"broadcast_detect_times,omitempty"`
	BroadcastDetectEnable   *bool                                             `protobuf:"varint,20,opt,name=broadcast_detect_enable,json=broadcastDetectEnable" json:"broadcast_detect_enable,omitempty"`
	FakePenaltyTime         *uint32                                           `protobuf:"varint,21,opt,name=fake_penalty_time,json=fakePenaltyTime" json:"fake_penalty_time,omitempty"`
	GratuitousArpDrop       *bool                                             `protobuf:"varint,22,opt,name=gratuitous_arp_drop,json=gratuitousArpDrop" json:"gratuitous_arp_drop,omitempty"`
	GratuitousSend          *Ifm_Interfaces_Interface_ArpEntry_GratuitousSend `protobuf:"varint,23,opt,name=gratuitous_send,json=gratuitousSend,enum=huawei_ifm.Ifm_Interfaces_Interface_ArpEntry_GratuitousSend" json:"gratuitous_send,omitempty"`
	BroadcastMaxNum         *uint32                                           `protobuf:"varint,24,opt,name=broadcast_max_num,json=broadcastMaxNum" json:"broadcast_max_num,omitempty"`
}

func (x *Ifm_Interfaces_Interface_ArpEntry) Reset() {
	*x = Ifm_Interfaces_Interface_ArpEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_ArpEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ArpEntry) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ArpEntry) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ArpEntry.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ArpEntry) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 16}
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetExpireTime() uint32 {
	if x != nil && x.ExpireTime != nil {
		return *x.ExpireTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetProbeInterval() uint32 {
	if x != nil && x.ProbeInterval != nil {
		return *x.ProbeInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetProbeTimes() uint32 {
	if x != nil && x.ProbeTimes != nil {
		return *x.ProbeTimes
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetArpLearnDisable() bool {
	if x != nil && x.ArpLearnDisable != nil {
		return *x.ArpLearnDisable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetArpLearnStrict() Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict {
	if x != nil && x.ArpLearnStrict != nil {
		return *x.ArpLearnStrict
	}
	return Ifm_Interfaces_Interface_ArpEntry_INVALID_ENUM_VALUE_ArpLearnStrict
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetRouteProxyEnable() bool {
	if x != nil && x.RouteProxyEnable != nil {
		return *x.RouteProxyEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetInnerProxyEnable() bool {
	if x != nil && x.InnerProxyEnable != nil {
		return *x.InnerProxyEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetInterProxyEnable() bool {
	if x != nil && x.InterProxyEnable != nil {
		return *x.InterProxyEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetLocalProxyEnable() bool {
	if x != nil && x.LocalProxyEnable != nil {
		return *x.LocalProxyEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetFakeExpireTime() uint32 {
	if x != nil && x.FakeExpireTime != nil {
		return *x.FakeExpireTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetProbeUnicast() bool {
	if x != nil && x.ProbeUnicast != nil {
		return *x.ProbeUnicast
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetDestMacCheck() bool {
	if x != nil && x.DestMacCheck != nil {
		return *x.DestMacCheck
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetSrcMacCheck() bool {
	if x != nil && x.SrcMacCheck != nil {
		return *x.SrcMacCheck
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetDistributeEnable() bool {
	if x != nil && x.DistributeEnable != nil {
		return *x.DistributeEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetGratuitous() Ifm_Interfaces_Interface_ArpEntry_Gratuitous {
	if x != nil && x.Gratuitous != nil {
		return *x.Gratuitous
	}
	return Ifm_Interfaces_Interface_ArpEntry_INVALID_ENUM_VALUE_Gratuitous
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetHostCollectEnable() bool {
	if x != nil && x.HostCollectEnable != nil {
		return *x.HostCollectEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetGenerateRdtblEnable() bool {
	if x != nil && x.GenerateRdtblEnable != nil {
		return *x.GenerateRdtblEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetBroadcastDetectInterval() uint32 {
	if x != nil && x.BroadcastDetectInterval != nil {
		return *x.BroadcastDetectInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetBroadcastDetectTimes() uint32 {
	if x != nil && x.BroadcastDetectTimes != nil {
		return *x.BroadcastDetectTimes
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetBroadcastDetectEnable() bool {
	if x != nil && x.BroadcastDetectEnable != nil {
		return *x.BroadcastDetectEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetFakePenaltyTime() uint32 {
	if x != nil && x.FakePenaltyTime != nil {
		return *x.FakePenaltyTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetGratuitousArpDrop() bool {
	if x != nil && x.GratuitousArpDrop != nil {
		return *x.GratuitousArpDrop
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetGratuitousSend() Ifm_Interfaces_Interface_ArpEntry_GratuitousSend {
	if x != nil && x.GratuitousSend != nil {
		return *x.GratuitousSend
	}
	return Ifm_Interfaces_Interface_ArpEntry_INVALID_ENUM_VALUE_GratuitousSend
}

func (x *Ifm_Interfaces_Interface_ArpEntry) GetBroadcastMaxNum() uint32 {
	if x != nil && x.BroadcastMaxNum != nil {
		return *x.BroadcastMaxNum
	}
	return 0
}

type Ifm_Interfaces_Interface_Evpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	PbbSourceMac    *string `protobuf:"bytes,2,opt,name=pbb_source_mac,json=pbbSourceMac" json:"pbb_source_mac,omitempty"`
	Esi             *string `protobuf:"bytes,3,opt,name=esi" json:"esi,omitempty"`
	EsiName         *string `protobuf:"bytes,4,opt,name=esi_name,json=esiName" json:"esi_name,omitempty"`
	EsRecoveryTimer *uint32 `protobuf:"varint,5,opt,name=es_recovery_timer,json=esRecoveryTimer" json:"es_recovery_timer,omitempty"`
	TrackBfdName    *string `protobuf:"bytes,6,opt,name=track_bfd_name,json=trackBfdName" json:"track_bfd_name,omitempty"`
	ETreeLeaf       *bool   `protobuf:"varint,7,opt,name=e_tree_leaf,json=eTreeLeaf" json:"e_tree_leaf,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Evpn) Reset() {
	*x = Ifm_Interfaces_Interface_Evpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Evpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Evpn) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Evpn) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Evpn.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Evpn) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 17}
}

func (x *Ifm_Interfaces_Interface_Evpn) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Evpn) GetPbbSourceMac() string {
	if x != nil && x.PbbSourceMac != nil {
		return *x.PbbSourceMac
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Evpn) GetEsi() string {
	if x != nil && x.Esi != nil {
		return *x.Esi
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Evpn) GetEsiName() string {
	if x != nil && x.EsiName != nil {
		return *x.EsiName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Evpn) GetEsRecoveryTimer() uint32 {
	if x != nil && x.EsRecoveryTimer != nil {
		return *x.EsRecoveryTimer
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Evpn) GetTrackBfdName() string {
	if x != nil && x.TrackBfdName != nil {
		return *x.TrackBfdName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Evpn) GetETreeLeaf() bool {
	if x != nil && x.ETreeLeaf != nil {
		return *x.ETreeLeaf
	}
	return false
}

type Ifm_Interfaces_Interface_Efm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *Ifm_Interfaces_Interface_Efm_Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Efm) Reset() {
	*x = Ifm_Interfaces_Interface_Efm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Efm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Efm) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Efm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Efm) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18}
}

func (x *Ifm_Interfaces_Interface_Efm) GetSession() *Ifm_Interfaces_Interface_Efm_Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type Ifm_Interfaces_Interface_VlanifAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BandWidth   *uint32 `protobuf:"varint,1,opt,name=band_width,json=bandWidth" json:"band_width,omitempty"`
	DampingTime *uint32 `protobuf:"varint,2,opt,name=damping_time,json=dampingTime" json:"damping_time,omitempty"`
}

func (x *Ifm_Interfaces_Interface_VlanifAttribute) Reset() {
	*x = Ifm_Interfaces_Interface_VlanifAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_VlanifAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_VlanifAttribute) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_VlanifAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_VlanifAttribute.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_VlanifAttribute) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 19}
}

func (x *Ifm_Interfaces_Interface_VlanifAttribute) GetBandWidth() uint32 {
	if x != nil && x.BandWidth != nil {
		return *x.BandWidth
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_VlanifAttribute) GetDampingTime() uint32 {
	if x != nil && x.DampingTime != nil {
		return *x.DampingTime
	}
	return 0
}

type Ifm_Interfaces_Interface_Lldp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *Ifm_Interfaces_Interface_Lldp_Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Lldp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20}
}

func (x *Ifm_Interfaces_Interface_Lldp) GetSession() *Ifm_Interfaces_Interface_Lldp_Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type Ifm_Interfaces_Interface_ControlFlap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Suppress         *uint32 `protobuf:"varint,1,opt,name=suppress" json:"suppress,omitempty"`
	Reuse            *uint32 `protobuf:"varint,2,opt,name=reuse" json:"reuse,omitempty"`
	Ceiling          *uint32 `protobuf:"varint,3,opt,name=ceiling" json:"ceiling,omitempty"`
	DecayOk          *uint32 `protobuf:"varint,4,opt,name=decay_ok,json=decayOk" json:"decay_ok,omitempty"`
	DecayNg          *uint32 `protobuf:"varint,5,opt,name=decay_ng,json=decayNg" json:"decay_ng,omitempty"`
	ControlFlapCount *uint32 `protobuf:"varint,6,opt,name=control_flap_count,json=controlFlapCount" json:"control_flap_count,omitempty"`
}

func (x *Ifm_Interfaces_Interface_ControlFlap) Reset() {
	*x = Ifm_Interfaces_Interface_ControlFlap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_ControlFlap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ControlFlap) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ControlFlap) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ControlFlap.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ControlFlap) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 21}
}

func (x *Ifm_Interfaces_Interface_ControlFlap) GetSuppress() uint32 {
	if x != nil && x.Suppress != nil {
		return *x.Suppress
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ControlFlap) GetReuse() uint32 {
	if x != nil && x.Reuse != nil {
		return *x.Reuse
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ControlFlap) GetCeiling() uint32 {
	if x != nil && x.Ceiling != nil {
		return *x.Ceiling
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ControlFlap) GetDecayOk() uint32 {
	if x != nil && x.DecayOk != nil {
		return *x.DecayOk
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ControlFlap) GetDecayNg() uint32 {
	if x != nil && x.DecayNg != nil {
		return *x.DecayNg
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ControlFlap) GetControlFlapCount() uint32 {
	if x != nil && x.ControlFlapCount != nil {
		return *x.ControlFlapCount
	}
	return 0
}

type Ifm_Interfaces_Interface_TrapThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputRisingRate  *uint32 `protobuf:"varint,1,opt,name=input_rising_rate,json=inputRisingRate" json:"input_rising_rate,omitempty"`
	InputResumeRate  *uint32 `protobuf:"varint,2,opt,name=input_resume_rate,json=inputResumeRate" json:"input_resume_rate,omitempty"`
	OutputRisingRate *uint32 `protobuf:"varint,3,opt,name=output_rising_rate,json=outputRisingRate" json:"output_rising_rate,omitempty"`
	OutputResumeRate *uint32 `protobuf:"varint,4,opt,name=output_resume_rate,json=outputResumeRate" json:"output_resume_rate,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TrapThreshold) Reset() {
	*x = Ifm_Interfaces_Interface_TrapThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TrapThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TrapThreshold) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_TrapThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TrapThreshold.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TrapThreshold) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 22}
}

func (x *Ifm_Interfaces_Interface_TrapThreshold) GetInputRisingRate() uint32 {
	if x != nil && x.InputRisingRate != nil {
		return *x.InputRisingRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TrapThreshold) GetInputResumeRate() uint32 {
	if x != nil && x.InputResumeRate != nil {
		return *x.InputResumeRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TrapThreshold) GetOutputRisingRate() uint32 {
	if x != nil && x.OutputRisingRate != nil {
		return *x.OutputRisingRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TrapThreshold) GetOutputResumeRate() uint32 {
	if x != nil && x.OutputResumeRate != nil {
		return *x.OutputResumeRate
	}
	return 0
}

type Ifm_Interfaces_Interface_Damping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IgnoreDamp *Ifm_Interfaces_Interface_Damping_IgnoreDamp `protobuf:"bytes,1,opt,name=ignore_damp,json=ignoreDamp" json:"ignore_damp,omitempty"`
	Damp       *Ifm_Interfaces_Interface_Damping_Damp       `protobuf:"bytes,2,opt,name=damp" json:"damp,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Damping) Reset() {
	*x = Ifm_Interfaces_Interface_Damping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Damping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Damping) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Damping) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Damping.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Damping) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 23}
}

func (x *Ifm_Interfaces_Interface_Damping) GetIgnoreDamp() *Ifm_Interfaces_Interface_Damping_IgnoreDamp {
	if x != nil {
		return x.IgnoreDamp
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Damping) GetDamp() *Ifm_Interfaces_Interface_Damping_Damp {
	if x != nil {
		return x.Damp
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address    *Ifm_Interfaces_Interface_Ipv4_Address    `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	State      *Ifm_Interfaces_Interface_Ipv4_State      `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	StaticArps *Ifm_Interfaces_Interface_Ipv4_StaticArps `protobuf:"bytes,3,opt,name=static_arps,json=staticArps" json:"static_arps,omitempty"`
	Vrrp       *Ifm_Interfaces_Interface_Ipv4_Vrrp       `protobuf:"bytes,4,opt,name=vrrp" json:"vrrp,omitempty"`
	Rgm        *Ifm_Interfaces_Interface_Ipv4_Rgm        `protobuf:"bytes,5,opt,name=rgm" json:"rgm,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24}
}

func (x *Ifm_Interfaces_Interface_Ipv4) GetAddress() *Ifm_Interfaces_Interface_Ipv4_Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv4) GetState() *Ifm_Interfaces_Interface_Ipv4_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv4) GetStaticArps() *Ifm_Interfaces_Interface_Ipv4_StaticArps {
	if x != nil {
		return x.StaticArps
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv4) GetVrrp() *Ifm_Interfaces_Interface_Ipv4_Vrrp {
	if x != nil {
		return x.Vrrp
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv4) GetRgm() *Ifm_Interfaces_Interface_Ipv4_Rgm {
	if x != nil {
		return x.Rgm
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mtu6                  *uint32                                              `protobuf:"varint,1,opt,name=mtu6" json:"mtu6,omitempty"`
	SpreadMtuFlag         *bool                                                `protobuf:"varint,2,opt,name=spread_mtu_flag,json=spreadMtuFlag" json:"spread_mtu_flag,omitempty"`
	AutoLinkLocal         *bool                                                `protobuf:"varint,3,opt,name=auto_link_local,json=autoLinkLocal" json:"auto_link_local,omitempty"`
	Address               *Ifm_Interfaces_Interface_Ipv6_Address               `protobuf:"bytes,4,opt,name=address" json:"address,omitempty"`
	NdPrefixs             *Ifm_Interfaces_Interface_Ipv6_NdPrefixs             `protobuf:"bytes,5,opt,name=nd_prefixs,json=ndPrefixs" json:"nd_prefixs,omitempty"`
	State                 *Ifm_Interfaces_Interface_Ipv6_State                 `protobuf:"bytes,6,opt,name=state" json:"state,omitempty"`
	NdCollection          *Ifm_Interfaces_Interface_Ipv6_NdCollection          `protobuf:"bytes,7,opt,name=nd_collection,json=ndCollection" json:"nd_collection,omitempty"`
	Cgas                  *Ifm_Interfaces_Interface_Ipv6_Cgas                  `protobuf:"bytes,8,opt,name=cgas" json:"cgas,omitempty"`
	ExtensionHeaderFilter *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter `protobuf:"bytes,9,opt,name=extension_header_filter,json=extensionHeaderFilter" json:"extension_header_filter,omitempty"`
	Pp6Collection         *Ifm_Interfaces_Interface_Ipv6_Pp6Collection         `protobuf:"bytes,10,opt,name=pp6_collection,json=pp6Collection" json:"pp6_collection,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25}
}

func (x *Ifm_Interfaces_Interface_Ipv6) GetMtu6() uint32 {
	if x != nil && x.Mtu6 != nil {
		return *x.Mtu6
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6) GetSpreadMtuFlag() bool {
	if x != nil && x.SpreadMtuFlag != nil {
		return *x.SpreadMtuFlag
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ipv6) GetAutoLinkLocal() bool {
	if x != nil && x.AutoLinkLocal != nil {
		return *x.AutoLinkLocal
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ipv6) GetAddress() *Ifm_Interfaces_Interface_Ipv6_Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6) GetNdPrefixs() *Ifm_Interfaces_Interface_Ipv6_NdPrefixs {
	if x != nil {
		return x.NdPrefixs
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6) GetState() *Ifm_Interfaces_Interface_Ipv6_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6) GetNdCollection() *Ifm_Interfaces_Interface_Ipv6_NdCollection {
	if x != nil {
		return x.NdCollection
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6) GetCgas() *Ifm_Interfaces_Interface_Ipv6_Cgas {
	if x != nil {
		return x.Cgas
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6) GetExtensionHeaderFilter() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter {
	if x != nil {
		return x.ExtensionHeaderFilter
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6) GetPp6Collection() *Ifm_Interfaces_Interface_Ipv6_Pp6Collection {
	if x != nil {
		return x.Pp6Collection
	}
	return nil
}

type Ifm_Interfaces_Interface_Dhcpv6RelayIf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceAddress   *string `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
	LinkAddress     *string `protobuf:"bytes,2,opt,name=link_address,json=linkAddress" json:"link_address,omitempty"`
	StrictCheck     *bool   `protobuf:"varint,3,opt,name=strict_check,json=strictCheck" json:"strict_check,omitempty"`
	ServerGroupName *string `protobuf:"bytes,4,opt,name=server_group_name,json=serverGroupName" json:"server_group_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayIf) Reset() {
	*x = Ifm_Interfaces_Interface_Dhcpv6RelayIf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Dhcpv6RelayIf) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayIf) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dhcpv6RelayIf.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Dhcpv6RelayIf) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 26}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayIf) GetSourceAddress() string {
	if x != nil && x.SourceAddress != nil {
		return *x.SourceAddress
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayIf) GetLinkAddress() string {
	if x != nil && x.LinkAddress != nil {
		return *x.LinkAddress
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayIf) GetStrictCheck() bool {
	if x != nil && x.StrictCheck != nil {
		return *x.StrictCheck
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayIf) GetServerGroupName() string {
	if x != nil && x.ServerGroupName != nil {
		return *x.ServerGroupName
	}
	return ""
}

type Ifm_Interfaces_Interface_DampState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuppressStatus  *Ifm_Interfaces_Interface_DampState_SuppressStatus `protobuf:"varint,1,opt,name=suppress_status,json=suppressStatus,enum=huawei_ifm.Ifm_Interfaces_Interface_DampState_SuppressStatus" json:"suppress_status,omitempty"`
	Suppress        *uint32                                            `protobuf:"varint,2,opt,name=suppress" json:"suppress,omitempty"`
	Reuse           *uint32                                            `protobuf:"varint,3,opt,name=reuse" json:"reuse,omitempty"`
	MaxSuppressTime *uint32                                            `protobuf:"varint,4,opt,name=max_suppress_time,json=maxSuppressTime" json:"max_suppress_time,omitempty"`
	HalfLifePeriod  *uint32                                            `protobuf:"varint,5,opt,name=half_life_period,json=halfLifePeriod" json:"half_life_period,omitempty"`
	DampReuseTime   *uint32                                            `protobuf:"varint,6,opt,name=damp_reuse_time,json=dampReuseTime" json:"damp_reuse_time,omitempty"`
	CurrentPenalty  *uint32                                            `protobuf:"varint,7,opt,name=current_penalty,json=currentPenalty" json:"current_penalty,omitempty"`
	MaxPenalty      *uint32                                            `protobuf:"varint,8,opt,name=max_penalty,json=maxPenalty" json:"max_penalty,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DampState) Reset() {
	*x = Ifm_Interfaces_Interface_DampState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DampState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DampState) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DampState) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DampState.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DampState) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 27}
}

func (x *Ifm_Interfaces_Interface_DampState) GetSuppressStatus() Ifm_Interfaces_Interface_DampState_SuppressStatus {
	if x != nil && x.SuppressStatus != nil {
		return *x.SuppressStatus
	}
	return Ifm_Interfaces_Interface_DampState_SuppressStatus_SUPPRESSED
}

func (x *Ifm_Interfaces_Interface_DampState) GetSuppress() uint32 {
	if x != nil && x.Suppress != nil {
		return *x.Suppress
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DampState) GetReuse() uint32 {
	if x != nil && x.Reuse != nil {
		return *x.Reuse
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DampState) GetMaxSuppressTime() uint32 {
	if x != nil && x.MaxSuppressTime != nil {
		return *x.MaxSuppressTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DampState) GetHalfLifePeriod() uint32 {
	if x != nil && x.HalfLifePeriod != nil {
		return *x.HalfLifePeriod
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DampState) GetDampReuseTime() uint32 {
	if x != nil && x.DampReuseTime != nil {
		return *x.DampReuseTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DampState) GetCurrentPenalty() uint32 {
	if x != nil && x.CurrentPenalty != nil {
		return *x.CurrentPenalty
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DampState) GetMaxPenalty() uint32 {
	if x != nil && x.MaxPenalty != nil {
		return *x.MaxPenalty
	}
	return 0
}

type Ifm_Interfaces_Interface_ErrorDown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cause         *Ifm_Interfaces_Interface_ErrorDown_Cause `protobuf:"varint,1,opt,name=cause,enum=huawei_ifm.Ifm_Interfaces_Interface_ErrorDown_Cause" json:"cause,omitempty"`
	RecoveryTime  *uint32                                   `protobuf:"varint,2,opt,name=recovery_time,json=recoveryTime" json:"recovery_time,omitempty"`
	RemainderTime *uint32                                   `protobuf:"varint,3,opt,name=remainder_time,json=remainderTime" json:"remainder_time,omitempty"`
}

func (x *Ifm_Interfaces_Interface_ErrorDown) Reset() {
	*x = Ifm_Interfaces_Interface_ErrorDown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_ErrorDown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ErrorDown) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ErrorDown) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ErrorDown.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ErrorDown) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 28}
}

func (x *Ifm_Interfaces_Interface_ErrorDown) GetCause() Ifm_Interfaces_Interface_ErrorDown_Cause {
	if x != nil && x.Cause != nil {
		return *x.Cause
	}
	return Ifm_Interfaces_Interface_ErrorDown_Cause_BPDUX_PROTECTION
}

func (x *Ifm_Interfaces_Interface_ErrorDown) GetRecoveryTime() uint32 {
	if x != nil && x.RecoveryTime != nil {
		return *x.RecoveryTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ErrorDown) GetRemainderTime() uint32 {
	if x != nil && x.RemainderTime != nil {
		return *x.RemainderTime
	}
	return 0
}

type Ifm_Interfaces_Interface_ArpStatusDetect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddr   *string                                        `protobuf:"bytes,1,opt,name=ip_addr,json=ipAddr" json:"ip_addr,omitempty"`
	Mode     *Ifm_Interfaces_Interface_ArpStatusDetect_Mode `protobuf:"varint,2,opt,name=mode,enum=huawei_ifm.Ifm_Interfaces_Interface_ArpStatusDetect_Mode" json:"mode,omitempty"`
	Times    *uint32                                        `protobuf:"varint,3,opt,name=times" json:"times,omitempty"`
	Interval *uint32                                        `protobuf:"varint,4,opt,name=interval" json:"interval,omitempty"`
}

func (x *Ifm_Interfaces_Interface_ArpStatusDetect) Reset() {
	*x = Ifm_Interfaces_Interface_ArpStatusDetect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_ArpStatusDetect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ArpStatusDetect) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ArpStatusDetect) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ArpStatusDetect.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ArpStatusDetect) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 29}
}

func (x *Ifm_Interfaces_Interface_ArpStatusDetect) GetIpAddr() string {
	if x != nil && x.IpAddr != nil {
		return *x.IpAddr
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_ArpStatusDetect) GetMode() Ifm_Interfaces_Interface_ArpStatusDetect_Mode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return Ifm_Interfaces_Interface_ArpStatusDetect_Mode_LOOSE
}

func (x *Ifm_Interfaces_Interface_ArpStatusDetect) GetTimes() uint32 {
	if x != nil && x.Times != nil {
		return *x.Times
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_ArpStatusDetect) GetInterval() uint32 {
	if x != nil && x.Interval != nil {
		return *x.Interval
	}
	return 0
}

type Ifm_Interfaces_Interface_ArpPortSecurity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L2SubInterface *Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface `protobuf:"bytes,1,opt,name=l2_sub_interface,json=l2SubInterface" json:"l2_sub_interface,omitempty"`
}

func (x *Ifm_Interfaces_Interface_ArpPortSecurity) Reset() {
	*x = Ifm_Interfaces_Interface_ArpPortSecurity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_ArpPortSecurity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ArpPortSecurity) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ArpPortSecurity) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ArpPortSecurity.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ArpPortSecurity) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 30}
}

func (x *Ifm_Interfaces_Interface_ArpPortSecurity) GetL2SubInterface() *Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface {
	if x != nil {
		return x.L2SubInterface
	}
	return nil
}

type Ifm_Interfaces_Interface_Nve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attribute *Ifm_Interfaces_Interface_Nve_Attribute `protobuf:"bytes,1,opt,name=attribute" json:"attribute,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Nve) Reset() {
	*x = Ifm_Interfaces_Interface_Nve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Nve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Nve) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Nve) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Nve.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Nve) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 31}
}

func (x *Ifm_Interfaces_Interface_Nve) GetAttribute() *Ifm_Interfaces_Interface_Nve_Attribute {
	if x != nil {
		return x.Attribute
	}
	return nil
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable                     *bool                                                                   `protobuf:"varint,1,opt,name=enable" json:"enable,omitempty"`
	ReplyPacketPolicy          *Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy          `protobuf:"varint,2,opt,name=reply_packet_policy,json=replyPacketPolicy,enum=huawei_ifm.Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy" json:"reply_packet_policy,omitempty"`
	Option82                   *Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82                   `protobuf:"bytes,3,opt,name=option82" json:"option82,omitempty"`
	ServerAddresses            *Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses            `protobuf:"bytes,4,opt,name=server_addresses,json=serverAddresses" json:"server_addresses,omitempty"`
	GatewayAddresses           *Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses           `protobuf:"bytes,5,opt,name=gateway_addresses,json=gatewayAddresses" json:"gateway_addresses,omitempty"`
	RelaySourceAddress         *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress         `protobuf:"bytes,6,opt,name=relay_source_address,json=relaySourceAddress" json:"relay_source_address,omitempty"`
	RelaySourceOptionAddresses *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses `protobuf:"bytes,7,opt,name=relay_source_option_addresses,json=relaySourceOptionAddresses" json:"relay_source_option_addresses,omitempty"`
	Opt82VendorSpecifics       *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics       `protobuf:"bytes,8,opt,name=opt82_vendor_specifics,json=opt82VendorSpecifics" json:"opt82_vendor_specifics,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpRelayAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpRelayAttribute) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpRelayAttribute) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute) GetReplyPacketPolicy() Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy {
	if x != nil && x.ReplyPacketPolicy != nil {
		return *x.ReplyPacketPolicy
	}
	return Ifm_Interfaces_Interface_DhcpRelayAttribute_INVALID_ENUM_VALUE_ReplyPacketPolicy
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute) GetOption82() *Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82 {
	if x != nil {
		return x.Option82
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute) GetServerAddresses() *Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses {
	if x != nil {
		return x.ServerAddresses
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute) GetGatewayAddresses() *Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses {
	if x != nil {
		return x.GatewayAddresses
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute) GetRelaySourceAddress() *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress {
	if x != nil {
		return x.RelaySourceAddress
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute) GetRelaySourceOptionAddresses() *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses {
	if x != nil {
		return x.RelaySourceOptionAddresses
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute) GetOpt82VendorSpecifics() *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics {
	if x != nil {
		return x.Opt82VendorSpecifics
	}
	return nil
}

type Ifm_Interfaces_Interface_DhcpRelayIf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEnable          *bool                                                   `protobuf:"varint,1,opt,name=is_enable,json=isEnable" json:"is_enable,omitempty"`
	ReplyPacketPolicy *Ifm_Interfaces_Interface_DhcpRelayIf_ReplyPacketPolicy `protobuf:"varint,2,opt,name=reply_packet_policy,json=replyPacketPolicy,enum=huawei_ifm.Ifm_Interfaces_Interface_DhcpRelayIf_ReplyPacketPolicy" json:"reply_packet_policy,omitempty"`
	Option82          *Ifm_Interfaces_Interface_DhcpRelayIf_Option82          `protobuf:"bytes,3,opt,name=option82" json:"option82,omitempty"`
	ServerAddresses   *Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses   `protobuf:"bytes,4,opt,name=server_addresses,json=serverAddresses" json:"server_addresses,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpRelayIf) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpRelayIf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpRelayIf) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpRelayIf) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayIf.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpRelayIf) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 33}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayIf) GetIsEnable() bool {
	if x != nil && x.IsEnable != nil {
		return *x.IsEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpRelayIf) GetReplyPacketPolicy() Ifm_Interfaces_Interface_DhcpRelayIf_ReplyPacketPolicy {
	if x != nil && x.ReplyPacketPolicy != nil {
		return *x.ReplyPacketPolicy
	}
	return Ifm_Interfaces_Interface_DhcpRelayIf_INVALID_ENUM_VALUE_ReplyPacketPolicy
}

func (x *Ifm_Interfaces_Interface_DhcpRelayIf) GetOption82() *Ifm_Interfaces_Interface_DhcpRelayIf_Option82 {
	if x != nil {
		return x.Option82
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_DhcpRelayIf) GetServerAddresses() *Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses {
	if x != nil {
		return x.ServerAddresses
	}
	return nil
}

type Ifm_Interfaces_Interface_DhcpIf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DhcpPacketSetting     *Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting     `protobuf:"bytes,1,opt,name=dhcp_packet_setting,json=dhcpPacketSetting" json:"dhcp_packet_setting,omitempty"`
	Option82Formats       *Ifm_Interfaces_Interface_DhcpIf_Option82Formats       `protobuf:"bytes,2,opt,name=option82_formats,json=option82Formats" json:"option82_formats,omitempty"`
	Option82InsertSetting *Ifm_Interfaces_Interface_DhcpIf_Option82InsertSetting `protobuf:"bytes,3,opt,name=option82_insert_setting,json=option82InsertSetting" json:"option82_insert_setting,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpIf) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpIf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpIf) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpIf) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpIf.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpIf) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 34}
}

func (x *Ifm_Interfaces_Interface_DhcpIf) GetDhcpPacketSetting() *Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting {
	if x != nil {
		return x.DhcpPacketSetting
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_DhcpIf) GetOption82Formats() *Ifm_Interfaces_Interface_DhcpIf_Option82Formats {
	if x != nil {
		return x.Option82Formats
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_DhcpIf) GetOption82InsertSetting() *Ifm_Interfaces_Interface_DhcpIf_Option82InsertSetting {
	if x != nil {
		return x.Option82InsertSetting
	}
	return nil
}

type Ifm_Interfaces_Interface_DhcpClientIf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressAllocation *bool                                                   `protobuf:"varint,1,opt,name=address_allocation,json=addressAllocation" json:"address_allocation,omitempty"`
	ExpectedLease     *uint32                                                 `protobuf:"varint,2,opt,name=expected_lease,json=expectedLease" json:"expected_lease,omitempty"`
	Option60          *string                                                 `protobuf:"bytes,3,opt,name=option60" json:"option60,omitempty"`
	ClientStatus      *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus     `protobuf:"bytes,4,opt,name=client_status,json=clientStatus" json:"client_status,omitempty"`
	ClientStatistics  *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics `protobuf:"bytes,5,opt,name=client_statistics,json=clientStatistics" json:"client_statistics,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpClientIf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpClientIf) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpClientIf) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpClientIf.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpClientIf) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 35}
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf) GetAddressAllocation() bool {
	if x != nil && x.AddressAllocation != nil {
		return *x.AddressAllocation
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf) GetExpectedLease() uint32 {
	if x != nil && x.ExpectedLease != nil {
		return *x.ExpectedLease
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf) GetOption60() string {
	if x != nil && x.Option60 != nil {
		return *x.Option60
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf) GetClientStatus() *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus {
	if x != nil {
		return x.ClientStatus
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf) GetClientStatistics() *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics {
	if x != nil {
		return x.ClientStatistics
	}
	return nil
}

type Ifm_Interfaces_Interface_DhcpSnoopingIf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicAttribute *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute `protobuf:"bytes,1,opt,name=basic_attribute,json=basicAttribute" json:"basic_attribute,omitempty"`
	StaticBinds    *Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds    `protobuf:"bytes,2,opt,name=static_binds,json=staticBinds" json:"static_binds,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpSnoopingIf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpSnoopingIf) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpSnoopingIf.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpSnoopingIf) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 36}
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf) GetBasicAttribute() *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute {
	if x != nil {
		return x.BasicAttribute
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf) GetStaticBinds() *Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds {
	if x != nil {
		return x.StaticBinds
	}
	return nil
}

type Ifm_Interfaces_Interface_Dhcpv6RelayAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceAddress        *string                                                             `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
	LinkAddress          *string                                                             `protobuf:"bytes,2,opt,name=link_address,json=linkAddress" json:"link_address,omitempty"`
	StrictCheck          *bool                                                               `protobuf:"varint,3,opt,name=strict_check,json=strictCheck" json:"strict_check,omitempty"`
	ServerGroupName      *string                                                             `protobuf:"bytes,4,opt,name=server_group_name,json=serverGroupName" json:"server_group_name,omitempty"`
	DestinationAddresses *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses `protobuf:"bytes,5,opt,name=destination_addresses,json=destinationAddresses" json:"destination_addresses,omitempty"`
	DestinationIfs       *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs       `protobuf:"bytes,6,opt,name=destination_ifs,json=destinationIfs" json:"destination_ifs,omitempty"`
	RebuildOption        *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption        `protobuf:"bytes,7,opt,name=rebuild_option,json=rebuildOption" json:"rebuild_option,omitempty"`
	AccessLimitSetting   *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting   `protobuf:"bytes,8,opt,name=access_limit_setting,json=accessLimitSetting" json:"access_limit_setting,omitempty"`
	PdRouteTrackVrrp     *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_PdRouteTrackVrrp     `protobuf:"bytes,9,opt,name=pd_route_track_vrrp,json=pdRouteTrackVrrp" json:"pd_route_track_vrrp,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) Reset() {
	*x = Ifm_Interfaces_Interface_Dhcpv6RelayAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dhcpv6RelayAttribute.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 37}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) GetSourceAddress() string {
	if x != nil && x.SourceAddress != nil {
		return *x.SourceAddress
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) GetLinkAddress() string {
	if x != nil && x.LinkAddress != nil {
		return *x.LinkAddress
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) GetStrictCheck() bool {
	if x != nil && x.StrictCheck != nil {
		return *x.StrictCheck
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) GetServerGroupName() string {
	if x != nil && x.ServerGroupName != nil {
		return *x.ServerGroupName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) GetDestinationAddresses() *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses {
	if x != nil {
		return x.DestinationAddresses
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) GetDestinationIfs() *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs {
	if x != nil {
		return x.DestinationIfs
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) GetRebuildOption() *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption {
	if x != nil {
		return x.RebuildOption
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) GetAccessLimitSetting() *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting {
	if x != nil {
		return x.AccessLimitSetting
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute) GetPdRouteTrackVrrp() *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_PdRouteTrackVrrp {
	if x != nil {
		return x.PdRouteTrackVrrp
	}
	return nil
}

type Ifm_Interfaces_Interface_If8021PPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *uint32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (x *Ifm_Interfaces_Interface_If8021PPriority) Reset() {
	*x = Ifm_Interfaces_Interface_If8021PPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_If8021PPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_If8021PPriority) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_If8021PPriority) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_If8021PPriority.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_If8021PPriority) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 38}
}

func (x *Ifm_Interfaces_Interface_If8021PPriority) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type Ifm_Interfaces_Interface_ManagementPlaneDefendIf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId *uint32 `protobuf:"varint,1,opt,name=policy_id,json=policyId" json:"policy_id,omitempty"`
}

func (x *Ifm_Interfaces_Interface_ManagementPlaneDefendIf) Reset() {
	*x = Ifm_Interfaces_Interface_ManagementPlaneDefendIf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_ManagementPlaneDefendIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ManagementPlaneDefendIf) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ManagementPlaneDefendIf) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ManagementPlaneDefendIf.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ManagementPlaneDefendIf) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 39}
}

func (x *Ifm_Interfaces_Interface_ManagementPlaneDefendIf) GetPolicyId() uint32 {
	if x != nil && x.PolicyId != nil {
		return *x.PolicyId
	}
	return 0
}

type Ifm_Interfaces_Interface_FrEncapsulation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Encapsulation *Ifm_Interfaces_Interface_FrEncapsulation_Encapsulation `protobuf:"varint,1,opt,name=encapsulation,enum=huawei_ifm.Ifm_Interfaces_Interface_FrEncapsulation_Encapsulation" json:"encapsulation,omitempty"`
}

func (x *Ifm_Interfaces_Interface_FrEncapsulation) Reset() {
	*x = Ifm_Interfaces_Interface_FrEncapsulation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_FrEncapsulation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_FrEncapsulation) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_FrEncapsulation) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_FrEncapsulation.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_FrEncapsulation) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 40}
}

func (x *Ifm_Interfaces_Interface_FrEncapsulation) GetEncapsulation() Ifm_Interfaces_Interface_FrEncapsulation_Encapsulation {
	if x != nil && x.Encapsulation != nil {
		return *x.Encapsulation
	}
	return Ifm_Interfaces_Interface_FrEncapsulation_INVALID_ENUM_VALUE_Encapsulation
}

type Ifm_Interfaces_Interface_TrackMonitorGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DownWeight *uint32 `protobuf:"varint,2,opt,name=down_weight,json=downWeight" json:"down_weight,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TrackMonitorGroup) Reset() {
	*x = Ifm_Interfaces_Interface_TrackMonitorGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TrackMonitorGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TrackMonitorGroup) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_TrackMonitorGroup) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TrackMonitorGroup.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TrackMonitorGroup) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 41}
}

func (x *Ifm_Interfaces_Interface_TrackMonitorGroup) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_TrackMonitorGroup) GetDownWeight() uint32 {
	if x != nil && x.DownWeight != nil {
		return *x.DownWeight
	}
	return 0
}

type Ifm_Interfaces_Interface_Nvo3VtepStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nvo3VtepStatistic []*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic `protobuf:"bytes,1,rep,name=nvo3_vtep_statistic,json=nvo3VtepStatistic" json:"nvo3_vtep_statistic,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics) Reset() {
	*x = Ifm_Interfaces_Interface_Nvo3VtepStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Nvo3VtepStatistics) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Nvo3VtepStatistics.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Nvo3VtepStatistics) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 42}
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics) GetNvo3VtepStatistic() []*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic {
	if x != nil {
		return x.Nvo3VtepStatistic
	}
	return nil
}

type Ifm_Interfaces_Interface_IfIcmpSecuritys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IfIcmpSecurity []*Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity `protobuf:"bytes,1,rep,name=if_icmp_security,json=ifIcmpSecurity" json:"if_icmp_security,omitempty"`
}

func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys) Reset() {
	*x = Ifm_Interfaces_Interface_IfIcmpSecuritys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfIcmpSecuritys) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfIcmpSecuritys.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfIcmpSecuritys) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 43}
}

func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys) GetIfIcmpSecurity() []*Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity {
	if x != nil {
		return x.IfIcmpSecurity
	}
	return nil
}

type Ifm_Interfaces_Interface_IfIpOptSecuritys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IfIpOptSecurity []*Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity `protobuf:"bytes,1,rep,name=if_ip_opt_security,json=ifIpOptSecurity" json:"if_ip_opt_security,omitempty"`
}

func (x *Ifm_Interfaces_Interface_IfIpOptSecuritys) Reset() {
	*x = Ifm_Interfaces_Interface_IfIpOptSecuritys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_IfIpOptSecuritys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfIpOptSecuritys) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfIpOptSecuritys) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfIpOptSecuritys.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfIpOptSecuritys) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 44}
}

func (x *Ifm_Interfaces_Interface_IfIpOptSecuritys) GetIfIpOptSecurity() []*Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity {
	if x != nil {
		return x.IfIpOptSecurity
	}
	return nil
}

type Ifm_Interfaces_Interface_IpVerifySrcAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_IpVerifySrcAddr) Reset() {
	*x = Ifm_Interfaces_Interface_IpVerifySrcAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_IpVerifySrcAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IpVerifySrcAddr) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IpVerifySrcAddr) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IpVerifySrcAddr.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IpVerifySrcAddr) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 45}
}

type Ifm_Interfaces_Interface_IpFwdBroadcast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AclNameOrNum *string `protobuf:"bytes,1,opt,name=acl_name_or_num,json=aclNameOrNum" json:"acl_name_or_num,omitempty"`
}

func (x *Ifm_Interfaces_Interface_IpFwdBroadcast) Reset() {
	*x = Ifm_Interfaces_Interface_IpFwdBroadcast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_IpFwdBroadcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IpFwdBroadcast) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IpFwdBroadcast) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IpFwdBroadcast.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IpFwdBroadcast) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 46}
}

func (x *Ifm_Interfaces_Interface_IpFwdBroadcast) GetAclNameOrNum() string {
	if x != nil && x.AclNameOrNum != nil {
		return *x.AclNameOrNum
	}
	return ""
}

type Ifm_Interfaces_Interface_Trunk_Members struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member []*Ifm_Interfaces_Interface_Trunk_Members_Member `protobuf:"bytes,1,rep,name=member" json:"member,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Trunk_Members) Reset() {
	*x = Ifm_Interfaces_Interface_Trunk_Members{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Trunk_Members) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Trunk_Members) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Trunk_Members) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Members.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Trunk_Members) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3, 0}
}

func (x *Ifm_Interfaces_Interface_Trunk_Members) GetMember() []*Ifm_Interfaces_Interface_Trunk_Members_Member {
	if x != nil {
		return x.Member
	}
	return nil
}

type Ifm_Interfaces_Interface_Trunk_Lacp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiveTimeoutType *Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType `protobuf:"varint,1,opt,name=receive_timeout_type,json=receiveTimeoutType,enum=huawei_ifm.Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType" json:"receive_timeout_type,omitempty"`
	FastTimeoutValue   *uint32                                                 `protobuf:"varint,2,opt,name=fast_timeout_value,json=fastTimeoutValue" json:"fast_timeout_value,omitempty"`
	SupportPreempt     *bool                                                   `protobuf:"varint,3,opt,name=support_preempt,json=supportPreempt" json:"support_preempt,omitempty"`
	SelectPortStd      *Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd      `protobuf:"varint,4,opt,name=select_port_std,json=selectPortStd,enum=huawei_ifm.Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd" json:"select_port_std,omitempty"`
	PreemptDelay       *uint32                                                 `protobuf:"varint,5,opt,name=preempt_delay,json=preemptDelay" json:"preempt_delay,omitempty"`
	MaxActiveNum       *uint32                                                 `protobuf:"varint,6,opt,name=max_active_num,json=maxActiveNum" json:"max_active_num,omitempty"`
	CollectMaxDelay    *uint32                                                 `protobuf:"varint,7,opt,name=collect_max_delay,json=collectMaxDelay" json:"collect_max_delay,omitempty"`
	MixRateEnable      *bool                                                   `protobuf:"varint,8,opt,name=mix_rate_enable,json=mixRateEnable" json:"mix_rate_enable,omitempty"`
	BackupEnable       *bool                                                   `protobuf:"varint,9,opt,name=backup_enable,json=backupEnable" json:"backup_enable,omitempty"`
	DampStateEnable    *bool                                                   `protobuf:"varint,10,opt,name=damp_state_enable,json=dampStateEnable" json:"damp_state_enable,omitempty"`
	DampMacEnable      *bool                                                   `protobuf:"varint,11,opt,name=damp_mac_enable,json=dampMacEnable" json:"damp_mac_enable,omitempty"`
	SysMac             *string                                                 `protobuf:"bytes,12,opt,name=sys_mac,json=sysMac" json:"sys_mac,omitempty"`
	TrackVrrp          *Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp          `protobuf:"bytes,13,opt,name=track_vrrp,json=trackVrrp" json:"track_vrrp,omitempty"`
	PortupNum          *uint32                                                 `protobuf:"varint,14,opt,name=portup_num,json=portupNum" json:"portup_num,omitempty"`
	OperSyspri         *uint32                                                 `protobuf:"varint,15,opt,name=oper_syspri,json=operSyspri" json:"oper_syspri,omitempty"`
	OperSysmac         *string                                                 `protobuf:"bytes,16,opt,name=oper_sysmac,json=operSysmac" json:"oper_sysmac,omitempty"`
	SysmacSource       *Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource       `protobuf:"varint,17,opt,name=sysmac_source,json=sysmacSource,enum=huawei_ifm.Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource" json:"sysmac_source,omitempty"`
	SysPriority        *uint32                                                 `protobuf:"varint,18,opt,name=sys_priority,json=sysPriority" json:"sys_priority,omitempty"`
	MLag               *Ifm_Interfaces_Interface_Trunk_Lacp_MLag               `protobuf:"bytes,19,opt,name=m_lag,json=mLag" json:"m_lag,omitempty"`
	Portkey            *uint32                                                 `protobuf:"varint,20,opt,name=portkey" json:"portkey,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) Reset() {
	*x = Ifm_Interfaces_Interface_Trunk_Lacp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Trunk_Lacp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Lacp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Trunk_Lacp) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3, 1}
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetReceiveTimeoutType() Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType {
	if x != nil && x.ReceiveTimeoutType != nil {
		return *x.ReceiveTimeoutType
	}
	return Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType_SLOW
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetFastTimeoutValue() uint32 {
	if x != nil && x.FastTimeoutValue != nil {
		return *x.FastTimeoutValue
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetSupportPreempt() bool {
	if x != nil && x.SupportPreempt != nil {
		return *x.SupportPreempt
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetSelectPortStd() Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd {
	if x != nil && x.SelectPortStd != nil {
		return *x.SelectPortStd
	}
	return Ifm_Interfaces_Interface_Trunk_Lacp_INVALID_ENUM_VALUE_SelectPortStd
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetPreemptDelay() uint32 {
	if x != nil && x.PreemptDelay != nil {
		return *x.PreemptDelay
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetMaxActiveNum() uint32 {
	if x != nil && x.MaxActiveNum != nil {
		return *x.MaxActiveNum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetCollectMaxDelay() uint32 {
	if x != nil && x.CollectMaxDelay != nil {
		return *x.CollectMaxDelay
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetMixRateEnable() bool {
	if x != nil && x.MixRateEnable != nil {
		return *x.MixRateEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetBackupEnable() bool {
	if x != nil && x.BackupEnable != nil {
		return *x.BackupEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetDampStateEnable() bool {
	if x != nil && x.DampStateEnable != nil {
		return *x.DampStateEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetDampMacEnable() bool {
	if x != nil && x.DampMacEnable != nil {
		return *x.DampMacEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetSysMac() string {
	if x != nil && x.SysMac != nil {
		return *x.SysMac
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetTrackVrrp() *Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp {
	if x != nil {
		return x.TrackVrrp
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetPortupNum() uint32 {
	if x != nil && x.PortupNum != nil {
		return *x.PortupNum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetOperSyspri() uint32 {
	if x != nil && x.OperSyspri != nil {
		return *x.OperSyspri
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetOperSysmac() string {
	if x != nil && x.OperSysmac != nil {
		return *x.OperSysmac
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetSysmacSource() Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource {
	if x != nil && x.SysmacSource != nil {
		return *x.SysmacSource
	}
	return Ifm_Interfaces_Interface_Trunk_Lacp_INVALID_ENUM_VALUE_SysmacSource
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetSysPriority() uint32 {
	if x != nil && x.SysPriority != nil {
		return *x.SysPriority
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetMLag() *Ifm_Interfaces_Interface_Trunk_Lacp_MLag {
	if x != nil {
		return x.MLag
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp) GetPortkey() uint32 {
	if x != nil && x.Portkey != nil {
		return *x.Portkey
	}
	return 0
}

type Ifm_Interfaces_Interface_Trunk_Forwardings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Forwarding []*Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding `protobuf:"bytes,1,rep,name=forwarding" json:"forwarding,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Trunk_Forwardings) Reset() {
	*x = Ifm_Interfaces_Interface_Trunk_Forwardings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Trunk_Forwardings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Trunk_Forwardings) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Trunk_Forwardings) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Forwardings.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Trunk_Forwardings) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3, 2}
}

func (x *Ifm_Interfaces_Interface_Trunk_Forwardings) GetForwarding() []*Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding {
	if x != nil {
		return x.Forwarding
	}
	return nil
}

type Ifm_Interfaces_Interface_Trunk_Members_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                *string                                                            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Weight              *uint32                                                            `protobuf:"varint,2,opt,name=weight" json:"weight,omitempty"`
	MemberState         *Ifm_Interfaces_Interface_Trunk_Members_Member_MemberState         `protobuf:"varint,3,opt,name=member_state,json=memberState,enum=huawei_ifm.Ifm_Interfaces_Interface_Trunk_Members_Member_MemberState" json:"member_state,omitempty"`
	Status              *Ifm_Interfaces_Interface_Trunk_Members_Member_Status              `protobuf:"varint,4,opt,name=status,enum=huawei_ifm.Ifm_Interfaces_Interface_Trunk_Members_Member_Status" json:"status,omitempty"`
	IsMaster            *bool                                                              `protobuf:"varint,5,opt,name=is_master,json=isMaster" json:"is_master,omitempty"`
	Role                *Ifm_Interfaces_Interface_Trunk_Members_Member_Role                `protobuf:"varint,6,opt,name=role,enum=huawei_ifm.Ifm_Interfaces_Interface_Trunk_Members_Member_Role" json:"role,omitempty"`
	LacpNegotiationMode *Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode `protobuf:"varint,7,opt,name=lacp_negotiation_mode,json=lacpNegotiationMode,enum=huawei_ifm.Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode" json:"lacp_negotiation_mode,omitempty"`
	Lacp                *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp                `protobuf:"bytes,8,opt,name=lacp" json:"lacp,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member) Reset() {
	*x = Ifm_Interfaces_Interface_Trunk_Members_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Trunk_Members_Member) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Members_Member.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Trunk_Members_Member) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member) GetWeight() uint32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member) GetMemberState() Ifm_Interfaces_Interface_Trunk_Members_Member_MemberState {
	if x != nil && x.MemberState != nil {
		return *x.MemberState
	}
	return Ifm_Interfaces_Interface_Trunk_Members_Member_MemberState_DOWN
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member) GetStatus() Ifm_Interfaces_Interface_Trunk_Members_Member_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Ifm_Interfaces_Interface_Trunk_Members_Member_Status_DOWN
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member) GetIsMaster() bool {
	if x != nil && x.IsMaster != nil {
		return *x.IsMaster
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member) GetRole() Ifm_Interfaces_Interface_Trunk_Members_Member_Role {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return Ifm_Interfaces_Interface_Trunk_Members_Member_Role_SLAVE
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member) GetLacpNegotiationMode() Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode {
	if x != nil && x.LacpNegotiationMode != nil {
		return *x.LacpNegotiationMode
	}
	return Ifm_Interfaces_Interface_Trunk_Members_Member_INVALID_ENUM_VALUE_LacpNegotiationMode
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member) GetLacp() *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp {
	if x != nil {
		return x.Lacp
	}
	return nil
}

type Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortAttributes         *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes         `protobuf:"bytes,1,opt,name=port_attributes,json=portAttributes" json:"port_attributes,omitempty"`
	PortNegotiateParameter *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter `protobuf:"bytes,2,opt,name=port_negotiate_parameter,json=portNegotiateParameter" json:"port_negotiate_parameter,omitempty"`
	PduStatistic           *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic           `protobuf:"bytes,3,opt,name=pdu_statistic,json=pduStatistic" json:"pdu_statistic,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp) Reset() {
	*x = Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3, 0, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp) GetPortAttributes() *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes {
	if x != nil {
		return x.PortAttributes
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp) GetPortNegotiateParameter() *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter {
	if x != nil {
		return x.PortNegotiateParameter
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp) GetPduStatistic() *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic {
	if x != nil {
		return x.PduStatistic
	}
	return nil
}

type Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority *uint32                                                                 `protobuf:"varint,1,opt,name=priority" json:"priority,omitempty"`
	Role     *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role `protobuf:"varint,2,opt,name=role,enum=huawei_ifm.Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role" json:"role,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes) Reset() {
	*x = Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3, 0, 0, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes) GetRole() Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role_NONE
}

type Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status   `protobuf:"varint,1,opt,name=status,enum=huawei_ifm.Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status" json:"status,omitempty"`
	PortType         *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType `protobuf:"varint,2,opt,name=port_type,json=portType,enum=huawei_ifm.Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType" json:"port_type,omitempty"`
	ActorState       *string                                                                             `protobuf:"bytes,3,opt,name=actor_state,json=actorState" json:"actor_state,omitempty"`
	ActorPortkey     *uint32                                                                             `protobuf:"varint,4,opt,name=actor_portkey,json=actorPortkey" json:"actor_portkey,omitempty"`
	ActorSysid       *string                                                                             `protobuf:"bytes,5,opt,name=actor_sysid,json=actorSysid" json:"actor_sysid,omitempty"`
	ActorPortno      *uint32                                                                             `protobuf:"varint,6,opt,name=actor_portno,json=actorPortno" json:"actor_portno,omitempty"`
	PartnerSysprimac *string                                                                             `protobuf:"bytes,7,opt,name=partner_sysprimac,json=partnerSysprimac" json:"partner_sysprimac,omitempty"`
	PartnerSyspri    *uint32                                                                             `protobuf:"varint,8,opt,name=partner_syspri,json=partnerSyspri" json:"partner_syspri,omitempty"`
	PartnerSysid     *string                                                                             `protobuf:"bytes,9,opt,name=partner_sysid,json=partnerSysid" json:"partner_sysid,omitempty"`
	PartnerPortpri   *uint32                                                                             `protobuf:"varint,10,opt,name=partner_portpri,json=partnerPortpri" json:"partner_portpri,omitempty"`
	PartnerId        *uint32                                                                             `protobuf:"varint,11,opt,name=partner_id,json=partnerId" json:"partner_id,omitempty"`
	PartnerPortkey   *uint32                                                                             `protobuf:"varint,12,opt,name=partner_portkey,json=partnerPortkey" json:"partner_portkey,omitempty"`
	PartnerState     *string                                                                             `protobuf:"bytes,13,opt,name=partner_state,json=partnerState" json:"partner_state,omitempty"`
	ReferencePort    *bool                                                                               `protobuf:"varint,14,opt,name=reference_port,json=referencePort" json:"reference_port,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) Reset() {
	*x = Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3, 0, 0, 0, 1}
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetStatus() Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status_UNSELECTED
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetPortType() Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType {
	if x != nil && x.PortType != nil {
		return *x.PortType
	}
	return Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType_NULL
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetActorState() string {
	if x != nil && x.ActorState != nil {
		return *x.ActorState
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetActorPortkey() uint32 {
	if x != nil && x.ActorPortkey != nil {
		return *x.ActorPortkey
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetActorSysid() string {
	if x != nil && x.ActorSysid != nil {
		return *x.ActorSysid
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetActorPortno() uint32 {
	if x != nil && x.ActorPortno != nil {
		return *x.ActorPortno
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetPartnerSysprimac() string {
	if x != nil && x.PartnerSysprimac != nil {
		return *x.PartnerSysprimac
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetPartnerSyspri() uint32 {
	if x != nil && x.PartnerSyspri != nil {
		return *x.PartnerSyspri
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetPartnerSysid() string {
	if x != nil && x.PartnerSysid != nil {
		return *x.PartnerSysid
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetPartnerPortpri() uint32 {
	if x != nil && x.PartnerPortpri != nil {
		return *x.PartnerPortpri
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetPartnerId() uint32 {
	if x != nil && x.PartnerId != nil {
		return *x.PartnerId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetPartnerPortkey() uint32 {
	if x != nil && x.PartnerPortkey != nil {
		return *x.PartnerPortkey
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetPartnerState() string {
	if x != nil && x.PartnerState != nil {
		return *x.PartnerState
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter) GetReferencePort() bool {
	if x != nil && x.ReferencePort != nil {
		return *x.ReferencePort
	}
	return false
}

type Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecvPdunum       *uint32 `protobuf:"varint,1,opt,name=recv_pdunum,json=recvPdunum" json:"recv_pdunum,omitempty"`
	RecvErrPdunum    *uint32 `protobuf:"varint,2,opt,name=recv_err_pdunum,json=recvErrPdunum" json:"recv_err_pdunum,omitempty"`
	SendPdunum       *uint32 `protobuf:"varint,3,opt,name=send_pdunum,json=sendPdunum" json:"send_pdunum,omitempty"`
	RecvMarkerPdunum *uint32 `protobuf:"varint,4,opt,name=recv_marker_pdunum,json=recvMarkerPdunum" json:"recv_marker_pdunum,omitempty"`
	RecvErrMakernum  *uint32 `protobuf:"varint,5,opt,name=recv_err_makernum,json=recvErrMakernum" json:"recv_err_makernum,omitempty"`
	SendMakernum     *uint32 `protobuf:"varint,6,opt,name=send_makernum,json=sendMakernum" json:"send_makernum,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic) Reset() {
	*x = Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3, 0, 0, 0, 2}
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic) GetRecvPdunum() uint32 {
	if x != nil && x.RecvPdunum != nil {
		return *x.RecvPdunum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic) GetRecvErrPdunum() uint32 {
	if x != nil && x.RecvErrPdunum != nil {
		return *x.RecvErrPdunum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic) GetSendPdunum() uint32 {
	if x != nil && x.SendPdunum != nil {
		return *x.SendPdunum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic) GetRecvMarkerPdunum() uint32 {
	if x != nil && x.RecvMarkerPdunum != nil {
		return *x.RecvMarkerPdunum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic) GetRecvErrMakernum() uint32 {
	if x != nil && x.RecvErrMakernum != nil {
		return *x.RecvErrMakernum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic) GetSendMakernum() uint32 {
	if x != nil && x.SendMakernum != nil {
		return *x.SendMakernum
	}
	return 0
}

type Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VrrpId      *uint32 `protobuf:"varint,1,opt,name=vrrp_id,json=vrrpId" json:"vrrp_id,omitempty"`
	IfName      *string `protobuf:"bytes,2,opt,name=if_name,json=ifName" json:"if_name,omitempty"`
	SysPriority *uint32 `protobuf:"varint,3,opt,name=sys_priority,json=sysPriority" json:"sys_priority,omitempty"`
	IdExt       *bool   `protobuf:"varint,4,opt,name=id_ext,json=idExt" json:"id_ext,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp) Reset() {
	*x = Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp) GetVrrpId() uint32 {
	if x != nil && x.VrrpId != nil {
		return *x.VrrpId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp) GetIfName() string {
	if x != nil && x.IfName != nil {
		return *x.IfName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp) GetSysPriority() uint32 {
	if x != nil && x.SysPriority != nil {
		return *x.SysPriority
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp) GetIdExt() bool {
	if x != nil && x.IdExt != nil {
		return *x.IdExt
	}
	return false
}

type Ifm_Interfaces_Interface_Trunk_Lacp_MLag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SysPriority *uint32 `protobuf:"varint,1,opt,name=sys_priority,json=sysPriority" json:"sys_priority,omitempty"`
	SysMac      *string `protobuf:"bytes,2,opt,name=sys_mac,json=sysMac" json:"sys_mac,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp_MLag) Reset() {
	*x = Ifm_Interfaces_Interface_Trunk_Lacp_MLag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp_MLag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Trunk_Lacp_MLag) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp_MLag) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Lacp_MLag.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Trunk_Lacp_MLag) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3, 1, 1}
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp_MLag) GetSysPriority() uint32 {
	if x != nil && x.SysPriority != nil {
		return *x.SysPriority
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Lacp_MLag) GetSysMac() string {
	if x != nil && x.SysMac != nil {
		return *x.SysMac
	}
	return ""
}

type Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	MasterPort *string `protobuf:"bytes,2,opt,name=master_port,json=masterPort" json:"master_port,omitempty"`
	SlavePort  *string `protobuf:"bytes,3,opt,name=slave_port,json=slavePort" json:"slave_port,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding) Reset() {
	*x = Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 3, 2, 0}
}

func (x *Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding) GetMasterPort() string {
	if x != nil && x.MasterPort != nil {
		return *x.MasterPort
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding) GetSlavePort() string {
	if x != nil && x.SlavePort != nil {
		return *x.SlavePort
	}
	return ""
}

type Ifm_Interfaces_Interface_Bas_AccessType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Layer2Subscriber *Ifm_Interfaces_Interface_Bas_AccessType_Layer2Subscriber `protobuf:"bytes,1,opt,name=layer2_subscriber,json=layer2Subscriber" json:"layer2_subscriber,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Bas_AccessType) Reset() {
	*x = Ifm_Interfaces_Interface_Bas_AccessType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Bas_AccessType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Bas_AccessType) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Bas_AccessType) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Bas_AccessType.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Bas_AccessType) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 4, 0}
}

func (x *Ifm_Interfaces_Interface_Bas_AccessType) GetLayer2Subscriber() *Ifm_Interfaces_Interface_Bas_AccessType_Layer2Subscriber {
	if x != nil {
		return x.Layer2Subscriber
	}
	return nil
}

type Ifm_Interfaces_Interface_Bas_AccessType_Layer2Subscriber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Bas_AccessType_Layer2Subscriber) Reset() {
	*x = Ifm_Interfaces_Interface_Bas_AccessType_Layer2Subscriber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Bas_AccessType_Layer2Subscriber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Bas_AccessType_Layer2Subscriber) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Bas_AccessType_Layer2Subscriber) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Bas_AccessType_Layer2Subscriber.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Bas_AccessType_Layer2Subscriber) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 4, 0, 0}
}

type Ifm_Interfaces_Interface_MulticastBas_VlanType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qinq *Ifm_Interfaces_Interface_MulticastBas_VlanType_Qinq `protobuf:"bytes,1,opt,name=qinq" json:"qinq,omitempty"`
	Vlan *Ifm_Interfaces_Interface_MulticastBas_VlanType_Vlan `protobuf:"bytes,2,opt,name=vlan" json:"vlan,omitempty"`
}

func (x *Ifm_Interfaces_Interface_MulticastBas_VlanType) Reset() {
	*x = Ifm_Interfaces_Interface_MulticastBas_VlanType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_MulticastBas_VlanType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_MulticastBas_VlanType) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_MulticastBas_VlanType) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_MulticastBas_VlanType.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_MulticastBas_VlanType) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 5, 0}
}

func (x *Ifm_Interfaces_Interface_MulticastBas_VlanType) GetQinq() *Ifm_Interfaces_Interface_MulticastBas_VlanType_Qinq {
	if x != nil {
		return x.Qinq
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_MulticastBas_VlanType) GetVlan() *Ifm_Interfaces_Interface_MulticastBas_VlanType_Vlan {
	if x != nil {
		return x.Vlan
	}
	return nil
}

type Ifm_Interfaces_Interface_MulticastBas_VlanType_Qinq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAggregationPevlan *uint32 `protobuf:"varint,1,opt,name=user_aggregation_pevlan,json=userAggregationPevlan" json:"user_aggregation_pevlan,omitempty"`
	UserAggregationCevlan *uint32 `protobuf:"varint,2,opt,name=user_aggregation_cevlan,json=userAggregationCevlan" json:"user_aggregation_cevlan,omitempty"`
}

func (x *Ifm_Interfaces_Interface_MulticastBas_VlanType_Qinq) Reset() {
	*x = Ifm_Interfaces_Interface_MulticastBas_VlanType_Qinq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_MulticastBas_VlanType_Qinq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_MulticastBas_VlanType_Qinq) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_MulticastBas_VlanType_Qinq) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_MulticastBas_VlanType_Qinq.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_MulticastBas_VlanType_Qinq) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 5, 0, 0}
}

func (x *Ifm_Interfaces_Interface_MulticastBas_VlanType_Qinq) GetUserAggregationPevlan() uint32 {
	if x != nil && x.UserAggregationPevlan != nil {
		return *x.UserAggregationPevlan
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_MulticastBas_VlanType_Qinq) GetUserAggregationCevlan() uint32 {
	if x != nil && x.UserAggregationCevlan != nil {
		return *x.UserAggregationCevlan
	}
	return 0
}

type Ifm_Interfaces_Interface_MulticastBas_VlanType_Vlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAggregationVlan *uint32 `protobuf:"varint,1,opt,name=user_aggregation_vlan,json=userAggregationVlan" json:"user_aggregation_vlan,omitempty"`
}

func (x *Ifm_Interfaces_Interface_MulticastBas_VlanType_Vlan) Reset() {
	*x = Ifm_Interfaces_Interface_MulticastBas_VlanType_Vlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_MulticastBas_VlanType_Vlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_MulticastBas_VlanType_Vlan) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_MulticastBas_VlanType_Vlan) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_MulticastBas_VlanType_Vlan.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_MulticastBas_VlanType_Vlan) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 5, 0, 1}
}

func (x *Ifm_Interfaces_Interface_MulticastBas_VlanType_Vlan) GetUserAggregationVlan() uint32 {
	if x != nil && x.UserAggregationVlan != nil {
		return *x.UserAggregationVlan
	}
	return 0
}

type Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IfTrackAdminVrrp []*Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps_IfTrackAdminVrrp `protobuf:"bytes,1,rep,name=if_track_admin_vrrp,json=ifTrackAdminVrrp" json:"if_track_admin_vrrp,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps) Reset() {
	*x = Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 6, 0}
}

func (x *Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps) GetIfTrackAdminVrrp() []*Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps_IfTrackAdminVrrp {
	if x != nil {
		return x.IfTrackAdminVrrp
	}
	return nil
}

type Ifm_Interfaces_Interface_Vrrp_BackupGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TtlcheckFlag      *bool                                                         `protobuf:"varint,1,opt,name=ttlcheck_flag,json=ttlcheckFlag" json:"ttlcheck_flag,omitempty"`
	RecoverDelay      *uint32                                                       `protobuf:"varint,2,opt,name=recover_delay,json=recoverDelay" json:"recover_delay,omitempty"`
	ArpsendSimple     *bool                                                         `protobuf:"varint,3,opt,name=arpsend_simple,json=arpsendSimple" json:"arpsend_simple,omitempty"`
	AdvertiseSendMode *Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode `protobuf:"bytes,4,opt,name=advertise_send_mode,json=advertiseSendMode" json:"advertise_send_mode,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Vrrp_BackupGroups) Reset() {
	*x = Ifm_Interfaces_Interface_Vrrp_BackupGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Vrrp_BackupGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Vrrp_BackupGroups) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Vrrp_BackupGroups) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Vrrp_BackupGroups.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Vrrp_BackupGroups) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 6, 1}
}

func (x *Ifm_Interfaces_Interface_Vrrp_BackupGroups) GetTtlcheckFlag() bool {
	if x != nil && x.TtlcheckFlag != nil {
		return *x.TtlcheckFlag
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Vrrp_BackupGroups) GetRecoverDelay() uint32 {
	if x != nil && x.RecoverDelay != nil {
		return *x.RecoverDelay
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Vrrp_BackupGroups) GetArpsendSimple() bool {
	if x != nil && x.ArpsendSimple != nil {
		return *x.ArpsendSimple
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Vrrp_BackupGroups) GetAdvertiseSendMode() *Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode {
	if x != nil {
		return x.AdvertiseSendMode
	}
	return nil
}

type Ifm_Interfaces_Interface_Vrrp_TrackAdmins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackAdmin []*Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin `protobuf:"bytes,1,rep,name=track_admin,json=trackAdmin" json:"track_admin,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Vrrp_TrackAdmins) Reset() {
	*x = Ifm_Interfaces_Interface_Vrrp_TrackAdmins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Vrrp_TrackAdmins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Vrrp_TrackAdmins) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Vrrp_TrackAdmins) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Vrrp_TrackAdmins.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Vrrp_TrackAdmins) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 6, 2}
}

func (x *Ifm_Interfaces_Interface_Vrrp_TrackAdmins) GetTrackAdmin() []*Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin {
	if x != nil {
		return x.TrackAdmin
	}
	return nil
}

type Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps_IfTrackAdminVrrp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	VrrpIfName *string `protobuf:"bytes,2,opt,name=vrrp_if_name,json=vrrpIfName" json:"vrrp_if_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps_IfTrackAdminVrrp) Reset() {
	*x = Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps_IfTrackAdminVrrp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps_IfTrackAdminVrrp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps_IfTrackAdminVrrp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps_IfTrackAdminVrrp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps_IfTrackAdminVrrp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps_IfTrackAdminVrrp) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 6, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps_IfTrackAdminVrrp) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps_IfTrackAdminVrrp) GetVrrpIfName() string {
	if x != nil && x.VrrpIfName != nil {
		return *x.VrrpIfName
	}
	return ""
}

type Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllSubvlans *Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode_AllSubvlans `protobuf:"bytes,1,opt,name=all_subvlans,json=allSubvlans" json:"all_subvlans,omitempty"`
	OneSubvlan  *Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode_OneSubvlan  `protobuf:"bytes,2,opt,name=one_subvlan,json=oneSubvlan" json:"one_subvlan,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode) Reset() {
	*x = Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 6, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode) GetAllSubvlans() *Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode_AllSubvlans {
	if x != nil {
		return x.AllSubvlans
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode) GetOneSubvlan() *Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode_OneSubvlan {
	if x != nil {
		return x.OneSubvlan
	}
	return nil
}

type Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode_AllSubvlans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendmodeAll *bool `protobuf:"varint,1,opt,name=sendmode_all,json=sendmodeAll" json:"sendmode_all,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode_AllSubvlans) Reset() {
	*x = Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode_AllSubvlans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode_AllSubvlans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode_AllSubvlans) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode_AllSubvlans) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode_AllSubvlans.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode_AllSubvlans) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 6, 1, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode_AllSubvlans) GetSendmodeAll() bool {
	if x != nil && x.SendmodeAll != nil {
		return *x.SendmodeAll
	}
	return false
}

type Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode_OneSubvlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendSubvlanid *uint32 `protobuf:"varint,1,opt,name=send_subvlanid,json=sendSubvlanid" json:"send_subvlanid,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode_OneSubvlan) Reset() {
	*x = Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode_OneSubvlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode_OneSubvlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode_OneSubvlan) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode_OneSubvlan) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode_OneSubvlan.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode_OneSubvlan) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 6, 1, 0, 1}
}

func (x *Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode_OneSubvlan) GetSendSubvlanid() uint32 {
	if x != nil && x.SendSubvlanid != nil {
		return *x.SendSubvlanid
	}
	return 0
}

type Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	IfName *string `protobuf:"bytes,2,opt,name=if_name,json=ifName" json:"if_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin) Reset() {
	*x = Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 6, 2, 0}
}

func (x *Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin) GetIfName() string {
	if x != nil && x.IfName != nil {
		return *x.IfName
	}
	return ""
}

type Ifm_Interfaces_Interface_Rbs_BindRbp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Rbs_BindRbp) Reset() {
	*x = Ifm_Interfaces_Interface_Rbs_BindRbp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Rbs_BindRbp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Rbs_BindRbp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Rbs_BindRbp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Rbs_BindRbp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Rbs_BindRbp) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 7, 0}
}

func (x *Ifm_Interfaces_Interface_Rbs_BindRbp) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L2Attribute  *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute `protobuf:"bytes,1,opt,name=l2_attribute,json=l2Attribute" json:"l2_attribute,omitempty"`
	VlanSwap     *Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap    `protobuf:"varint,2,opt,name=vlan_swap,json=vlanSwap,enum=huawei_ifm.Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap" json:"vlan_swap,omitempty"`
	QinqProtocol *string                                                      `protobuf:"bytes,3,opt,name=qinq_protocol,json=qinqProtocol" json:"qinq_protocol,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_MainInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_MainInterface) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_MainInterface) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface) GetL2Attribute() *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute {
	if x != nil {
		return x.L2Attribute
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface) GetVlanSwap() Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap {
	if x != nil && x.VlanSwap != nil {
		return *x.VlanSwap
	}
	return Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap_DISABLE
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface) GetQinqProtocol() string {
	if x != nil && x.QinqProtocol != nil {
		return *x.QinqProtocol
	}
	return ""
}

type Ifm_Interfaces_Interface_Ethernet_L3SubInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowType   *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType   `protobuf:"bytes,1,opt,name=flow_type,json=flowType" json:"flow_type,omitempty"`
	VlanGroups *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups `protobuf:"bytes,2,opt,name=vlan_groups,json=vlanGroups" json:"vlan_groups,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L3SubInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L3SubInterface.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 1}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface) GetFlowType() *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType {
	if x != nil {
		return x.FlowType
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface) GetVlanGroups() *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups {
	if x != nil {
		return x.VlanGroups
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_Mac struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubInterfaceMacLimit     *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit     `protobuf:"bytes,1,opt,name=sub_interface_mac_limit,json=subInterfaceMacLimit" json:"sub_interface_mac_limit,omitempty"`
	SubInterfaceSuppressions *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions `protobuf:"bytes,2,opt,name=sub_interface_suppressions,json=subInterfaceSuppressions" json:"sub_interface_suppressions,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_Mac{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_Mac) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_Mac.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_Mac) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 2}
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac) GetSubInterfaceMacLimit() *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit {
	if x != nil {
		return x.SubInterfaceMacLimit
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac) GetSubInterfaceSuppressions() *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions {
	if x != nil {
		return x.SubInterfaceSuppressions
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_L2SubInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalSwitch *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch `protobuf:"varint,1,opt,name=local_switch,json=localSwitch,enum=huawei_ifm.Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch" json:"local_switch,omitempty"`
	FlowAction  *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction  `protobuf:"bytes,2,opt,name=flow_action,json=flowAction" json:"flow_action,omitempty"`
	FlowType    *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType    `protobuf:"bytes,3,opt,name=flow_type,json=flowType" json:"flow_type,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L2SubInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L2SubInterface) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L2SubInterface.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L2SubInterface) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 3}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface) GetLocalSwitch() Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch {
	if x != nil && x.LocalSwitch != nil {
		return *x.LocalSwitch
	}
	return Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch_DISABLE
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface) GetFlowAction() *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction {
	if x != nil {
		return x.FlowAction
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface) GetFlowType() *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType {
	if x != nil {
		return x.FlowType
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkType              *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType              `protobuf:"varint,1,opt,name=link_type,json=linkType,enum=huawei_ifm.Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType" json:"link_type,omitempty"`
	Pvid                  *uint32                                                                            `protobuf:"varint,2,opt,name=pvid" json:"pvid,omitempty"`
	TrunkVlans            *string                                                                            `protobuf:"bytes,3,opt,name=trunk_vlans,json=trunkVlans" json:"trunk_vlans,omitempty"`
	UntagDiscarding       *bool                                                                              `protobuf:"varint,4,opt,name=untag_discarding,json=untagDiscarding" json:"untag_discarding,omitempty"`
	VlanStackings         *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings         `protobuf:"bytes,5,opt,name=vlan_stackings,json=vlanStackings" json:"vlan_stackings,omitempty"`
	StatisticsEnableVlans *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_StatisticsEnableVlans `protobuf:"bytes,6,opt,name=statistics_enable_vlans,json=statisticsEnableVlans" json:"statistics_enable_vlans,omitempty"`
	PortIsolateGroups     *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups     `protobuf:"bytes,7,opt,name=port_isolate_groups,json=portIsolateGroups" json:"port_isolate_groups,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) GetLinkType() Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType {
	if x != nil && x.LinkType != nil {
		return *x.LinkType
	}
	return Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_INVALID_ENUM_VALUE_LinkType
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) GetPvid() uint32 {
	if x != nil && x.Pvid != nil {
		return *x.Pvid
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) GetTrunkVlans() string {
	if x != nil && x.TrunkVlans != nil {
		return *x.TrunkVlans
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) GetUntagDiscarding() bool {
	if x != nil && x.UntagDiscarding != nil {
		return *x.UntagDiscarding
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) GetVlanStackings() *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings {
	if x != nil {
		return x.VlanStackings
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) GetStatisticsEnableVlans() *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_StatisticsEnableVlans {
	if x != nil {
		return x.StatisticsEnableVlans
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute) GetPortIsolateGroups() *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups {
	if x != nil {
		return x.PortIsolateGroups
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanStacking []*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking `protobuf:"bytes,1,rep,name=vlan_stacking,json=vlanStacking" json:"vlan_stacking,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 0, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings) GetVlanStacking() []*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking {
	if x != nil {
		return x.VlanStacking
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_StatisticsEnableVlans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vlans *string `protobuf:"bytes,1,opt,name=vlans" json:"vlans,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_StatisticsEnableVlans) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_StatisticsEnableVlans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_StatisticsEnableVlans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_StatisticsEnableVlans) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_StatisticsEnableVlans) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_StatisticsEnableVlans.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_StatisticsEnableVlans) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 0, 0, 1}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_StatisticsEnableVlans) GetVlans() string {
	if x != nil && x.Vlans != nil {
		return *x.Vlans
	}
	return ""
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortIsolateGroup []*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups_PortIsolateGroup `protobuf:"bytes,1,rep,name=port_isolate_group,json=portIsolateGroup" json:"port_isolate_group,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 0, 0, 2}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups) GetPortIsolateGroup() []*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups_PortIsolateGroup {
	if x != nil {
		return x.PortIsolateGroup
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StackingVlan *uint32 `protobuf:"varint,1,opt,name=stacking_vlan,json=stackingVlan" json:"stacking_vlan,omitempty"`
	CeDefault    *bool   `protobuf:"varint,2,opt,name=ce_default,json=ceDefault" json:"ce_default,omitempty"`
	TransVlans   *string `protobuf:"bytes,3,opt,name=trans_vlans,json=transVlans" json:"trans_vlans,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 0, 0, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking) GetStackingVlan() uint32 {
	if x != nil && x.StackingVlan != nil {
		return *x.StackingVlan
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking) GetCeDefault() bool {
	if x != nil && x.CeDefault != nil {
		return *x.CeDefault
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking) GetTransVlans() string {
	if x != nil && x.TransVlans != nil {
		return *x.TransVlans
	}
	return ""
}

type Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups_PortIsolateGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId *int32 `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups_PortIsolateGroup) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups_PortIsolateGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups_PortIsolateGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups_PortIsolateGroup) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups_PortIsolateGroup) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups_PortIsolateGroup.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups_PortIsolateGroup) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 0, 0, 2, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups_PortIsolateGroup) GetGroupId() int32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

type Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanType         *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_VlanType         `protobuf:"bytes,1,opt,name=vlan_type,json=vlanType" json:"vlan_type,omitempty"`
	QinqTermination  *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_QinqTermination  `protobuf:"bytes,2,opt,name=qinq_termination,json=qinqTermination" json:"qinq_termination,omitempty"`
	QinqStacking     *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_QinqStacking     `protobuf:"bytes,3,opt,name=qinq_stacking,json=qinqStacking" json:"qinq_stacking,omitempty"`
	UserVlanComm     *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm     `protobuf:"bytes,4,opt,name=user_vlan_comm,json=userVlanComm" json:"user_vlan_comm,omitempty"`
	Dot1QTermination *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_Dot1QTermination `protobuf:"bytes,5,opt,name=dot1q_termination,json=dot1qTermination" json:"dot1q_termination,omitempty"`
	UserVlanAny      *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanAny      `protobuf:"bytes,6,opt,name=user_vlan_any,json=userVlanAny" json:"user_vlan_any,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType) GetVlanType() *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_VlanType {
	if x != nil {
		return x.VlanType
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType) GetQinqTermination() *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_QinqTermination {
	if x != nil {
		return x.QinqTermination
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType) GetQinqStacking() *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_QinqStacking {
	if x != nil {
		return x.QinqStacking
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType) GetUserVlanComm() *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm {
	if x != nil {
		return x.UserVlanComm
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType) GetDot1QTermination() *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_Dot1QTermination {
	if x != nil {
		return x.Dot1QTermination
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType) GetUserVlanAny() *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanAny {
	if x != nil {
		return x.UserVlanAny
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanGroup []*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup `protobuf:"bytes,1,rep,name=vlan_group,json=vlanGroup" json:"vlan_group,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 1, 1}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups) GetVlanGroup() []*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup {
	if x != nil {
		return x.VlanGroup
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_VlanType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanTypeDot1Q *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_VlanType_VlanTypeDot1Q `protobuf:"bytes,1,opt,name=vlan_type_dot1q,json=vlanTypeDot1q" json:"vlan_type_dot1q,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_VlanType) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_VlanType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_VlanType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_VlanType) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_VlanType) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_VlanType.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_VlanType) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 1, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_VlanType) GetVlanTypeDot1Q() *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_VlanType_VlanTypeDot1Q {
	if x != nil {
		return x.VlanTypeDot1Q
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_QinqTermination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_QinqTermination) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_QinqTermination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_QinqTermination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_QinqTermination) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_QinqTermination) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_QinqTermination.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_QinqTermination) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 1, 0, 1}
}

type Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_QinqStacking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_QinqStacking) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_QinqStacking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_QinqStacking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_QinqStacking) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_QinqStacking) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_QinqStacking.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_QinqStacking) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 1, 0, 2}
}

type Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserVlanCommon *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon `protobuf:"bytes,1,opt,name=user_vlan_common,json=userVlanCommon" json:"user_vlan_common,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 1, 0, 3}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm) GetUserVlanCommon() *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon {
	if x != nil {
		return x.UserVlanCommon
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_Dot1QTermination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_Dot1QTermination) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_Dot1QTermination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_Dot1QTermination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_Dot1QTermination) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_Dot1QTermination) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_Dot1QTermination.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_Dot1QTermination) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 1, 0, 4}
}

type Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanAny struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanAny) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanAny{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanAny) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanAny) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanAny) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanAny.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanAny) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 1, 0, 5}
}

type Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_VlanType_VlanTypeDot1Q struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanTypeVid *uint32 `protobuf:"varint,1,opt,name=vlan_type_vid,json=vlanTypeVid" json:"vlan_type_vid,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_VlanType_VlanTypeDot1Q) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_VlanType_VlanTypeDot1Q{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_VlanType_VlanTypeDot1Q) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_VlanType_VlanTypeDot1Q) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_VlanType_VlanTypeDot1Q) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_VlanType_VlanTypeDot1Q.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_VlanType_VlanTypeDot1Q) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 1, 0, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_VlanType_VlanTypeDot1Q) GetVlanTypeVid() uint32 {
	if x != nil && x.VlanTypeVid != nil {
		return *x.VlanTypeVid
	}
	return 0
}

type Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserVlanQinqs *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs `protobuf:"bytes,1,opt,name=user_vlan_qinqs,json=userVlanQinqs" json:"user_vlan_qinqs,omitempty"`
	UserVlanDot1Q *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanDot1Q `protobuf:"bytes,2,opt,name=user_vlan_dot1q,json=userVlanDot1q" json:"user_vlan_dot1q,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 1, 0, 3, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon) GetUserVlanQinqs() *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs {
	if x != nil {
		return x.UserVlanQinqs
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon) GetUserVlanDot1Q() *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanDot1Q {
	if x != nil {
		return x.UserVlanDot1Q
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserVlanQinq []*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs_UserVlanQinq `protobuf:"bytes,1,rep,name=user_vlan_qinq,json=userVlanQinq" json:"user_vlan_qinq,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 1, 0, 3, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs) GetUserVlanQinq() []*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs_UserVlanQinq {
	if x != nil {
		return x.UserVlanQinq
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanDot1Q struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanList *string `protobuf:"bytes,1,opt,name=vlan_list,json=vlanList" json:"vlan_list,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanDot1Q) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanDot1Q{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanDot1Q) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanDot1Q) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanDot1Q) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanDot1Q.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanDot1Q) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 1, 0, 3, 0, 1}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanDot1Q) GetVlanList() string {
	if x != nil && x.VlanList != nil {
		return *x.VlanList
	}
	return ""
}

type Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs_UserVlanQinq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeVlanBegin *uint32 `protobuf:"varint,1,opt,name=pe_vlan_begin,json=peVlanBegin" json:"pe_vlan_begin,omitempty"`
	PeVlanEnd   *uint32 `protobuf:"varint,2,opt,name=pe_vlan_end,json=peVlanEnd" json:"pe_vlan_end,omitempty"`
	CeVlanBegin *uint32 `protobuf:"varint,3,opt,name=ce_vlan_begin,json=ceVlanBegin" json:"ce_vlan_begin,omitempty"`
	CeVlanEnd   *uint32 `protobuf:"varint,4,opt,name=ce_vlan_end,json=ceVlanEnd" json:"ce_vlan_end,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs_UserVlanQinq) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs_UserVlanQinq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs_UserVlanQinq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs_UserVlanQinq) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs_UserVlanQinq) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs_UserVlanQinq.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs_UserVlanQinq) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 1, 0, 3, 0, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs_UserVlanQinq) GetPeVlanBegin() uint32 {
	if x != nil && x.PeVlanBegin != nil {
		return *x.PeVlanBegin
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs_UserVlanQinq) GetPeVlanEnd() uint32 {
	if x != nil && x.PeVlanEnd != nil {
		return *x.PeVlanEnd
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs_UserVlanQinq) GetCeVlanBegin() uint32 {
	if x != nil && x.CeVlanBegin != nil {
		return *x.CeVlanBegin
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs_UserVlanQinq) GetCeVlanEnd() uint32 {
	if x != nil && x.CeVlanEnd != nil {
		return *x.CeVlanEnd
	}
	return 0
}

type Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *uint32                                                                     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Mode            *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode `protobuf:"varint,2,opt,name=mode,enum=huawei_ifm.Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode" json:"mode,omitempty"`
	StatisticEnable *bool                                                                       `protobuf:"varint,3,opt,name=statistic_enable,json=statisticEnable" json:"statistic_enable,omitempty"`
	Description     *string                                                                     `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 1, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup) GetMode() Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_INVALID_ENUM_VALUE_Mode
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup) GetStatisticEnable() bool {
	if x != nil && x.StatisticEnable != nil {
		return *x.StatisticEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LimitType *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType `protobuf:"bytes,1,opt,name=limit_type,json=limitType" json:"limit_type,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 2, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit) GetLimitType() *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType {
	if x != nil {
		return x.LimitType
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubInterfaceSuppression []*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression `protobuf:"bytes,1,rep,name=sub_interface_suppression,json=subInterfaceSuppression" json:"sub_interface_suppression,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 2, 1}
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions) GetSubInterfaceSuppression() []*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression {
	if x != nil {
		return x.SubInterfaceSuppression
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LimitParameters *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters `protobuf:"bytes,1,opt,name=limit_parameters,json=limitParameters" json:"limit_parameters,omitempty"`
	LimitRuleRef    *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitRuleRef    `protobuf:"bytes,2,opt,name=limit_rule_ref,json=limitRuleRef" json:"limit_rule_ref,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 2, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType) GetLimitParameters() *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters {
	if x != nil {
		return x.LimitParameters
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType) GetLimitRuleRef() *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitRuleRef {
	if x != nil {
		return x.LimitRuleRef
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Maximum *uint32                                                                                      `protobuf:"varint,1,opt,name=maximum" json:"maximum,omitempty"`
	Rate    *uint32                                                                                      `protobuf:"varint,2,opt,name=rate" json:"rate,omitempty"`
	Action  *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Action `protobuf:"varint,3,opt,name=action,enum=huawei_ifm.Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Action" json:"action,omitempty"`
	Alarm   *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Alarm  `protobuf:"varint,4,opt,name=alarm,enum=huawei_ifm.Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Alarm" json:"alarm,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 2, 0, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters) GetMaximum() uint32 {
	if x != nil && x.Maximum != nil {
		return *x.Maximum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters) GetRate() uint32 {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters) GetAction() Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Action {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Action_DISCARD
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters) GetAlarm() Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Alarm {
	if x != nil && x.Alarm != nil {
		return *x.Alarm
	}
	return Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Alarm_DISABLE
}

type Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitRuleRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleName *string `protobuf:"bytes,1,opt,name=rule_name,json=ruleName" json:"rule_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitRuleRef) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitRuleRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitRuleRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitRuleRef) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitRuleRef) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitRuleRef.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitRuleRef) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 2, 0, 0, 1}
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitRuleRef) GetRuleName() string {
	if x != nil && x.RuleName != nil {
		return *x.RuleName
	}
	return ""
}

type Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type      `protobuf:"varint,1,opt,name=type,enum=huawei_ifm.Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type" json:"type,omitempty"`
	Direction *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction `protobuf:"varint,2,opt,name=direction,enum=huawei_ifm.Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction" json:"direction,omitempty"`
	Cir       *uint64                                                                                           `protobuf:"varint,3,opt,name=cir" json:"cir,omitempty"`
	Cbs       *uint64                                                                                           `protobuf:"varint,4,opt,name=cbs" json:"cbs,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 2, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression) GetType() Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type_BROADCAST
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression) GetDirection() Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction_INBOUND
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression) GetCir() uint64 {
	if x != nil && x.Cir != nil {
		return *x.Cir
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression) GetCbs() uint64 {
	if x != nil && x.Cbs != nil {
		return *x.Cbs
	}
	return 0
}

type Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType  *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType `protobuf:"varint,1,opt,name=action_type,json=actionType,enum=huawei_ifm.Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType" json:"action_type,omitempty"`
	OutVlanId   *uint32                                                                 `protobuf:"varint,2,opt,name=out_vlan_id,json=outVlanId" json:"out_vlan_id,omitempty"`
	InnerVlanId *uint32                                                                 `protobuf:"varint,3,opt,name=inner_vlan_id,json=innerVlanId" json:"inner_vlan_id,omitempty"`
	Outer_8021P *uint32                                                                 `protobuf:"varint,4,opt,name=outer_8021p,json=outer8021p" json:"outer_8021p,omitempty"`
	Inner_8021P *uint32                                                                 `protobuf:"varint,5,opt,name=inner_8021p,json=inner8021p" json:"inner_8021p,omitempty"`
	OffsetValue *uint32                                                                 `protobuf:"varint,6,opt,name=offset_value,json=offsetValue" json:"offset_value,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 3, 0}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction) GetActionType() Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType {
	if x != nil && x.ActionType != nil {
		return *x.ActionType
	}
	return Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType_POPX_OUTER
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction) GetOutVlanId() uint32 {
	if x != nil && x.OutVlanId != nil {
		return *x.OutVlanId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction) GetInnerVlanId() uint32 {
	if x != nil && x.InnerVlanId != nil {
		return *x.InnerVlanId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction) GetOuter_8021P() uint32 {
	if x != nil && x.Outer_8021P != nil {
		return *x.Outer_8021P
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction) GetInner_8021P() uint32 {
	if x != nil && x.Inner_8021P != nil {
		return *x.Inner_8021P
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction) GetOffsetValue() uint32 {
	if x != nil && x.OffsetValue != nil {
		return *x.OffsetValue
	}
	return 0
}

type Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Default *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Default `protobuf:"bytes,1,opt,name=default" json:"default,omitempty"`
	Untag   *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Untag   `protobuf:"bytes,2,opt,name=untag" json:"untag,omitempty"`
	Dot1Q   *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Dot1Q   `protobuf:"bytes,3,opt,name=dot1q" json:"dot1q,omitempty"`
	Qinq    *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Qinq    `protobuf:"bytes,4,opt,name=qinq" json:"qinq,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 3, 1}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType) GetDefault() *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Default {
	if x != nil {
		return x.Default
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType) GetUntag() *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Untag {
	if x != nil {
		return x.Untag
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType) GetDot1Q() *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Dot1Q {
	if x != nil {
		return x.Dot1Q
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType) GetQinq() *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Qinq {
	if x != nil {
		return x.Qinq
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Default struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Default) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Default{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Default) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Default) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Default) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Default.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Default) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 3, 1, 0}
}

type Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Untag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Untag) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Untag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Untag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Untag) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Untag) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Untag.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Untag) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 3, 1, 1}
}

type Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Dot1Q struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Dot1Q) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Dot1Q{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Dot1Q) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Dot1Q) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Dot1Q) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Dot1Q.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Dot1Q) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 3, 1, 2}
}

type Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Qinq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qinqs *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Qinq_Qinqs `protobuf:"bytes,1,opt,name=qinqs" json:"qinqs,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Qinq) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Qinq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Qinq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Qinq) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Qinq) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Qinq.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Qinq) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 3, 1, 3}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Qinq) GetQinqs() *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Qinq_Qinqs {
	if x != nil {
		return x.Qinqs
	}
	return nil
}

type Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Qinq_Qinqs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Qinq_Qinqs) Reset() {
	*x = Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Qinq_Qinqs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Qinq_Qinqs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Qinq_Qinqs) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Qinq_Qinqs) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Qinq_Qinqs.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Qinq_Qinqs) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 8, 3, 1, 3, 0}
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MplsTe *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe `protobuf:"bytes,1,opt,name=mpls_te,json=mplsTe" json:"mpls_te,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type) GetMplsTe() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe {
	if x != nil {
		return x.MplsTe
	}
	return nil
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeTunnel *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel `protobuf:"bytes,1,opt,name=te_tunnel,json=teTunnel" json:"te_tunnel,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe) GetTeTunnel() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel {
	if x != nil {
		return x.TeTunnel
	}
	return nil
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonAttributes *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes `protobuf:"bytes,1,opt,name=common_attributes,json=commonAttributes" json:"common_attributes,omitempty"`
	RsvpTe           *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe           `protobuf:"bytes,2,opt,name=rsvp_te,json=rsvpTe" json:"rsvp_te,omitempty"`
	SrTe             *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe             `protobuf:"bytes,3,opt,name=sr_te,json=srTe" json:"sr_te,omitempty"`
	IgpAttr          *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr          `protobuf:"bytes,4,opt,name=igp_attr,json=igpAttr" json:"igp_attr,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel) GetCommonAttributes() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes {
	if x != nil {
		return x.CommonAttributes
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel) GetRsvpTe() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe {
	if x != nil {
		return x.RsvpTe
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel) GetSrTe() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe {
	if x != nil {
		return x.SrTe
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel) GetIgpAttr() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr {
	if x != nil {
		return x.IgpAttr
	}
	return nil
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignalProtocol     *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_SignalProtocol `protobuf:"varint,1,opt,name=signal_protocol,json=signalProtocol,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_SignalProtocol" json:"signal_protocol,omitempty"`
	TunnelId           *uint32                                                                                       `protobuf:"varint,2,opt,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	EgressLsrId        *string                                                                                       `protobuf:"bytes,3,opt,name=egress_lsr_id,json=egressLsrId" json:"egress_lsr_id,omitempty"`
	ReservedForBinding *bool                                                                                         `protobuf:"varint,4,opt,name=reserved_for_binding,json=reservedForBinding" json:"reserved_for_binding,omitempty"`
	LspTpOutbound      *bool                                                                                         `protobuf:"varint,5,opt,name=lsp_tp_outbound,json=lspTpOutbound" json:"lsp_tp_outbound,omitempty"`
	StatisticEnable    *bool                                                                                         `protobuf:"varint,6,opt,name=statistic_enable,json=statisticEnable" json:"statistic_enable,omitempty"`
	LockFlag           *bool                                                                                         `protobuf:"varint,7,opt,name=lock_flag,json=lockFlag" json:"lock_flag,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 0}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes) GetSignalProtocol() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_SignalProtocol {
	if x != nil && x.SignalProtocol != nil {
		return *x.SignalProtocol
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_INVALID_ENUM_VALUE_SignalProtocol
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes) GetTunnelId() uint32 {
	if x != nil && x.TunnelId != nil {
		return *x.TunnelId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes) GetEgressLsrId() string {
	if x != nil && x.EgressLsrId != nil {
		return *x.EgressLsrId
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes) GetReservedForBinding() bool {
	if x != nil && x.ReservedForBinding != nil {
		return *x.ReservedForBinding
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes) GetLspTpOutbound() bool {
	if x != nil && x.LspTpOutbound != nil {
		return *x.LspTpOutbound
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes) GetStatisticEnable() bool {
	if x != nil && x.StatisticEnable != nil {
		return *x.StatisticEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes) GetLockFlag() bool {
	if x != nil && x.LockFlag != nil {
		return *x.LockFlag
	}
	return false
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignalledTunnelName     *string                                                                              `protobuf:"bytes,1,opt,name=signalled_tunnel_name,json=signalledTunnelName" json:"signalled_tunnel_name,omitempty"`
	TrafficEnable           *bool                                                                                `protobuf:"varint,2,opt,name=traffic_enable,json=trafficEnable" json:"traffic_enable,omitempty"`
	Bandwidth               *uint32                                                                              `protobuf:"varint,3,opt,name=bandwidth" json:"bandwidth,omitempty"`
	SetupPriority           *uint32                                                                              `protobuf:"varint,4,opt,name=setup_priority,json=setupPriority" json:"setup_priority,omitempty"`
	HoldPriority            *uint32                                                                              `protobuf:"varint,5,opt,name=hold_priority,json=holdPriority" json:"hold_priority,omitempty"`
	OrdinaryEnable          *bool                                                                                `protobuf:"varint,6,opt,name=ordinary_enable,json=ordinaryEnable" json:"ordinary_enable,omitempty"`
	BestEffortEnable        *bool                                                                                `protobuf:"varint,7,opt,name=best_effort_enable,json=bestEffortEnable" json:"best_effort_enable,omitempty"`
	BackupFrrInuse          *bool                                                                                `protobuf:"varint,8,opt,name=backup_frr_inuse,json=backupFrrInuse" json:"backup_frr_inuse,omitempty"`
	PathDisjointCalculate   *bool                                                                                `protobuf:"varint,9,opt,name=path_disjoint_calculate,json=pathDisjointCalculate" json:"path_disjoint_calculate,omitempty"`
	SoftPreemptEnable       *bool                                                                                `protobuf:"varint,10,opt,name=soft_preempt_enable,json=softPreemptEnable" json:"soft_preempt_enable,omitempty"`
	DisableCspf             *bool                                                                                `protobuf:"varint,11,opt,name=disable_cspf,json=disableCspf" json:"disable_cspf,omitempty"`
	ReserveStyle            *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_ReserveStyle    `protobuf:"varint,12,opt,name=reserve_style,json=reserveStyle,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_ReserveStyle" json:"reserve_style,omitempty"`
	RecordRoute             *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_RecordRoute     `protobuf:"varint,13,opt,name=record_route,json=recordRoute,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_RecordRoute" json:"record_route,omitempty"`
	Reoptimization          *bool                                                                                `protobuf:"varint,14,opt,name=reoptimization" json:"reoptimization,omitempty"`
	ReoptimizationFrequency *int32                                                                               `protobuf:"varint,15,opt,name=reoptimization_frequency,json=reoptimizationFrequency" json:"reoptimization_frequency,omitempty"`
	InterAreaReoptimization *bool                                                                                `protobuf:"varint,16,opt,name=inter_area_reoptimization,json=interAreaReoptimization" json:"inter_area_reoptimization,omitempty"`
	TieBreaking             *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking     `protobuf:"varint,17,opt,name=tie_breaking,json=tieBreaking,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking" json:"tie_breaking,omitempty"`
	PathMetricType          *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PathMetricType  `protobuf:"varint,18,opt,name=path_metric_type,json=pathMetricType,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PathMetricType" json:"path_metric_type,omitempty"`
	MetricInheritIgp        *bool                                                                                `protobuf:"varint,19,opt,name=metric_inherit_igp,json=metricInheritIgp" json:"metric_inherit_igp,omitempty"`
	PceDelegate             *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PceDelegate     `protobuf:"varint,20,opt,name=pce_delegate,json=pceDelegate,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PceDelegate" json:"pce_delegate,omitempty"`
	EntropyLabel            *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_EntropyLabel    `protobuf:"varint,21,opt,name=entropy_label,json=entropyLabel,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_EntropyLabel" json:"entropy_label,omitempty"`
	SplitTunnel             *bool                                                                                `protobuf:"varint,22,opt,name=split_tunnel,json=splitTunnel" json:"split_tunnel,omitempty"`
	SoftPreemptBlock        *bool                                                                                `protobuf:"varint,23,opt,name=soft_preempt_block,json=softPreemptBlock" json:"soft_preempt_block,omitempty"`
	FastReroute             *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute     `protobuf:"bytes,24,opt,name=fast_reroute,json=fastReroute" json:"fast_reroute,omitempty"`
	Hotstandby              *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby      `protobuf:"bytes,25,opt,name=hotstandby" json:"hotstandby,omitempty"`
	LspPaths                *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths        `protobuf:"bytes,26,opt,name=lsp_paths,json=lspPaths" json:"lsp_paths,omitempty"`
	Bypass                  *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Bypass          `protobuf:"bytes,27,opt,name=bypass" json:"bypass,omitempty"`
	HotstandbyState         *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState `protobuf:"bytes,28,opt,name=hotstandby_state,json=hotstandbyState" json:"hotstandby_state,omitempty"`
	AutoBandwidths          *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths  `protobuf:"bytes,29,opt,name=auto_bandwidths,json=autoBandwidths" json:"auto_bandwidths,omitempty"`
	BfdForLsp               *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp       `protobuf:"bytes,30,opt,name=bfd_for_lsp,json=bfdForLsp" json:"bfd_for_lsp,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetSignalledTunnelName() string {
	if x != nil && x.SignalledTunnelName != nil {
		return *x.SignalledTunnelName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetTrafficEnable() bool {
	if x != nil && x.TrafficEnable != nil {
		return *x.TrafficEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetBandwidth() uint32 {
	if x != nil && x.Bandwidth != nil {
		return *x.Bandwidth
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetSetupPriority() uint32 {
	if x != nil && x.SetupPriority != nil {
		return *x.SetupPriority
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetHoldPriority() uint32 {
	if x != nil && x.HoldPriority != nil {
		return *x.HoldPriority
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetOrdinaryEnable() bool {
	if x != nil && x.OrdinaryEnable != nil {
		return *x.OrdinaryEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetBestEffortEnable() bool {
	if x != nil && x.BestEffortEnable != nil {
		return *x.BestEffortEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetBackupFrrInuse() bool {
	if x != nil && x.BackupFrrInuse != nil {
		return *x.BackupFrrInuse
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetPathDisjointCalculate() bool {
	if x != nil && x.PathDisjointCalculate != nil {
		return *x.PathDisjointCalculate
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetSoftPreemptEnable() bool {
	if x != nil && x.SoftPreemptEnable != nil {
		return *x.SoftPreemptEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetDisableCspf() bool {
	if x != nil && x.DisableCspf != nil {
		return *x.DisableCspf
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetReserveStyle() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_ReserveStyle {
	if x != nil && x.ReserveStyle != nil {
		return *x.ReserveStyle
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_INVALID_ENUM_VALUE_ReserveStyle
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetRecordRoute() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_RecordRoute {
	if x != nil && x.RecordRoute != nil {
		return *x.RecordRoute
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_INVALID_ENUM_VALUE_RecordRoute
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetReoptimization() bool {
	if x != nil && x.Reoptimization != nil {
		return *x.Reoptimization
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetReoptimizationFrequency() int32 {
	if x != nil && x.ReoptimizationFrequency != nil {
		return *x.ReoptimizationFrequency
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetInterAreaReoptimization() bool {
	if x != nil && x.InterAreaReoptimization != nil {
		return *x.InterAreaReoptimization
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetTieBreaking() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking {
	if x != nil && x.TieBreaking != nil {
		return *x.TieBreaking
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_INVALID_ENUM_VALUE_TieBreaking
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetPathMetricType() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PathMetricType {
	if x != nil && x.PathMetricType != nil {
		return *x.PathMetricType
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_INVALID_ENUM_VALUE_PathMetricType
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetMetricInheritIgp() bool {
	if x != nil && x.MetricInheritIgp != nil {
		return *x.MetricInheritIgp
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetPceDelegate() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PceDelegate {
	if x != nil && x.PceDelegate != nil {
		return *x.PceDelegate
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PceDelegate_NO
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetEntropyLabel() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_EntropyLabel {
	if x != nil && x.EntropyLabel != nil {
		return *x.EntropyLabel
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_EntropyLabel_DEFAULT
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetSplitTunnel() bool {
	if x != nil && x.SplitTunnel != nil {
		return *x.SplitTunnel
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetSoftPreemptBlock() bool {
	if x != nil && x.SoftPreemptBlock != nil {
		return *x.SoftPreemptBlock
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetFastReroute() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute {
	if x != nil {
		return x.FastReroute
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetHotstandby() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby {
	if x != nil {
		return x.Hotstandby
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetLspPaths() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths {
	if x != nil {
		return x.LspPaths
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetBypass() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Bypass {
	if x != nil {
		return x.Bypass
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetHotstandbyState() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState {
	if x != nil {
		return x.HotstandbyState
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetAutoBandwidths() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths {
	if x != nil {
		return x.AutoBandwidths
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe) GetBfdForLsp() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp {
	if x != nil {
		return x.BfdForLsp
	}
	return nil
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bandwidth         *uint32                                                                             `protobuf:"varint,1,opt,name=bandwidth" json:"bandwidth,omitempty"`
	SetupPriority     *uint32                                                                             `protobuf:"varint,2,opt,name=setup_priority,json=setupPriority" json:"setup_priority,omitempty"`
	HoldPriority      *uint32                                                                             `protobuf:"varint,3,opt,name=hold_priority,json=holdPriority" json:"hold_priority,omitempty"`
	PceDelegate       *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PceDelegate      `protobuf:"varint,4,opt,name=pce_delegate,json=pceDelegate,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PceDelegate" json:"pce_delegate,omitempty"`
	SplitTunnel       *bool                                                                               `protobuf:"varint,5,opt,name=split_tunnel,json=splitTunnel" json:"split_tunnel,omitempty"`
	BindingSid        *uint32                                                                             `protobuf:"varint,6,opt,name=binding_sid,json=bindingSid" json:"binding_sid,omitempty"`
	ReverseBindingSid *uint32                                                                             `protobuf:"varint,7,opt,name=reverse_binding_sid,json=reverseBindingSid" json:"reverse_binding_sid,omitempty"`
	PathVerification  *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PathVerification `protobuf:"varint,8,opt,name=path_verification,json=pathVerification,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PathVerification" json:"path_verification,omitempty"`
	AdjacencySid      *bool                                                                               `protobuf:"varint,9,opt,name=adjacency_sid,json=adjacencySid" json:"adjacency_sid,omitempty"`
	Reoptimization    *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Reoptimization   `protobuf:"bytes,10,opt,name=reoptimization" json:"reoptimization,omitempty"`
	Hotstandby        *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby       `protobuf:"bytes,11,opt,name=hotstandby" json:"hotstandby,omitempty"`
	LspPaths          *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths         `protobuf:"bytes,12,opt,name=lsp_paths,json=lspPaths" json:"lsp_paths,omitempty"`
	HotstandbyState   *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState  `protobuf:"bytes,13,opt,name=hotstandby_state,json=hotstandbyState" json:"hotstandby_state,omitempty"`
	Lsps              *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps             `protobuf:"bytes,14,opt,name=lsps" json:"lsps,omitempty"`
	BfdForLsp         *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp        `protobuf:"bytes,15,opt,name=bfd_for_lsp,json=bfdForLsp" json:"bfd_for_lsp,omitempty"`
	BfdForTunnel      *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel     `protobuf:"bytes,16,opt,name=bfd_for_tunnel,json=bfdForTunnel" json:"bfd_for_tunnel,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 2}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe) GetBandwidth() uint32 {
	if x != nil && x.Bandwidth != nil {
		return *x.Bandwidth
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe) GetSetupPriority() uint32 {
	if x != nil && x.SetupPriority != nil {
		return *x.SetupPriority
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe) GetHoldPriority() uint32 {
	if x != nil && x.HoldPriority != nil {
		return *x.HoldPriority
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe) GetPceDelegate() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PceDelegate {
	if x != nil && x.PceDelegate != nil {
		return *x.PceDelegate
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PceDelegate_NO
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe) GetSplitTunnel() bool {
	if x != nil && x.SplitTunnel != nil {
		return *x.SplitTunnel
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe) GetBindingSid() uint32 {
	if x != nil && x.BindingSid != nil {
		return *x.BindingSid
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe) GetReverseBindingSid() uint32 {
	if x != nil && x.ReverseBindingSid != nil {
		return *x.ReverseBindingSid
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe) GetPathVerification() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PathVerification {
	if x != nil && x.PathVerification != nil {
		return *x.PathVerification
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PathVerification_INHERIT
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe) GetAdjacencySid() bool {
	if x != nil && x.AdjacencySid != nil {
		return *x.AdjacencySid
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe) GetReoptimization() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Reoptimization {
	if x != nil {
		return x.Reoptimization
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe) GetHotstandby() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby {
	if x != nil {
		return x.Hotstandby
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe) GetLspPaths() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths {
	if x != nil {
		return x.LspPaths
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe) GetHotstandbyState() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState {
	if x != nil {
		return x.HotstandbyState
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe) GetLsps() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps {
	if x != nil {
		return x.Lsps
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe) GetBfdForLsp() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp {
	if x != nil {
		return x.BfdForLsp
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe) GetBfdForTunnel() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel {
	if x != nil {
		return x.BfdForTunnel
	}
	return nil
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdvEnable     *bool                                                                              `protobuf:"varint,1,opt,name=adv_enable,json=advEnable" json:"adv_enable,omitempty"`
	AdvIpv6Enable *bool                                                                              `protobuf:"varint,2,opt,name=adv_ipv6_enable,json=advIpv6Enable" json:"adv_ipv6_enable,omitempty"`
	HoldTime      *uint32                                                                            `protobuf:"varint,3,opt,name=hold_time,json=holdTime" json:"hold_time,omitempty"`
	ShortcutType  *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_ShortcutType `protobuf:"varint,4,opt,name=shortcut_type,json=shortcutType,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_ShortcutType" json:"shortcut_type,omitempty"`
	MetricType    *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType   `protobuf:"bytes,5,opt,name=metric_type,json=metricType" json:"metric_type,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 3}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr) GetAdvEnable() bool {
	if x != nil && x.AdvEnable != nil {
		return *x.AdvEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr) GetAdvIpv6Enable() bool {
	if x != nil && x.AdvIpv6Enable != nil {
		return *x.AdvIpv6Enable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr) GetHoldTime() uint32 {
	if x != nil && x.HoldTime != nil {
		return *x.HoldTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr) GetShortcutType() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_ShortcutType {
	if x != nil && x.ShortcutType != nil {
		return *x.ShortcutType
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_ShortcutType_DISABLE
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr) GetMetricType() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType {
	if x != nil {
		return x.MetricType
	}
	return nil
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable                    *bool                                                                                             `protobuf:"varint,1,opt,name=enable" json:"enable,omitempty"`
	Mode                      *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_Mode             `protobuf:"varint,2,opt,name=mode,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_Mode" json:"mode,omitempty"`
	BandwidthProtectionEnable *bool                                                                                             `protobuf:"varint,3,opt,name=bandwidth_protection_enable,json=bandwidthProtectionEnable" json:"bandwidth_protection_enable,omitempty"`
	FrrBandwidth              *uint32                                                                                           `protobuf:"varint,4,opt,name=frr_bandwidth,json=frrBandwidth" json:"frr_bandwidth,omitempty"`
	SetupPriority             *uint32                                                                                           `protobuf:"varint,5,opt,name=setup_priority,json=setupPriority" json:"setup_priority,omitempty"`
	HoldPriority              *uint32                                                                                           `protobuf:"varint,6,opt,name=hold_priority,json=holdPriority" json:"hold_priority,omitempty"`
	IncludeAny                *string                                                                                           `protobuf:"bytes,7,opt,name=include_any,json=includeAny" json:"include_any,omitempty"`
	ExcludeAny                *string                                                                                           `protobuf:"bytes,8,opt,name=exclude_any,json=excludeAny" json:"exclude_any,omitempty"`
	IncludeAll                *string                                                                                           `protobuf:"bytes,9,opt,name=include_all,json=includeAll" json:"include_all,omitempty"`
	IncludeAnyAffinityName    []string                                                                                          `protobuf:"bytes,10,rep,name=include_any_affinity_name,json=includeAnyAffinityName" json:"include_any_affinity_name,omitempty"`
	IncludeAllAffinityName    []string                                                                                          `protobuf:"bytes,11,rep,name=include_all_affinity_name,json=includeAllAffinityName" json:"include_all_affinity_name,omitempty"`
	ExcludeAffinityName       []string                                                                                          `protobuf:"bytes,12,rep,name=exclude_affinity_name,json=excludeAffinityName" json:"exclude_affinity_name,omitempty"`
	BypassAttributes          *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_BypassAttributes `protobuf:"bytes,13,opt,name=bypass_attributes,json=bypassAttributes" json:"bypass_attributes,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 0}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute) GetMode() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_Mode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_INVALID_ENUM_VALUE_Mode
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute) GetBandwidthProtectionEnable() bool {
	if x != nil && x.BandwidthProtectionEnable != nil {
		return *x.BandwidthProtectionEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute) GetFrrBandwidth() uint32 {
	if x != nil && x.FrrBandwidth != nil {
		return *x.FrrBandwidth
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute) GetSetupPriority() uint32 {
	if x != nil && x.SetupPriority != nil {
		return *x.SetupPriority
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute) GetHoldPriority() uint32 {
	if x != nil && x.HoldPriority != nil {
		return *x.HoldPriority
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute) GetIncludeAny() string {
	if x != nil && x.IncludeAny != nil {
		return *x.IncludeAny
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute) GetExcludeAny() string {
	if x != nil && x.ExcludeAny != nil {
		return *x.ExcludeAny
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute) GetIncludeAll() string {
	if x != nil && x.IncludeAll != nil {
		return *x.IncludeAll
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute) GetIncludeAnyAffinityName() []string {
	if x != nil {
		return x.IncludeAnyAffinityName
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute) GetIncludeAllAffinityName() []string {
	if x != nil {
		return x.IncludeAllAffinityName
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute) GetExcludeAffinityName() []string {
	if x != nil {
		return x.ExcludeAffinityName
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute) GetBypassAttributes() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_BypassAttributes {
	if x != nil {
		return x.BypassAttributes
	}
	return nil
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wtr              *int32                                                                                        `protobuf:"varint,1,opt,name=wtr" json:"wtr,omitempty"`
	RevertiveMode    *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby_RevertiveMode `protobuf:"varint,2,opt,name=revertive_mode,json=revertiveMode,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby_RevertiveMode" json:"revertive_mode,omitempty"`
	PathOverlap      *bool                                                                                         `protobuf:"varint,3,opt,name=path_overlap,json=pathOverlap" json:"path_overlap,omitempty"`
	DynamicBandwidth *bool                                                                                         `protobuf:"varint,4,opt,name=dynamic_bandwidth,json=dynamicBandwidth" json:"dynamic_bandwidth,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 1}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby) GetWtr() int32 {
	if x != nil && x.Wtr != nil {
		return *x.Wtr
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby) GetRevertiveMode() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby_RevertiveMode {
	if x != nil && x.RevertiveMode != nil {
		return *x.RevertiveMode
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby_RevertiveMode_NONX_REVERTIVE
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby) GetPathOverlap() bool {
	if x != nil && x.PathOverlap != nil {
		return *x.PathOverlap
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby) GetDynamicBandwidth() bool {
	if x != nil && x.DynamicBandwidth != nil {
		return *x.DynamicBandwidth
	}
	return false
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LspPath []*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath `protobuf:"bytes,1,rep,name=lsp_path,json=lspPath" json:"lsp_path,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 2}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths) GetLspPath() []*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath {
	if x != nil {
		return x.LspPath
	}
	return nil
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Bypass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable               *bool    `protobuf:"varint,1,opt,name=enable" json:"enable,omitempty"`
	ProtectionInterfaces []string `protobuf:"bytes,2,rep,name=protection_interfaces,json=protectionInterfaces" json:"protection_interfaces,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Bypass) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Bypass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Bypass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Bypass) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Bypass) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Bypass.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Bypass) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 3}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Bypass) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Bypass) GetProtectionInterfaces() []string {
	if x != nil {
		return x.ProtectionInterfaces
	}
	return nil
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwitchResult     *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchResult `protobuf:"varint,1,opt,name=switch_result,json=switchResult,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchResult" json:"switch_result,omitempty"`
	WtrState         *bool                                                                                             `protobuf:"varint,2,opt,name=wtr_state,json=wtrState" json:"wtr_state,omitempty"`
	WtrRemainingTime *int32                                                                                            `protobuf:"varint,3,opt,name=wtr_remaining_time,json=wtrRemainingTime" json:"wtr_remaining_time,omitempty"`
	SwitchState      *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchState  `protobuf:"varint,4,opt,name=switch_state,json=switchState,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchState" json:"switch_state,omitempty"`
	UsingOverlap     *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap `protobuf:"varint,5,opt,name=using_overlap,json=usingOverlap,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap" json:"using_overlap,omitempty"`
	SwitchReason     *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason `protobuf:"varint,6,opt,name=switch_reason,json=switchReason,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason" json:"switch_reason,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 4}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState) GetSwitchResult() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchResult {
	if x != nil && x.SwitchResult != nil {
		return *x.SwitchResult
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchResult_MAINX_LSP
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState) GetWtrState() bool {
	if x != nil && x.WtrState != nil {
		return *x.WtrState
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState) GetWtrRemainingTime() int32 {
	if x != nil && x.WtrRemainingTime != nil {
		return *x.WtrRemainingTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState) GetSwitchState() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchState {
	if x != nil && x.SwitchState != nil {
		return *x.SwitchState
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchState_NONE
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState) GetUsingOverlap() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap {
	if x != nil && x.UsingOverlap != nil {
		return *x.UsingOverlap
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap_DIFFERENTX_PATH
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState) GetSwitchReason() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason {
	if x != nil && x.SwitchReason != nil {
		return *x.SwitchReason
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason_NONE
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode              *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_Mode           `protobuf:"varint,1,opt,name=mode,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_Mode" json:"mode,omitempty"`
	ThresholdPercent  *int32                                                                                             `protobuf:"varint,2,opt,name=threshold_percent,json=thresholdPercent" json:"threshold_percent,omitempty"`
	ThresholdAbsolute *uint64                                                                                            `protobuf:"varint,3,opt,name=threshold_absolute,json=thresholdAbsolute" json:"threshold_absolute,omitempty"`
	Frequency         *int32                                                                                             `protobuf:"varint,4,opt,name=frequency" json:"frequency,omitempty"`
	MaxBandwidth      *uint64                                                                                            `protobuf:"varint,5,opt,name=max_bandwidth,json=maxBandwidth" json:"max_bandwidth,omitempty"`
	MinBandwidth      *uint64                                                                                            `protobuf:"varint,6,opt,name=min_bandwidth,json=minBandwidth" json:"min_bandwidth,omitempty"`
	OverflowLimit     *uint32                                                                                            `protobuf:"varint,7,opt,name=overflow_limit,json=overflowLimit" json:"overflow_limit,omitempty"`
	UnderflowLimit    *uint32                                                                                            `protobuf:"varint,8,opt,name=underflow_limit,json=underflowLimit" json:"underflow_limit,omitempty"`
	ThresholdLogic    *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_ThresholdLogic `protobuf:"varint,9,opt,name=threshold_logic,json=thresholdLogic,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_ThresholdLogic" json:"threshold_logic,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 5}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths) GetMode() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_Mode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_INVALID_ENUM_VALUE_Mode
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths) GetThresholdPercent() int32 {
	if x != nil && x.ThresholdPercent != nil {
		return *x.ThresholdPercent
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths) GetThresholdAbsolute() uint64 {
	if x != nil && x.ThresholdAbsolute != nil {
		return *x.ThresholdAbsolute
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths) GetFrequency() int32 {
	if x != nil && x.Frequency != nil {
		return *x.Frequency
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths) GetMaxBandwidth() uint64 {
	if x != nil && x.MaxBandwidth != nil {
		return *x.MaxBandwidth
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths) GetMinBandwidth() uint64 {
	if x != nil && x.MinBandwidth != nil {
		return *x.MinBandwidth
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths) GetOverflowLimit() uint32 {
	if x != nil && x.OverflowLimit != nil {
		return *x.OverflowLimit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths) GetUnderflowLimit() uint32 {
	if x != nil && x.UnderflowLimit != nil {
		return *x.UnderflowLimit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths) GetThresholdLogic() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_ThresholdLogic {
	if x != nil && x.ThresholdLogic != nil {
		return *x.ThresholdLogic
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_ThresholdLogic_AND
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ability          *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Ability `protobuf:"varint,1,opt,name=ability,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Ability" json:"ability,omitempty"`
	Mode             *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Mode    `protobuf:"varint,2,opt,name=mode,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Mode" json:"mode,omitempty"`
	MinTxInterval    *uint32                                                                                `protobuf:"varint,3,opt,name=min_tx_interval,json=minTxInterval" json:"min_tx_interval,omitempty"`
	MinRxInterval    *uint32                                                                                `protobuf:"varint,4,opt,name=min_rx_interval,json=minRxInterval" json:"min_rx_interval,omitempty"`
	DetectMultiplier *uint32                                                                                `protobuf:"varint,5,opt,name=detect_multiplier,json=detectMultiplier" json:"detect_multiplier,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 6}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp) GetAbility() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Ability {
	if x != nil && x.Ability != nil {
		return *x.Ability
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_INVALID_ENUM_VALUE_Ability
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp) GetMode() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Mode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_INVALID_ENUM_VALUE_Mode
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp) GetMinTxInterval() uint32 {
	if x != nil && x.MinTxInterval != nil {
		return *x.MinTxInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp) GetMinRxInterval() uint32 {
	if x != nil && x.MinRxInterval != nil {
		return *x.MinRxInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp) GetDetectMultiplier() uint32 {
	if x != nil && x.DetectMultiplier != nil {
		return *x.DetectMultiplier
	}
	return 0
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_BypassAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrrBandwidth           *uint32  `protobuf:"varint,1,opt,name=frr_bandwidth,json=frrBandwidth" json:"frr_bandwidth,omitempty"`
	SetupPriority          *uint32  `protobuf:"varint,2,opt,name=setup_priority,json=setupPriority" json:"setup_priority,omitempty"`
	HoldPriority           *uint32  `protobuf:"varint,3,opt,name=hold_priority,json=holdPriority" json:"hold_priority,omitempty"`
	IncludeAny             *string  `protobuf:"bytes,4,opt,name=include_any,json=includeAny" json:"include_any,omitempty"`
	ExcludeAny             *string  `protobuf:"bytes,5,opt,name=exclude_any,json=excludeAny" json:"exclude_any,omitempty"`
	IncludeAll             *string  `protobuf:"bytes,6,opt,name=include_all,json=includeAll" json:"include_all,omitempty"`
	IncludeAnyAffinityName []string `protobuf:"bytes,7,rep,name=include_any_affinity_name,json=includeAnyAffinityName" json:"include_any_affinity_name,omitempty"`
	IncludeAllAffinityName []string `protobuf:"bytes,8,rep,name=include_all_affinity_name,json=includeAllAffinityName" json:"include_all_affinity_name,omitempty"`
	ExcludeAffinityName    []string `protobuf:"bytes,9,rep,name=exclude_affinity_name,json=excludeAffinityName" json:"exclude_affinity_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_BypassAttributes) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_BypassAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_BypassAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_BypassAttributes) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_BypassAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_BypassAttributes.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_BypassAttributes) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 0, 0}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_BypassAttributes) GetFrrBandwidth() uint32 {
	if x != nil && x.FrrBandwidth != nil {
		return *x.FrrBandwidth
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_BypassAttributes) GetSetupPriority() uint32 {
	if x != nil && x.SetupPriority != nil {
		return *x.SetupPriority
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_BypassAttributes) GetHoldPriority() uint32 {
	if x != nil && x.HoldPriority != nil {
		return *x.HoldPriority
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_BypassAttributes) GetIncludeAny() string {
	if x != nil && x.IncludeAny != nil {
		return *x.IncludeAny
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_BypassAttributes) GetExcludeAny() string {
	if x != nil && x.ExcludeAny != nil {
		return *x.ExcludeAny
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_BypassAttributes) GetIncludeAll() string {
	if x != nil && x.IncludeAll != nil {
		return *x.IncludeAll
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_BypassAttributes) GetIncludeAnyAffinityName() []string {
	if x != nil {
		return x.IncludeAnyAffinityName
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_BypassAttributes) GetIncludeAllAffinityName() []string {
	if x != nil {
		return x.IncludeAllAffinityName
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_BypassAttributes) GetExcludeAffinityName() []string {
	if x != nil {
		return x.ExcludeAffinityName
	}
	return nil
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathType               *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType `protobuf:"varint,1,opt,name=path_type,json=pathType,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType" json:"path_type,omitempty"`
	ExplicitPathName       *string                                                                                        `protobuf:"bytes,2,opt,name=explicit_path_name,json=explicitPathName" json:"explicit_path_name,omitempty"`
	HopLimit               *uint32                                                                                        `protobuf:"varint,3,opt,name=hop_limit,json=hopLimit" json:"hop_limit,omitempty"`
	LspId                  *uint32                                                                                        `protobuf:"varint,4,opt,name=lsp_id,json=lspId" json:"lsp_id,omitempty"`
	LspState               *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState `protobuf:"varint,5,opt,name=lsp_state,json=lspState,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState" json:"lsp_state,omitempty"`
	ModifyLspId            *uint32                                                                                        `protobuf:"varint,6,opt,name=modify_lsp_id,json=modifyLspId" json:"modify_lsp_id,omitempty"`
	IncludeAll             *string                                                                                        `protobuf:"bytes,7,opt,name=include_all,json=includeAll" json:"include_all,omitempty"`
	IncludeAny             *string                                                                                        `protobuf:"bytes,8,opt,name=include_any,json=includeAny" json:"include_any,omitempty"`
	ExcludeAny             *string                                                                                        `protobuf:"bytes,9,opt,name=exclude_any,json=excludeAny" json:"exclude_any,omitempty"`
	IncludeAnyAffinityName []string                                                                                       `protobuf:"bytes,10,rep,name=include_any_affinity_name,json=includeAnyAffinityName" json:"include_any_affinity_name,omitempty"`
	IncludeAllAffinityName []string                                                                                       `protobuf:"bytes,11,rep,name=include_all_affinity_name,json=includeAllAffinityName" json:"include_all_affinity_name,omitempty"`
	ExcludeAffinityName    []string                                                                                       `protobuf:"bytes,12,rep,name=exclude_affinity_name,json=excludeAffinityName" json:"exclude_affinity_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 1, 2, 0}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath) GetPathType() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType {
	if x != nil && x.PathType != nil {
		return *x.PathType
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType_PRIMARY
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath) GetExplicitPathName() string {
	if x != nil && x.ExplicitPathName != nil {
		return *x.ExplicitPathName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath) GetHopLimit() uint32 {
	if x != nil && x.HopLimit != nil {
		return *x.HopLimit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath) GetLspId() uint32 {
	if x != nil && x.LspId != nil {
		return *x.LspId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath) GetLspState() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState {
	if x != nil && x.LspState != nil {
		return *x.LspState
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState_DOWN
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath) GetModifyLspId() uint32 {
	if x != nil && x.ModifyLspId != nil {
		return *x.ModifyLspId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath) GetIncludeAll() string {
	if x != nil && x.IncludeAll != nil {
		return *x.IncludeAll
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath) GetIncludeAny() string {
	if x != nil && x.IncludeAny != nil {
		return *x.IncludeAny
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath) GetExcludeAny() string {
	if x != nil && x.ExcludeAny != nil {
		return *x.ExcludeAny
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath) GetIncludeAnyAffinityName() []string {
	if x != nil {
		return x.IncludeAnyAffinityName
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath) GetIncludeAllAffinityName() []string {
	if x != nil {
		return x.IncludeAllAffinityName
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath) GetExcludeAffinityName() []string {
	if x != nil {
		return x.ExcludeAffinityName
	}
	return nil
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Reoptimization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frequency *int32 `protobuf:"varint,1,opt,name=frequency" json:"frequency,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Reoptimization) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Reoptimization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Reoptimization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Reoptimization) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Reoptimization) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Reoptimization.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Reoptimization) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 2, 0}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Reoptimization) GetFrequency() int32 {
	if x != nil && x.Frequency != nil {
		return *x.Frequency
	}
	return 0
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RevertiveMode *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby_RevertiveMode `protobuf:"varint,1,opt,name=revertive_mode,json=revertiveMode,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby_RevertiveMode" json:"revertive_mode,omitempty"`
	WtrTime       *int32                                                                                      `protobuf:"varint,2,opt,name=wtr_time,json=wtrTime" json:"wtr_time,omitempty"`
	PathOverlap   *bool                                                                                       `protobuf:"varint,3,opt,name=path_overlap,json=pathOverlap" json:"path_overlap,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 2, 1}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby) GetRevertiveMode() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby_RevertiveMode {
	if x != nil && x.RevertiveMode != nil {
		return *x.RevertiveMode
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby_RevertiveMode_NONX_REVERTIVE
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby) GetWtrTime() int32 {
	if x != nil && x.WtrTime != nil {
		return *x.WtrTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby) GetPathOverlap() bool {
	if x != nil && x.PathOverlap != nil {
		return *x.PathOverlap
	}
	return false
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LspPath []*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath `protobuf:"bytes,1,rep,name=lsp_path,json=lspPath" json:"lsp_path,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 2, 2}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths) GetLspPath() []*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath {
	if x != nil {
		return x.LspPath
	}
	return nil
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwitchResult     *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchResult `protobuf:"varint,1,opt,name=switch_result,json=switchResult,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchResult" json:"switch_result,omitempty"`
	WtrState         *bool                                                                                           `protobuf:"varint,2,opt,name=wtr_state,json=wtrState" json:"wtr_state,omitempty"`
	WtrRemainingTime *int32                                                                                          `protobuf:"varint,3,opt,name=wtr_remaining_time,json=wtrRemainingTime" json:"wtr_remaining_time,omitempty"`
	SwitchState      *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchState  `protobuf:"varint,4,opt,name=switch_state,json=switchState,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchState" json:"switch_state,omitempty"`
	UsingOverlap     *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap `protobuf:"varint,5,opt,name=using_overlap,json=usingOverlap,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap" json:"using_overlap,omitempty"`
	SwitchReason     *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason `protobuf:"varint,6,opt,name=switch_reason,json=switchReason,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason" json:"switch_reason,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 2, 3}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState) GetSwitchResult() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchResult {
	if x != nil && x.SwitchResult != nil {
		return *x.SwitchResult
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchResult_MAINX_LSP
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState) GetWtrState() bool {
	if x != nil && x.WtrState != nil {
		return *x.WtrState
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState) GetWtrRemainingTime() int32 {
	if x != nil && x.WtrRemainingTime != nil {
		return *x.WtrRemainingTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState) GetSwitchState() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchState {
	if x != nil && x.SwitchState != nil {
		return *x.SwitchState
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchState_NONE
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState) GetUsingOverlap() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap {
	if x != nil && x.UsingOverlap != nil {
		return *x.UsingOverlap
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap_DIFFERENTX_PATH
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState) GetSwitchReason() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason {
	if x != nil && x.SwitchReason != nil {
		return *x.SwitchReason
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason_NONE
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lsp []*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp `protobuf:"bytes,1,rep,name=lsp" json:"lsp,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 2, 4}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps) GetLsp() []*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp {
	if x != nil {
		return x.Lsp
	}
	return nil
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable               *bool                                                                                `protobuf:"varint,1,opt,name=enable" json:"enable,omitempty"`
	Mode                 *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Mode    `protobuf:"varint,2,opt,name=mode,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Mode" json:"mode,omitempty"`
	MinTxInterval        *uint32                                                                              `protobuf:"varint,3,opt,name=min_tx_interval,json=minTxInterval" json:"min_tx_interval,omitempty"`
	MinRxInterval        *uint32                                                                              `protobuf:"varint,4,opt,name=min_rx_interval,json=minRxInterval" json:"min_rx_interval,omitempty"`
	DetectMultiplier     *uint32                                                                              `protobuf:"varint,5,opt,name=detect_multiplier,json=detectMultiplier" json:"detect_multiplier,omitempty"`
	Block                *bool                                                                                `protobuf:"varint,6,opt,name=block" json:"block,omitempty"`
	OnlyDetectionPrimary *bool                                                                                `protobuf:"varint,7,opt,name=only_detection_primary,json=onlyDetectionPrimary" json:"only_detection_primary,omitempty"`
	Ability              *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Ability `protobuf:"varint,8,opt,name=ability,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Ability" json:"ability,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 2, 5}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp) GetMode() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Mode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_INVALID_ENUM_VALUE_Mode
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp) GetMinTxInterval() uint32 {
	if x != nil && x.MinTxInterval != nil {
		return *x.MinTxInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp) GetMinRxInterval() uint32 {
	if x != nil && x.MinRxInterval != nil {
		return *x.MinRxInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp) GetDetectMultiplier() uint32 {
	if x != nil && x.DetectMultiplier != nil {
		return *x.DetectMultiplier
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp) GetBlock() bool {
	if x != nil && x.Block != nil {
		return *x.Block
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp) GetOnlyDetectionPrimary() bool {
	if x != nil && x.OnlyDetectionPrimary != nil {
		return *x.OnlyDetectionPrimary
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp) GetAbility() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Ability {
	if x != nil && x.Ability != nil {
		return *x.Ability
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_INVALID_ENUM_VALUE_Ability
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable           *bool                                                                                   `protobuf:"varint,1,opt,name=enable" json:"enable,omitempty"`
	Mode             *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Mode    `protobuf:"varint,2,opt,name=mode,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Mode" json:"mode,omitempty"`
	MinTxInterval    *uint32                                                                                 `protobuf:"varint,3,opt,name=min_tx_interval,json=minTxInterval" json:"min_tx_interval,omitempty"`
	MinRxInterval    *uint32                                                                                 `protobuf:"varint,4,opt,name=min_rx_interval,json=minRxInterval" json:"min_rx_interval,omitempty"`
	DetectMultiplier *uint32                                                                                 `protobuf:"varint,5,opt,name=detect_multiplier,json=detectMultiplier" json:"detect_multiplier,omitempty"`
	Block            *bool                                                                                   `protobuf:"varint,6,opt,name=block" json:"block,omitempty"`
	Ability          *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Ability `protobuf:"varint,7,opt,name=ability,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Ability" json:"ability,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 2, 6}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel) GetMode() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Mode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_INVALID_ENUM_VALUE_Mode
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel) GetMinTxInterval() uint32 {
	if x != nil && x.MinTxInterval != nil {
		return *x.MinTxInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel) GetMinRxInterval() uint32 {
	if x != nil && x.MinRxInterval != nil {
		return *x.MinRxInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel) GetDetectMultiplier() uint32 {
	if x != nil && x.DetectMultiplier != nil {
		return *x.DetectMultiplier
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel) GetBlock() bool {
	if x != nil && x.Block != nil {
		return *x.Block
	}
	return false
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel) GetAbility() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Ability {
	if x != nil && x.Ability != nil {
		return *x.Ability
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_INVALID_ENUM_VALUE_Ability
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExplicitPathName       *string                                                                                      `protobuf:"bytes,2,opt,name=explicit_path_name,json=explicitPathName" json:"explicit_path_name,omitempty"`
	HopLimit               *uint32                                                                                      `protobuf:"varint,3,opt,name=hop_limit,json=hopLimit" json:"hop_limit,omitempty"`
	LspState               *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState `protobuf:"varint,4,opt,name=lsp_state,json=lspState,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState" json:"lsp_state,omitempty"`
	LspId                  *uint32                                                                                      `protobuf:"varint,5,opt,name=lsp_id,json=lspId" json:"lsp_id,omitempty"`
	ModifyLspId            *uint32                                                                                      `protobuf:"varint,6,opt,name=modify_lsp_id,json=modifyLspId" json:"modify_lsp_id,omitempty"`
	IncludeAll             *string                                                                                      `protobuf:"bytes,7,opt,name=include_all,json=includeAll" json:"include_all,omitempty"`
	IncludeAny             *string                                                                                      `protobuf:"bytes,8,opt,name=include_any,json=includeAny" json:"include_any,omitempty"`
	ExcludeAny             *string                                                                                      `protobuf:"bytes,9,opt,name=exclude_any,json=excludeAny" json:"exclude_any,omitempty"`
	IncludeAllAffinityName []string                                                                                     `protobuf:"bytes,10,rep,name=include_all_affinity_name,json=includeAllAffinityName" json:"include_all_affinity_name,omitempty"`
	IncludeAnyAffinityName []string                                                                                     `protobuf:"bytes,11,rep,name=include_any_affinity_name,json=includeAnyAffinityName" json:"include_any_affinity_name,omitempty"`
	ExcludeAnyAffinityName []string                                                                                     `protobuf:"bytes,12,rep,name=exclude_any_affinity_name,json=excludeAnyAffinityName" json:"exclude_any_affinity_name,omitempty"`
	ExcludeAffinityName    []string                                                                                     `protobuf:"bytes,13,rep,name=exclude_affinity_name,json=excludeAffinityName" json:"exclude_affinity_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 2, 2, 0}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath) GetExplicitPathName() string {
	if x != nil && x.ExplicitPathName != nil {
		return *x.ExplicitPathName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath) GetHopLimit() uint32 {
	if x != nil && x.HopLimit != nil {
		return *x.HopLimit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath) GetLspState() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState {
	if x != nil && x.LspState != nil {
		return *x.LspState
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState_DOWN
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath) GetLspId() uint32 {
	if x != nil && x.LspId != nil {
		return *x.LspId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath) GetModifyLspId() uint32 {
	if x != nil && x.ModifyLspId != nil {
		return *x.ModifyLspId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath) GetIncludeAll() string {
	if x != nil && x.IncludeAll != nil {
		return *x.IncludeAll
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath) GetIncludeAny() string {
	if x != nil && x.IncludeAny != nil {
		return *x.IncludeAny
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath) GetExcludeAny() string {
	if x != nil && x.ExcludeAny != nil {
		return *x.ExcludeAny
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath) GetIncludeAllAffinityName() []string {
	if x != nil {
		return x.IncludeAllAffinityName
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath) GetIncludeAnyAffinityName() []string {
	if x != nil {
		return x.IncludeAnyAffinityName
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath) GetExcludeAnyAffinityName() []string {
	if x != nil {
		return x.ExcludeAnyAffinityName
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath) GetExcludeAffinityName() []string {
	if x != nil {
		return x.ExcludeAffinityName
	}
	return nil
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IngressLsrId *string                                                                           `protobuf:"bytes,1,opt,name=ingress_lsr_id,json=ingressLsrId" json:"ingress_lsr_id,omitempty"`
	EgressLsrId  *string                                                                           `protobuf:"bytes,2,opt,name=egress_lsr_id,json=egressLsrId" json:"egress_lsr_id,omitempty"`
	SessionId    *uint32                                                                           `protobuf:"varint,3,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	LspId        *uint32                                                                           `protobuf:"varint,4,opt,name=lsp_id,json=lspId" json:"lsp_id,omitempty"`
	CHops        *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops `protobuf:"bytes,5,opt,name=c_hops,json=cHops" json:"c_hops,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 2, 4, 0}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp) GetIngressLsrId() string {
	if x != nil && x.IngressLsrId != nil {
		return *x.IngressLsrId
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp) GetEgressLsrId() string {
	if x != nil && x.EgressLsrId != nil {
		return *x.EgressLsrId
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp) GetSessionId() uint32 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp) GetLspId() uint32 {
	if x != nil && x.LspId != nil {
		return *x.LspId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp) GetCHops() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops {
	if x != nil {
		return x.CHops
	}
	return nil
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CHop []*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop `protobuf:"bytes,1,rep,name=c_hop,json=cHop" json:"c_hop,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 2, 4, 0, 0}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops) GetCHop() []*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop {
	if x != nil {
		return x.CHop
	}
	return nil
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index     *uint32                                                                                          `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	LabelType *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop_LabelType `protobuf:"varint,3,opt,name=label_type,json=labelType,enum=huawei_ifm.Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop_LabelType" json:"label_type,omitempty"`
	Label     *uint32                                                                                          `protobuf:"varint,4,opt,name=label" json:"label,omitempty"`
	Nai       *string                                                                                          `protobuf:"bytes,5,opt,name=nai" json:"nai,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 2, 4, 0, 0, 0}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop) GetLabelType() Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop_LabelType {
	if x != nil && x.LabelType != nil {
		return *x.LabelType
	}
	return Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop_LabelType_LINK
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop) GetLabel() uint32 {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop) GetNai() string {
	if x != nil && x.Nai != nil {
		return *x.Nai
	}
	return ""
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relative *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType_Relative `protobuf:"bytes,1,opt,name=relative" json:"relative,omitempty"`
	Absolute *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType_Absolute `protobuf:"bytes,2,opt,name=absolute" json:"absolute,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 3, 0}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType) GetRelative() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType_Relative {
	if x != nil {
		return x.Relative
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType) GetAbsolute() *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType_Absolute {
	if x != nil {
		return x.Absolute
	}
	return nil
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType_Relative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relative *int32 `protobuf:"varint,1,opt,name=relative" json:"relative,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType_Relative) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType_Relative{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType_Relative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType_Relative) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType_Relative) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType_Relative.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType_Relative) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 3, 0, 0}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType_Relative) GetRelative() int32 {
	if x != nil && x.Relative != nil {
		return *x.Relative
	}
	return 0
}

type Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType_Absolute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Absolute *int32 `protobuf:"varint,1,opt,name=absolute" json:"absolute,omitempty"`
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType_Absolute) Reset() {
	*x = Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType_Absolute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType_Absolute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType_Absolute) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType_Absolute) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType_Absolute.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType_Absolute) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 9, 0, 0, 0, 3, 0, 1}
}

func (x *Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType_Absolute) GetAbsolute() int32 {
	if x != nil && x.Absolute != nil {
		return *x.Absolute
	}
	return 0
}

type Ifm_Interfaces_Interface_NveAttribute_Vtep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceVtepIp *string `protobuf:"bytes,1,opt,name=source_vtep_ip,json=sourceVtepIp" json:"source_vtep_ip,omitempty"`
	PhysAddress  *string `protobuf:"bytes,2,opt,name=phys_address,json=physAddress" json:"phys_address,omitempty"`
	BypassVtepIp *string `protobuf:"bytes,3,opt,name=bypass_vtep_ip,json=bypassVtepIp" json:"bypass_vtep_ip,omitempty"`
}

func (x *Ifm_Interfaces_Interface_NveAttribute_Vtep) Reset() {
	*x = Ifm_Interfaces_Interface_NveAttribute_Vtep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_NveAttribute_Vtep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_NveAttribute_Vtep) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_NveAttribute_Vtep) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_NveAttribute_Vtep.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_NveAttribute_Vtep) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 14, 0}
}

func (x *Ifm_Interfaces_Interface_NveAttribute_Vtep) GetSourceVtepIp() string {
	if x != nil && x.SourceVtepIp != nil {
		return *x.SourceVtepIp
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_NveAttribute_Vtep) GetPhysAddress() string {
	if x != nil && x.PhysAddress != nil {
		return *x.PhysAddress
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_NveAttribute_Vtep) GetBypassVtepIp() string {
	if x != nil && x.BypassVtepIp != nil {
		return *x.BypassVtepIp
	}
	return ""
}

type Ifm_Interfaces_Interface_Efm_Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State                 *Ifm_Interfaces_Interface_Efm_Session_State                 `protobuf:"varint,1,opt,name=state,enum=huawei_ifm.Ifm_Interfaces_Interface_Efm_Session_State" json:"state,omitempty"`
	Mode                  *Ifm_Interfaces_Interface_Efm_Session_Mode                  `protobuf:"varint,2,opt,name=mode,enum=huawei_ifm.Ifm_Interfaces_Interface_Efm_Session_Mode" json:"mode,omitempty"`
	PacketMaxSize         *uint32                                                     `protobuf:"varint,3,opt,name=packet_max_size,json=packetMaxSize" json:"packet_max_size,omitempty"`
	Interval              *uint32                                                     `protobuf:"varint,4,opt,name=interval" json:"interval,omitempty"`
	Timeout               *uint32                                                     `protobuf:"varint,5,opt,name=timeout" json:"timeout,omitempty"`
	LinkEvent             *Ifm_Interfaces_Interface_Efm_Session_LinkEvent             `protobuf:"varint,6,opt,name=link_event,json=linkEvent,enum=huawei_ifm.Ifm_Interfaces_Interface_Efm_Session_LinkEvent" json:"link_event,omitempty"`
	IgnoreLoopbackRequest *Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest `protobuf:"varint,7,opt,name=ignore_loopback_request,json=ignoreLoopbackRequest,enum=huawei_ifm.Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest" json:"ignore_loopback_request,omitempty"`
	TriggerIfDown         *Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown         `protobuf:"varint,8,opt,name=trigger_if_down,json=triggerIfDown,enum=huawei_ifm.Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown" json:"trigger_if_down,omitempty"`
	HoldUpTime            *uint32                                                     `protobuf:"varint,9,opt,name=hold_up_time,json=holdUpTime" json:"hold_up_time,omitempty"`
	TriggerMacRenew       *bool                                                       `protobuf:"varint,10,opt,name=trigger_mac_renew,json=triggerMacRenew" json:"trigger_mac_renew,omitempty"`
	ErrorFrame            *Ifm_Interfaces_Interface_Efm_Session_ErrorFrame            `protobuf:"bytes,11,opt,name=error_frame,json=errorFrame" json:"error_frame,omitempty"`
	ErrorFrameSecond      *Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond      `protobuf:"bytes,12,opt,name=error_frame_second,json=errorFrameSecond" json:"error_frame_second,omitempty"`
	ErrorCode             *Ifm_Interfaces_Interface_Efm_Session_ErrorCode             `protobuf:"bytes,13,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	ErrorFramePeriod      *Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod      `protobuf:"bytes,14,opt,name=error_frame_period,json=errorFramePeriod" json:"error_frame_period,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Efm_Session) Reset() {
	*x = Ifm_Interfaces_Interface_Efm_Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Efm_Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Efm_Session) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Efm_Session) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Efm_Session) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 0}
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetState() Ifm_Interfaces_Interface_Efm_Session_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Ifm_Interfaces_Interface_Efm_Session_State_DISABLE
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetMode() Ifm_Interfaces_Interface_Efm_Session_Mode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return Ifm_Interfaces_Interface_Efm_Session_Mode_PASSIVE
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetPacketMaxSize() uint32 {
	if x != nil && x.PacketMaxSize != nil {
		return *x.PacketMaxSize
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetInterval() uint32 {
	if x != nil && x.Interval != nil {
		return *x.Interval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetTimeout() uint32 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetLinkEvent() Ifm_Interfaces_Interface_Efm_Session_LinkEvent {
	if x != nil && x.LinkEvent != nil {
		return *x.LinkEvent
	}
	return Ifm_Interfaces_Interface_Efm_Session_LinkEvent_DISABLE
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetIgnoreLoopbackRequest() Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest {
	if x != nil && x.IgnoreLoopbackRequest != nil {
		return *x.IgnoreLoopbackRequest
	}
	return Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest_DISABLE
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetTriggerIfDown() Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown {
	if x != nil && x.TriggerIfDown != nil {
		return *x.TriggerIfDown
	}
	return Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown_DISABLE
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetHoldUpTime() uint32 {
	if x != nil && x.HoldUpTime != nil {
		return *x.HoldUpTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetTriggerMacRenew() bool {
	if x != nil && x.TriggerMacRenew != nil {
		return *x.TriggerMacRenew
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetErrorFrame() *Ifm_Interfaces_Interface_Efm_Session_ErrorFrame {
	if x != nil {
		return x.ErrorFrame
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetErrorFrameSecond() *Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond {
	if x != nil {
		return x.ErrorFrameSecond
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetErrorCode() *Ifm_Interfaces_Interface_Efm_Session_ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Efm_Session) GetErrorFramePeriod() *Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod {
	if x != nil {
		return x.ErrorFramePeriod
	}
	return nil
}

type Ifm_Interfaces_Interface_Efm_Session_ErrorFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notification *Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification `protobuf:"varint,1,opt,name=notification,enum=huawei_ifm.Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification" json:"notification,omitempty"`
	Period       *uint32                                                       `protobuf:"varint,2,opt,name=period" json:"period,omitempty"`
	Threshold    *uint32                                                       `protobuf:"varint,3,opt,name=threshold" json:"threshold,omitempty"`
	PeriodUnit   *Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit   `protobuf:"varint,4,opt,name=period_unit,json=periodUnit,enum=huawei_ifm.Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit" json:"period_unit,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrame) Reset() {
	*x = Ifm_Interfaces_Interface_Efm_Session_ErrorFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Efm_Session_ErrorFrame) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrame) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_ErrorFrame.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Efm_Session_ErrorFrame) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrame) GetNotification() Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification {
	if x != nil && x.Notification != nil {
		return *x.Notification
	}
	return Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification_DISABLE
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrame) GetPeriod() uint32 {
	if x != nil && x.Period != nil {
		return *x.Period
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrame) GetThreshold() uint32 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrame) GetPeriodUnit() Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit {
	if x != nil && x.PeriodUnit != nil {
		return *x.PeriodUnit
	}
	return Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit_SECOND
}

type Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notification *Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification `protobuf:"varint,1,opt,name=notification,enum=huawei_ifm.Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification" json:"notification,omitempty"`
	Period       *uint32                                                             `protobuf:"varint,2,opt,name=period" json:"period,omitempty"`
	Threshold    *uint32                                                             `protobuf:"varint,3,opt,name=threshold" json:"threshold,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond) Reset() {
	*x = Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 0, 1}
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond) GetNotification() Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification {
	if x != nil && x.Notification != nil {
		return *x.Notification
	}
	return Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification_DISABLE
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond) GetPeriod() uint32 {
	if x != nil && x.Period != nil {
		return *x.Period
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond) GetThreshold() uint32 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

type Ifm_Interfaces_Interface_Efm_Session_ErrorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notification *Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification `protobuf:"varint,1,opt,name=notification,enum=huawei_ifm.Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification" json:"notification,omitempty"`
	Period       *uint32                                                      `protobuf:"varint,2,opt,name=period" json:"period,omitempty"`
	Threshold    *uint32                                                      `protobuf:"varint,3,opt,name=threshold" json:"threshold,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorCode) Reset() {
	*x = Ifm_Interfaces_Interface_Efm_Session_ErrorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Efm_Session_ErrorCode) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorCode) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_ErrorCode.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Efm_Session_ErrorCode) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 0, 2}
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorCode) GetNotification() Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification {
	if x != nil && x.Notification != nil {
		return *x.Notification
	}
	return Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification_DISABLE
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorCode) GetPeriod() uint32 {
	if x != nil && x.Period != nil {
		return *x.Period
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorCode) GetThreshold() uint32 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

type Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notification *Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification `protobuf:"varint,1,opt,name=notification,enum=huawei_ifm.Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification" json:"notification,omitempty"`
	Period       *uint32                                                             `protobuf:"varint,2,opt,name=period" json:"period,omitempty"`
	Threshold    *uint32                                                             `protobuf:"varint,3,opt,name=threshold" json:"threshold,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod) Reset() {
	*x = Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 18, 0, 3}
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod) GetNotification() Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification {
	if x != nil && x.Notification != nil {
		return *x.Notification
	}
	return Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification_DISABLE
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod) GetPeriod() uint32 {
	if x != nil && x.Period != nil {
		return *x.Period
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod) GetThreshold() uint32 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

type Ifm_Interfaces_Interface_Lldp_Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminStatus *Ifm_Interfaces_Interface_Lldp_Session_AdminStatus `protobuf:"varint,1,opt,name=admin_status,json=adminStatus,enum=huawei_ifm.Ifm_Interfaces_Interface_Lldp_Session_AdminStatus" json:"admin_status,omitempty"`
	TlvEnable   *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable   `protobuf:"bytes,2,opt,name=tlv_enable,json=tlvEnable" json:"tlv_enable,omitempty"`
	Neighbors   *Ifm_Interfaces_Interface_Lldp_Session_Neighbors   `protobuf:"bytes,3,opt,name=neighbors" json:"neighbors,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Lldp_Session) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session) GetAdminStatus() Ifm_Interfaces_Interface_Lldp_Session_AdminStatus {
	if x != nil && x.AdminStatus != nil {
		return *x.AdminStatus
	}
	return Ifm_Interfaces_Interface_Lldp_Session_INVALID_ENUM_VALUE_AdminStatus
}

func (x *Ifm_Interfaces_Interface_Lldp_Session) GetTlvEnable() *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable {
	if x != nil {
		return x.TlvEnable
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Lldp_Session) GetNeighbors() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

type Ifm_Interfaces_Interface_Lldp_Session_TlvEnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagementAddress    *bool  `protobuf:"varint,1,opt,name=management_address,json=managementAddress" json:"management_address,omitempty"`
	PortDescription      *bool  `protobuf:"varint,2,opt,name=port_description,json=portDescription" json:"port_description,omitempty"`
	SystemCapability     *bool  `protobuf:"varint,3,opt,name=system_capability,json=systemCapability" json:"system_capability,omitempty"`
	SystemDescription    *bool  `protobuf:"varint,4,opt,name=system_description,json=systemDescription" json:"system_description,omitempty"`
	SystemName           *bool  `protobuf:"varint,5,opt,name=system_name,json=systemName" json:"system_name,omitempty"`
	PortVlanId           *bool  `protobuf:"varint,6,opt,name=port_vlan_id,json=portVlanId" json:"port_vlan_id,omitempty"`
	ProtocolVlanIdEnable *bool  `protobuf:"varint,7,opt,name=protocol_vlan_id_enable,json=protocolVlanIdEnable" json:"protocol_vlan_id_enable,omitempty"`
	ProtocolVlanId       *int32 `protobuf:"varint,8,opt,name=protocol_vlan_id,json=protocolVlanId" json:"protocol_vlan_id,omitempty"`
	VlanNameEnable       *bool  `protobuf:"varint,9,opt,name=vlan_name_enable,json=vlanNameEnable" json:"vlan_name_enable,omitempty"`
	VlanNameId           *int32 `protobuf:"varint,10,opt,name=vlan_name_id,json=vlanNameId" json:"vlan_name_id,omitempty"`
	ProtocolIdentity     *bool  `protobuf:"varint,11,opt,name=protocol_identity,json=protocolIdentity" json:"protocol_identity,omitempty"`
	MacPhysic            *bool  `protobuf:"varint,12,opt,name=mac_physic,json=macPhysic" json:"mac_physic,omitempty"`
	LinkAggregation      *bool  `protobuf:"varint,13,opt,name=link_aggregation,json=linkAggregation" json:"link_aggregation,omitempty"`
	MaxFrameSize         *bool  `protobuf:"varint,14,opt,name=max_frame_size,json=maxFrameSize" json:"max_frame_size,omitempty"`
	Ddp                  *bool  `protobuf:"varint,15,opt,name=ddp" json:"ddp,omitempty"`
	Identity             *bool  `protobuf:"varint,16,opt,name=identity" json:"identity,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_TlvEnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_TlvEnable.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetManagementAddress() bool {
	if x != nil && x.ManagementAddress != nil {
		return *x.ManagementAddress
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetPortDescription() bool {
	if x != nil && x.PortDescription != nil {
		return *x.PortDescription
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetSystemCapability() bool {
	if x != nil && x.SystemCapability != nil {
		return *x.SystemCapability
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetSystemDescription() bool {
	if x != nil && x.SystemDescription != nil {
		return *x.SystemDescription
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetSystemName() bool {
	if x != nil && x.SystemName != nil {
		return *x.SystemName
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetPortVlanId() bool {
	if x != nil && x.PortVlanId != nil {
		return *x.PortVlanId
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetProtocolVlanIdEnable() bool {
	if x != nil && x.ProtocolVlanIdEnable != nil {
		return *x.ProtocolVlanIdEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetProtocolVlanId() int32 {
	if x != nil && x.ProtocolVlanId != nil {
		return *x.ProtocolVlanId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetVlanNameEnable() bool {
	if x != nil && x.VlanNameEnable != nil {
		return *x.VlanNameEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetVlanNameId() int32 {
	if x != nil && x.VlanNameId != nil {
		return *x.VlanNameId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetProtocolIdentity() bool {
	if x != nil && x.ProtocolIdentity != nil {
		return *x.ProtocolIdentity
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetMacPhysic() bool {
	if x != nil && x.MacPhysic != nil {
		return *x.MacPhysic
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetLinkAggregation() bool {
	if x != nil && x.LinkAggregation != nil {
		return *x.LinkAggregation
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetMaxFrameSize() bool {
	if x != nil && x.MaxFrameSize != nil {
		return *x.MaxFrameSize
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetDdp() bool {
	if x != nil && x.Ddp != nil {
		return *x.Ddp
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_TlvEnable) GetIdentity() bool {
	if x != nil && x.Identity != nil {
		return *x.Identity
	}
	return false
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbor []*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor `protobuf:"bytes,1,rep,name=neighbor" json:"neighbor,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 1}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors) GetNeighbor() []*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index                              *uint32                                                                                      `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	ChassisIdSubType                   *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType                   `protobuf:"varint,2,opt,name=chassis_id_sub_type,json=chassisIdSubType,enum=huawei_ifm.Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType" json:"chassis_id_sub_type,omitempty"`
	ChassisId                          *string                                                                                      `protobuf:"bytes,3,opt,name=chassis_id,json=chassisId" json:"chassis_id,omitempty"`
	PortIdSubType                      *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType                      `protobuf:"varint,4,opt,name=port_id_sub_type,json=portIdSubType,enum=huawei_ifm.Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType" json:"port_id_sub_type,omitempty"`
	PortId                             *string                                                                                      `protobuf:"bytes,5,opt,name=port_id,json=portId" json:"port_id,omitempty"`
	PortDescription                    *string                                                                                      `protobuf:"bytes,6,opt,name=port_description,json=portDescription" json:"port_description,omitempty"`
	SystemName                         *string                                                                                      `protobuf:"bytes,7,opt,name=system_name,json=systemName" json:"system_name,omitempty"`
	SystemDescription                  *string                                                                                      `protobuf:"bytes,8,opt,name=system_description,json=systemDescription" json:"system_description,omitempty"`
	SystemCapabilitiesEnabled          *string                                                                                      `protobuf:"bytes,9,opt,name=system_capabilities_enabled,json=systemCapabilitiesEnabled" json:"system_capabilities_enabled,omitempty"`
	SystemCapabilitiesSupported        *string                                                                                      `protobuf:"bytes,10,opt,name=system_capabilities_supported,json=systemCapabilitiesSupported" json:"system_capabilities_supported,omitempty"`
	ExpiredTime                        *int32                                                                                       `protobuf:"varint,11,opt,name=expired_time,json=expiredTime" json:"expired_time,omitempty"`
	PortVlanId                         *int32                                                                                       `protobuf:"varint,12,opt,name=port_vlan_id,json=portVlanId" json:"port_vlan_id,omitempty"`
	ProtocolIdentity                   *string                                                                                      `protobuf:"bytes,13,opt,name=protocol_identity,json=protocolIdentity" json:"protocol_identity,omitempty"`
	AutoNegotiationSupported           *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported           `protobuf:"varint,14,opt,name=auto_negotiation_supported,json=autoNegotiationSupported,enum=huawei_ifm.Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported" json:"auto_negotiation_supported,omitempty"`
	AutoNegotiationEnabled             *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled             `protobuf:"varint,15,opt,name=auto_negotiation_enabled,json=autoNegotiationEnabled,enum=huawei_ifm.Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled" json:"auto_negotiation_enabled,omitempty"`
	AutoNegotiationCapability          *string                                                                                      `protobuf:"bytes,16,opt,name=auto_negotiation_capability,json=autoNegotiationCapability" json:"auto_negotiation_capability,omitempty"`
	OperMauType                        *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType                        `protobuf:"varint,17,opt,name=oper_mau_type,json=operMauType,enum=huawei_ifm.Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType" json:"oper_mau_type,omitempty"`
	LinkAggregationSupported           *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported           `protobuf:"varint,18,opt,name=link_aggregation_supported,json=linkAggregationSupported,enum=huawei_ifm.Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported" json:"link_aggregation_supported,omitempty"`
	LinkAggregationEnabled             *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled             `protobuf:"varint,19,opt,name=link_aggregation_enabled,json=linkAggregationEnabled,enum=huawei_ifm.Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled" json:"link_aggregation_enabled,omitempty"`
	AggregationPortId                  *int32                                                                                       `protobuf:"varint,20,opt,name=aggregation_port_id,json=aggregationPortId" json:"aggregation_port_id,omitempty"`
	MaximumFrameSize                   *int32                                                                                       `protobuf:"varint,21,opt,name=maximum_frame_size,json=maximumFrameSize" json:"maximum_frame_size,omitempty"`
	DiscoveredTime                     *string                                                                                      `protobuf:"bytes,22,opt,name=discovered_time,json=discoveredTime" json:"discovered_time,omitempty"`
	Status                             *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_Status                             `protobuf:"varint,23,opt,name=status,enum=huawei_ifm.Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_Status" json:"status,omitempty"`
	NetCardId                          *string                                                                                      `protobuf:"bytes,24,opt,name=net_card_id,json=netCardId" json:"net_card_id,omitempty"`
	ManagementAddresss                 *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss                 `protobuf:"bytes,25,opt,name=management_addresss,json=managementAddresss" json:"management_addresss,omitempty"`
	ProtocolVlans                      *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans                      `protobuf:"bytes,26,opt,name=protocol_vlans,json=protocolVlans" json:"protocol_vlans,omitempty"`
	VlanNames                          *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames                          `protobuf:"bytes,27,opt,name=vlan_names,json=vlanNames" json:"vlan_names,omitempty"`
	UnknownTlvs                        *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs                        `protobuf:"bytes,28,opt,name=unknown_tlvs,json=unknownTlvs" json:"unknown_tlvs,omitempty"`
	UnknownOrganizationallyDefinedTlvs *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs `protobuf:"bytes,29,opt,name=unknown_organizationally_defined_tlvs,json=unknownOrganizationallyDefinedTlvs" json:"unknown_organizationally_defined_tlvs,omitempty"`
	DdpTlv                             *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv                             `protobuf:"bytes,30,opt,name=ddp_tlv,json=ddpTlv" json:"ddp_tlv,omitempty"`
	IdentityTlv                        *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_IdentityTlv                        `protobuf:"bytes,31,opt,name=identity_tlv,json=identityTlv" json:"identity_tlv,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetChassisIdSubType() Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType {
	if x != nil && x.ChassisIdSubType != nil {
		return *x.ChassisIdSubType
	}
	return Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType_OTHER
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetChassisId() string {
	if x != nil && x.ChassisId != nil {
		return *x.ChassisId
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetPortIdSubType() Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType {
	if x != nil && x.PortIdSubType != nil {
		return *x.PortIdSubType
	}
	return Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType_OTHER
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetPortId() string {
	if x != nil && x.PortId != nil {
		return *x.PortId
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetPortDescription() string {
	if x != nil && x.PortDescription != nil {
		return *x.PortDescription
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetSystemName() string {
	if x != nil && x.SystemName != nil {
		return *x.SystemName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetSystemDescription() string {
	if x != nil && x.SystemDescription != nil {
		return *x.SystemDescription
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetSystemCapabilitiesEnabled() string {
	if x != nil && x.SystemCapabilitiesEnabled != nil {
		return *x.SystemCapabilitiesEnabled
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetSystemCapabilitiesSupported() string {
	if x != nil && x.SystemCapabilitiesSupported != nil {
		return *x.SystemCapabilitiesSupported
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetExpiredTime() int32 {
	if x != nil && x.ExpiredTime != nil {
		return *x.ExpiredTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetPortVlanId() int32 {
	if x != nil && x.PortVlanId != nil {
		return *x.PortVlanId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetProtocolIdentity() string {
	if x != nil && x.ProtocolIdentity != nil {
		return *x.ProtocolIdentity
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetAutoNegotiationSupported() Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported {
	if x != nil && x.AutoNegotiationSupported != nil {
		return *x.AutoNegotiationSupported
	}
	return Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported_NO
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetAutoNegotiationEnabled() Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled {
	if x != nil && x.AutoNegotiationEnabled != nil {
		return *x.AutoNegotiationEnabled
	}
	return Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled_NO
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetAutoNegotiationCapability() string {
	if x != nil && x.AutoNegotiationCapability != nil {
		return *x.AutoNegotiationCapability
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetOperMauType() Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType {
	if x != nil && x.OperMauType != nil {
		return *x.OperMauType
	}
	return Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType_UNKNOWN
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetLinkAggregationSupported() Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported {
	if x != nil && x.LinkAggregationSupported != nil {
		return *x.LinkAggregationSupported
	}
	return Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported_NO
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetLinkAggregationEnabled() Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled {
	if x != nil && x.LinkAggregationEnabled != nil {
		return *x.LinkAggregationEnabled
	}
	return Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled_NO
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetAggregationPortId() int32 {
	if x != nil && x.AggregationPortId != nil {
		return *x.AggregationPortId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetMaximumFrameSize() int32 {
	if x != nil && x.MaximumFrameSize != nil {
		return *x.MaximumFrameSize
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetDiscoveredTime() string {
	if x != nil && x.DiscoveredTime != nil {
		return *x.DiscoveredTime
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetStatus() Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_Status_ONLINE
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetNetCardId() string {
	if x != nil && x.NetCardId != nil {
		return *x.NetCardId
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetManagementAddresss() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss {
	if x != nil {
		return x.ManagementAddresss
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetProtocolVlans() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans {
	if x != nil {
		return x.ProtocolVlans
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetVlanNames() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames {
	if x != nil {
		return x.VlanNames
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetUnknownTlvs() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs {
	if x != nil {
		return x.UnknownTlvs
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetUnknownOrganizationallyDefinedTlvs() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs {
	if x != nil {
		return x.UnknownOrganizationallyDefinedTlvs
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetDdpTlv() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv {
	if x != nil {
		return x.DdpTlv
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor) GetIdentityTlv() *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_IdentityTlv {
	if x != nil {
		return x.IdentityTlv
	}
	return nil
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagementAddress []*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress `protobuf:"bytes,1,rep,name=management_address,json=managementAddress" json:"management_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 1, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss) GetManagementAddress() []*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress {
	if x != nil {
		return x.ManagementAddress
	}
	return nil
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolVlan []*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan `protobuf:"bytes,1,rep,name=protocol_vlan,json=protocolVlan" json:"protocol_vlan,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 1, 0, 1}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans) GetProtocolVlan() []*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan {
	if x != nil {
		return x.ProtocolVlan
	}
	return nil
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanName []*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName `protobuf:"bytes,1,rep,name=vlan_name,json=vlanName" json:"vlan_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 1, 0, 2}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames) GetVlanName() []*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName {
	if x != nil {
		return x.VlanName
	}
	return nil
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownTlv []*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv `protobuf:"bytes,1,rep,name=unknown_tlv,json=unknownTlv" json:"unknown_tlv,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 1, 0, 3}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs) GetUnknownTlv() []*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv {
	if x != nil {
		return x.UnknownTlv
	}
	return nil
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownOrganizationallyDefinedTlv []*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv `protobuf:"bytes,1,rep,name=unknown_organizationally_defined_tlv,json=unknownOrganizationallyDefinedTlv" json:"unknown_organizationally_defined_tlv,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 1, 0, 4}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs) GetUnknownOrganizationallyDefinedTlv() []*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv {
	if x != nil {
		return x.UnknownOrganizationallyDefinedTlv
	}
	return nil
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber *string `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	IfIndex      *uint32 `protobuf:"varint,2,opt,name=if_index,json=ifIndex" json:"if_index,omitempty"`
	Ipv4Address  *string `protobuf:"bytes,3,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`
	MacAddress   *string `protobuf:"bytes,4,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 1, 0, 5}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv) GetIfIndex() uint32 {
	if x != nil && x.IfIndex != nil {
		return *x.IfIndex
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv) GetIpv4Address() string {
	if x != nil && x.Ipv4Address != nil {
		return *x.Ipv4Address
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv) GetMacAddress() string {
	if x != nil && x.MacAddress != nil {
		return *x.MacAddress
	}
	return ""
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_IdentityTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity *string `protobuf:"bytes,1,opt,name=identity" json:"identity,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_IdentityTlv) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_IdentityTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_IdentityTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_IdentityTlv) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_IdentityTlv) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_IdentityTlv.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_IdentityTlv) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 1, 0, 6}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_IdentityTlv) GetIdentity() string {
	if x != nil && x.Identity != nil {
		return *x.Identity
	}
	return ""
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type      `protobuf:"varint,1,opt,name=type,enum=huawei_ifm.Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type" json:"type,omitempty"`
	Value     *string                                                                                                  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Length    *int32                                                                                                   `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
	IfSubType *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType `protobuf:"varint,4,opt,name=if_sub_type,json=ifSubType,enum=huawei_ifm.Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType" json:"if_sub_type,omitempty"`
	IfId      *int32                                                                                                   `protobuf:"varint,5,opt,name=if_id,json=ifId" json:"if_id,omitempty"`
	Oid       *string                                                                                                  `protobuf:"bytes,6,opt,name=oid" json:"oid,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 1, 0, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress) GetType() Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type_OTHER
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress) GetLength() int32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress) GetIfSubType() Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType {
	if x != nil && x.IfSubType != nil {
		return *x.IfSubType
	}
	return Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType_OTHER
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress) GetIfId() int32 {
	if x != nil && x.IfId != nil {
		return *x.IfId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress) GetOid() string {
	if x != nil && x.Oid != nil {
		return *x.Oid
	}
	return ""
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *int32                                                                                         `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Supported *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported `protobuf:"varint,2,opt,name=supported,enum=huawei_ifm.Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported" json:"supported,omitempty"`
	Enabled   *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled   `protobuf:"varint,3,opt,name=enabled,enum=huawei_ifm.Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled" json:"enabled,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 1, 0, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan) GetSupported() Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported {
	if x != nil && x.Supported != nil {
		return *x.Supported
	}
	return Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported_NO
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan) GetEnabled() Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled_NO
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 1, 0, 2, 0}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *int32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Info *string `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 1, 0, 3, 0}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv) GetInfo() string {
	if x != nil && x.Info != nil {
		return *x.Info
	}
	return ""
}

type Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oui     *string `protobuf:"bytes,1,opt,name=oui" json:"oui,omitempty"`
	SubType *int32  `protobuf:"varint,2,opt,name=sub_type,json=subType" json:"sub_type,omitempty"`
	Index   *int32  `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	Info    *string `protobuf:"bytes,4,opt,name=info" json:"info,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv) Reset() {
	*x = Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 20, 0, 1, 0, 4, 0}
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv) GetOui() string {
	if x != nil && x.Oui != nil {
		return *x.Oui
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv) GetSubType() int32 {
	if x != nil && x.SubType != nil {
		return *x.SubType
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv) GetInfo() string {
	if x != nil && x.Info != nil {
		return *x.Info
	}
	return ""
}

type Ifm_Interfaces_Interface_Damping_IgnoreDamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Damping_IgnoreDamp) Reset() {
	*x = Ifm_Interfaces_Interface_Damping_IgnoreDamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Damping_IgnoreDamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Damping_IgnoreDamp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Damping_IgnoreDamp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Damping_IgnoreDamp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Damping_IgnoreDamp) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 23, 0}
}

type Ifm_Interfaces_Interface_Damping_Damp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Damping_Damp) Reset() {
	*x = Ifm_Interfaces_Interface_Damping_Damp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Damping_Damp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Damping_Damp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Damping_Damp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Damping_Damp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Damping_Damp) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 23, 1}
}

type Ifm_Interfaces_Interface_Ipv4_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonAddress     *Ifm_Interfaces_Interface_Ipv4_Address_CommonAddress     `protobuf:"bytes,1,opt,name=common_address,json=commonAddress" json:"common_address,omitempty"`
	UnnumberedAddress *Ifm_Interfaces_Interface_Ipv4_Address_UnnumberedAddress `protobuf:"bytes,2,opt,name=unnumbered_address,json=unnumberedAddress" json:"unnumbered_address,omitempty"`
	NegotiateAddress  *Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress  `protobuf:"bytes,3,opt,name=negotiate_address,json=negotiateAddress" json:"negotiate_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Address) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Address) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Address) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Address.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Address) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Address) GetCommonAddress() *Ifm_Interfaces_Interface_Ipv4_Address_CommonAddress {
	if x != nil {
		return x.CommonAddress
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv4_Address) GetUnnumberedAddress() *Ifm_Interfaces_Interface_Ipv4_Address_UnnumberedAddress {
	if x != nil {
		return x.UnnumberedAddress
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv4_Address) GetNegotiateAddress() *Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress {
	if x != nil {
		return x.NegotiateAddress
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses  *Ifm_Interfaces_Interface_Ipv4_State_Addresses  `protobuf:"bytes,1,opt,name=addresses" json:"addresses,omitempty"`
	Gateways   *Ifm_Interfaces_Interface_Ipv4_State_Gateways   `protobuf:"bytes,2,opt,name=gateways" json:"gateways,omitempty"`
	Statistics *Ifm_Interfaces_Interface_Ipv4_State_Statistics `protobuf:"bytes,3,opt,name=statistics" json:"statistics,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_State) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_State) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_State) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_State.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_State) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 1}
}

func (x *Ifm_Interfaces_Interface_Ipv4_State) GetAddresses() *Ifm_Interfaces_Interface_Ipv4_State_Addresses {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv4_State) GetGateways() *Ifm_Interfaces_Interface_Ipv4_State_Gateways {
	if x != nil {
		return x.Gateways
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv4_State) GetStatistics() *Ifm_Interfaces_Interface_Ipv4_State_Statistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4_StaticArps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StaticArp []*Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp `protobuf:"bytes,1,rep,name=static_arp,json=staticArp" json:"static_arp,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_StaticArps) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_StaticArps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_StaticArps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_StaticArps) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_StaticArps) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_StaticArps.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_StaticArps) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 2}
}

func (x *Ifm_Interfaces_Interface_Ipv4_StaticArps) GetStaticArp() []*Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp {
	if x != nil {
		return x.StaticArp
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups `protobuf:"bytes,1,opt,name=groups" json:"groups,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Vrrp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Vrrp) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 3}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp) GetGroups() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups {
	if x != nil {
		return x.Groups
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4_Rgm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Ipv4_Rgm) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Rgm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Rgm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Rgm) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Rgm) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Rgm.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Rgm) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 4}
}

type Ifm_Interfaces_Interface_Ipv4_Address_CommonAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses *Ifm_Interfaces_Interface_Ipv4_Address_CommonAddress_Addresses `protobuf:"bytes,1,opt,name=addresses" json:"addresses,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Address_CommonAddress) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Address_CommonAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Address_CommonAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Address_CommonAddress) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Address_CommonAddress) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Address_CommonAddress.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Address_CommonAddress) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Address_CommonAddress) GetAddresses() *Ifm_Interfaces_Interface_Ipv4_Address_CommonAddress_Addresses {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4_Address_UnnumberedAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Ipv4_Address_UnnumberedAddress) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Address_UnnumberedAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Address_UnnumberedAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Address_UnnumberedAddress) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Address_UnnumberedAddress) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Address_UnnumberedAddress.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Address_UnnumberedAddress) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 0, 1}
}

type Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NegotiationAddress *Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress `protobuf:"bytes,1,opt,name=negotiation_address,json=negotiationAddress" json:"negotiation_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 0, 2}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress) GetNegotiationAddress() *Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress {
	if x != nil {
		return x.NegotiationAddress
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4_Address_CommonAddress_Addresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Ipv4_Address_CommonAddress_Addresses) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Address_CommonAddress_Addresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Address_CommonAddress_Addresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Address_CommonAddress_Addresses) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Address_CommonAddress_Addresses) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Address_CommonAddress_Addresses.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Address_CommonAddress_Addresses) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NegotiationType *Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress_NegotiationType `protobuf:"varint,1,opt,name=negotiation_type,json=negotiationType,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress_NegotiationType" json:"negotiation_type,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 0, 2, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress) GetNegotiationType() Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress_NegotiationType {
	if x != nil && x.NegotiationType != nil {
		return *x.NegotiationType
	}
	return Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress_NegotiationType_PPPX_NEGOTIATE
}

type Ifm_Interfaces_Interface_Ipv4_State_Addresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []*Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address `protobuf:"bytes,1,rep,name=address" json:"address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Addresses) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_State_Addresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Addresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_State_Addresses) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Addresses) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_State_Addresses.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_State_Addresses) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Addresses) GetAddress() []*Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4_State_Gateways struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gateway []*Ifm_Interfaces_Interface_Ipv4_State_Gateways_Gateway `protobuf:"bytes,1,rep,name=gateway" json:"gateway,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Gateways) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_State_Gateways{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Gateways) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_State_Gateways) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Gateways) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_State_Gateways.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_State_Gateways) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 1, 1}
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Gateways) GetGateway() []*Ifm_Interfaces_Interface_Ipv4_State_Gateways_Gateway {
	if x != nil {
		return x.Gateway
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4_State_Statistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InReceives                *uint64 `protobuf:"varint,1,opt,name=in_receives,json=inReceives" json:"in_receives,omitempty"`
	InOctets                  *uint64 `protobuf:"varint,2,opt,name=in_octets,json=inOctets" json:"in_octets,omitempty"`
	InRatePkts                *uint64 `protobuf:"varint,3,opt,name=in_rate_pkts,json=inRatePkts" json:"in_rate_pkts,omitempty"`
	InRateBits                *uint64 `protobuf:"varint,4,opt,name=in_rate_bits,json=inRateBits" json:"in_rate_bits,omitempty"`
	InRateByteBandwidthUsage  *string `protobuf:"bytes,5,opt,name=in_rate_byte_bandwidth_usage,json=inRateByteBandwidthUsage" json:"in_rate_byte_bandwidth_usage,omitempty"`
	InUcastPkts               *uint64 `protobuf:"varint,6,opt,name=in_ucast_pkts,json=inUcastPkts" json:"in_ucast_pkts,omitempty"`
	InUcastOctets             *uint64 `protobuf:"varint,7,opt,name=in_ucast_octets,json=inUcastOctets" json:"in_ucast_octets,omitempty"`
	InMcastPkts               *uint64 `protobuf:"varint,8,opt,name=in_mcast_pkts,json=inMcastPkts" json:"in_mcast_pkts,omitempty"`
	InMcastOctets             *uint64 `protobuf:"varint,9,opt,name=in_mcast_octets,json=inMcastOctets" json:"in_mcast_octets,omitempty"`
	InBcastPkts               *uint64 `protobuf:"varint,10,opt,name=in_bcast_pkts,json=inBcastPkts" json:"in_bcast_pkts,omitempty"`
	InBcastOctets             *uint64 `protobuf:"varint,11,opt,name=in_bcast_octets,json=inBcastOctets" json:"in_bcast_octets,omitempty"`
	OutUcastPkts              *uint64 `protobuf:"varint,12,opt,name=out_ucast_pkts,json=outUcastPkts" json:"out_ucast_pkts,omitempty"`
	OutUcastOctets            *uint64 `protobuf:"varint,13,opt,name=out_ucast_octets,json=outUcastOctets" json:"out_ucast_octets,omitempty"`
	OutMcastPkts              *uint64 `protobuf:"varint,14,opt,name=out_mcast_pkts,json=outMcastPkts" json:"out_mcast_pkts,omitempty"`
	OutMcastOctets            *uint64 `protobuf:"varint,15,opt,name=out_mcast_octets,json=outMcastOctets" json:"out_mcast_octets,omitempty"`
	OutBcastPkts              *uint64 `protobuf:"varint,16,opt,name=out_bcast_pkts,json=outBcastPkts" json:"out_bcast_pkts,omitempty"`
	OutBcastOctets            *uint64 `protobuf:"varint,17,opt,name=out_bcast_octets,json=outBcastOctets" json:"out_bcast_octets,omitempty"`
	OutRatePkts               *uint64 `protobuf:"varint,18,opt,name=out_rate_pkts,json=outRatePkts" json:"out_rate_pkts,omitempty"`
	OutRateBits               *uint64 `protobuf:"varint,19,opt,name=out_rate_bits,json=outRateBits" json:"out_rate_bits,omitempty"`
	OutRateByteBandwidthUsage *string `protobuf:"bytes,20,opt,name=out_rate_byte_bandwidth_usage,json=outRateByteBandwidthUsage" json:"out_rate_byte_bandwidth_usage,omitempty"`
	OutTransmits              *uint64 `protobuf:"varint,21,opt,name=out_transmits,json=outTransmits" json:"out_transmits,omitempty"`
	OutOctets                 *uint64 `protobuf:"varint,22,opt,name=out_octets,json=outOctets" json:"out_octets,omitempty"`
	OutFragRequires           *uint64 `protobuf:"varint,23,opt,name=out_frag_requires,json=outFragRequires" json:"out_frag_requires,omitempty"`
	OutFragFails              *uint32 `protobuf:"varint,24,opt,name=out_frag_fails,json=outFragFails" json:"out_frag_fails,omitempty"`
	OutFragOks                *uint64 `protobuf:"varint,25,opt,name=out_frag_oks,json=outFragOks" json:"out_frag_oks,omitempty"`
	OutFragCreates            *uint64 `protobuf:"varint,26,opt,name=out_frag_creates,json=outFragCreates" json:"out_frag_creates,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_State_Statistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_State_Statistics) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_State_Statistics.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_State_Statistics) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 1, 2}
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetInReceives() uint64 {
	if x != nil && x.InReceives != nil {
		return *x.InReceives
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetInOctets() uint64 {
	if x != nil && x.InOctets != nil {
		return *x.InOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetInRatePkts() uint64 {
	if x != nil && x.InRatePkts != nil {
		return *x.InRatePkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetInRateBits() uint64 {
	if x != nil && x.InRateBits != nil {
		return *x.InRateBits
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetInRateByteBandwidthUsage() string {
	if x != nil && x.InRateByteBandwidthUsage != nil {
		return *x.InRateByteBandwidthUsage
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetInUcastPkts() uint64 {
	if x != nil && x.InUcastPkts != nil {
		return *x.InUcastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetInUcastOctets() uint64 {
	if x != nil && x.InUcastOctets != nil {
		return *x.InUcastOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetInMcastPkts() uint64 {
	if x != nil && x.InMcastPkts != nil {
		return *x.InMcastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetInMcastOctets() uint64 {
	if x != nil && x.InMcastOctets != nil {
		return *x.InMcastOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetInBcastPkts() uint64 {
	if x != nil && x.InBcastPkts != nil {
		return *x.InBcastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetInBcastOctets() uint64 {
	if x != nil && x.InBcastOctets != nil {
		return *x.InBcastOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutUcastPkts() uint64 {
	if x != nil && x.OutUcastPkts != nil {
		return *x.OutUcastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutUcastOctets() uint64 {
	if x != nil && x.OutUcastOctets != nil {
		return *x.OutUcastOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutMcastPkts() uint64 {
	if x != nil && x.OutMcastPkts != nil {
		return *x.OutMcastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutMcastOctets() uint64 {
	if x != nil && x.OutMcastOctets != nil {
		return *x.OutMcastOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutBcastPkts() uint64 {
	if x != nil && x.OutBcastPkts != nil {
		return *x.OutBcastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutBcastOctets() uint64 {
	if x != nil && x.OutBcastOctets != nil {
		return *x.OutBcastOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutRatePkts() uint64 {
	if x != nil && x.OutRatePkts != nil {
		return *x.OutRatePkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutRateBits() uint64 {
	if x != nil && x.OutRateBits != nil {
		return *x.OutRateBits
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutRateByteBandwidthUsage() string {
	if x != nil && x.OutRateByteBandwidthUsage != nil {
		return *x.OutRateByteBandwidthUsage
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutTransmits() uint64 {
	if x != nil && x.OutTransmits != nil {
		return *x.OutTransmits
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutOctets() uint64 {
	if x != nil && x.OutOctets != nil {
		return *x.OutOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutFragRequires() uint64 {
	if x != nil && x.OutFragRequires != nil {
		return *x.OutFragRequires
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutFragFails() uint32 {
	if x != nil && x.OutFragFails != nil {
		return *x.OutFragFails
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutFragOks() uint64 {
	if x != nil && x.OutFragOks != nil {
		return *x.OutFragOks
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Statistics) GetOutFragCreates() uint64 {
	if x != nil && x.OutFragCreates != nil {
		return *x.OutFragCreates
	}
	return 0
}

type Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip      *string                                                     `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Mask    *string                                                     `protobuf:"bytes,2,opt,name=mask" json:"mask,omitempty"`
	Type    *Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type `protobuf:"varint,3,opt,name=type,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type" json:"type,omitempty"`
	IsBlock *bool                                                       `protobuf:"varint,4,opt,name=is_block,json=isBlock" json:"is_block,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 1, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address) GetMask() string {
	if x != nil && x.Mask != nil {
		return *x.Mask
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address) GetType() Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_INVALID_ENUM_VALUE_Type
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address) GetIsBlock() bool {
	if x != nil && x.IsBlock != nil {
		return *x.IsBlock
	}
	return false
}

type Ifm_Interfaces_Interface_Ipv4_State_Gateways_Gateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gateway *string `protobuf:"bytes,1,opt,name=gateway" json:"gateway,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Gateways_Gateway) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_State_Gateways_Gateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Gateways_Gateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_State_Gateways_Gateway) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Gateways_Gateway) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_State_Gateways_Gateway.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_State_Gateways_Gateway) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 1, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4_State_Gateways_Gateway) GetGateway() string {
	if x != nil && x.Gateway != nil {
		return *x.Gateway
	}
	return ""
}

type Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddr  *string `protobuf:"bytes,1,opt,name=ip_addr,json=ipAddr" json:"ip_addr,omitempty"`
	MacAddr *string `protobuf:"bytes,2,opt,name=mac_addr,json=macAddr" json:"mac_addr,omitempty"`
	Pevid   *uint32 `protobuf:"varint,3,opt,name=pevid" json:"pevid,omitempty"`
	Cevid   *uint32 `protobuf:"varint,4,opt,name=cevid" json:"cevid,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 2, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp) GetIpAddr() string {
	if x != nil && x.IpAddr != nil {
		return *x.IpAddr
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp) GetMacAddr() string {
	if x != nil && x.MacAddr != nil {
		return *x.MacAddr
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp) GetPevid() uint32 {
	if x != nil && x.Pevid != nil {
		return *x.Pevid
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp) GetCevid() uint32 {
	if x != nil && x.Cevid != nil {
		return *x.Cevid
	}
	return 0
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group []*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group `protobuf:"bytes,1,rep,name=group" json:"group,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 3, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups) GetGroup() []*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group {
	if x != nil {
		return x.Group
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 *uint32                                                             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Priority           *uint32                                                             `protobuf:"varint,2,opt,name=priority" json:"priority,omitempty"`
	Preempt            *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt            `protobuf:"bytes,3,opt,name=preempt" json:"preempt,omitempty"`
	AdverInterval      *uint32                                                             `protobuf:"varint,4,opt,name=adver_interval,json=adverInterval" json:"adver_interval,omitempty"`
	AuthenticationMode *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode `protobuf:"varint,5,opt,name=authentication_mode,json=authenticationMode,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode" json:"authentication_mode,omitempty"`
	Isplain            *bool                                                               `protobuf:"varint,6,opt,name=isplain" json:"isplain,omitempty"`
	AuthenticationKey  *string                                                             `protobuf:"bytes,7,opt,name=authentication_key,json=authenticationKey" json:"authentication_key,omitempty"`
	LinkBfddownNum     *uint32                                                             `protobuf:"varint,8,opt,name=link_bfddown_num,json=linkBfddownNum" json:"link_bfddown_num,omitempty"`
	HoldMultiper       *uint32                                                             `protobuf:"varint,9,opt,name=hold_multiper,json=holdMultiper" json:"hold_multiper,omitempty"`
	BackupForward      *bool                                                               `protobuf:"varint,10,opt,name=backup_forward,json=backupForward" json:"backup_forward,omitempty"`
	FastResume         *bool                                                               `protobuf:"varint,11,opt,name=fast_resume,json=fastResume" json:"fast_resume,omitempty"`
	V3Sendmode         *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode         `protobuf:"varint,12,opt,name=v3_sendmode,json=v3Sendmode,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode" json:"v3_sendmode,omitempty"`
	Type               *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type               `protobuf:"varint,13,opt,name=type,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type" json:"type,omitempty"`
	State              *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State              `protobuf:"varint,14,opt,name=state,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State" json:"state,omitempty"`
	CreateTime         *string                                                             `protobuf:"bytes,15,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	LastChangeTime     *string                                                             `protobuf:"bytes,16,opt,name=last_change_time,json=lastChangeTime" json:"last_change_time,omitempty"`
	VirtualIps         *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps         `protobuf:"bytes,17,opt,name=virtual_ips,json=virtualIps" json:"virtual_ips,omitempty"`
	TrackInterfaces    *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces    `protobuf:"bytes,18,opt,name=track_interfaces,json=trackInterfaces" json:"track_interfaces,omitempty"`
	TrackBfds          *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds          `protobuf:"bytes,19,opt,name=track_bfds,json=trackBfds" json:"track_bfds,omitempty"`
	TrackMtgrps        *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps        `protobuf:"bytes,20,opt,name=track_mtgrps,json=trackMtgrps" json:"track_mtgrps,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 3, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetPreempt() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt {
	if x != nil {
		return x.Preempt
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetAdverInterval() uint32 {
	if x != nil && x.AdverInterval != nil {
		return *x.AdverInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetAuthenticationMode() Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode {
	if x != nil && x.AuthenticationMode != nil {
		return *x.AuthenticationMode
	}
	return Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode_NONE
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetIsplain() bool {
	if x != nil && x.Isplain != nil {
		return *x.Isplain
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetAuthenticationKey() string {
	if x != nil && x.AuthenticationKey != nil {
		return *x.AuthenticationKey
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetLinkBfddownNum() uint32 {
	if x != nil && x.LinkBfddownNum != nil {
		return *x.LinkBfddownNum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetHoldMultiper() uint32 {
	if x != nil && x.HoldMultiper != nil {
		return *x.HoldMultiper
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetBackupForward() bool {
	if x != nil && x.BackupForward != nil {
		return *x.BackupForward
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetFastResume() bool {
	if x != nil && x.FastResume != nil {
		return *x.FastResume
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetV3Sendmode() Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode {
	if x != nil && x.V3Sendmode != nil {
		return *x.V3Sendmode
	}
	return Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode_V3X_ONLY
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetType() Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type_NORMAL
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetState() Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State_INITIALIZE
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetLastChangeTime() string {
	if x != nil && x.LastChangeTime != nil {
		return *x.LastChangeTime
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetVirtualIps() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps {
	if x != nil {
		return x.VirtualIps
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetTrackInterfaces() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces {
	if x != nil {
		return x.TrackInterfaces
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetTrackBfds() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds {
	if x != nil {
		return x.TrackBfds
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group) GetTrackMtgrps() *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps {
	if x != nil {
		return x.TrackMtgrps
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreemptEnable *bool   `protobuf:"varint,1,opt,name=preempt_enable,json=preemptEnable" json:"preempt_enable,omitempty"`
	DelayTime     *uint32 `protobuf:"varint,2,opt,name=delay_time,json=delayTime" json:"delay_time,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 3, 0, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt) GetPreemptEnable() bool {
	if x != nil && x.PreemptEnable != nil {
		return *x.PreemptEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt) GetDelayTime() uint32 {
	if x != nil && x.DelayTime != nil {
		return *x.DelayTime
	}
	return 0
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualIp []*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps_VirtualIp `protobuf:"bytes,1,rep,name=virtual_ip,json=virtualIp" json:"virtual_ip,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 3, 0, 0, 1}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps) GetVirtualIp() []*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps_VirtualIp {
	if x != nil {
		return x.VirtualIp
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackInterface []*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface `protobuf:"bytes,1,rep,name=track_interface,json=trackInterface" json:"track_interface,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 3, 0, 0, 2}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces) GetTrackInterface() []*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface {
	if x != nil {
		return x.TrackInterface
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackBfd []*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd `protobuf:"bytes,1,rep,name=track_bfd,json=trackBfd" json:"track_bfd,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 3, 0, 0, 3}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds) GetTrackBfd() []*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd {
	if x != nil {
		return x.TrackBfd
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackMtgrp []*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp `protobuf:"bytes,1,rep,name=track_mtgrp,json=trackMtgrp" json:"track_mtgrp,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 3, 0, 0, 4}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps) GetTrackMtgrp() []*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp {
	if x != nil {
		return x.TrackMtgrp
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps_VirtualIp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps_VirtualIp) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps_VirtualIp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps_VirtualIp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps_VirtualIp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps_VirtualIp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps_VirtualIp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps_VirtualIp) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 3, 0, 0, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps_VirtualIp) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IfName         *string                                                                                   `protobuf:"bytes,1,opt,name=if_name,json=ifName" json:"if_name,omitempty"`
	PriorityChange *uint32                                                                                   `protobuf:"varint,2,opt,name=priority_change,json=priorityChange" json:"priority_change,omitempty"`
	TrackMode      *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode `protobuf:"varint,3,opt,name=track_mode,json=trackMode,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode" json:"track_mode,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 3, 0, 0, 2, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface) GetIfName() string {
	if x != nil && x.IfName != nil {
		return *x.IfName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface) GetPriorityChange() uint32 {
	if x != nil && x.PriorityChange != nil {
		return *x.PriorityChange
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface) GetTrackMode() Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode {
	if x != nil && x.TrackMode != nil {
		return *x.TrackMode
	}
	return Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode_INCREASE
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionName    *string                                                                          `protobuf:"bytes,1,opt,name=session_name,json=sessionName" json:"session_name,omitempty"`
	SessionType    *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType  `protobuf:"varint,2,opt,name=session_type,json=sessionType,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType" json:"session_type,omitempty"`
	PriorityChange *uint32                                                                          `protobuf:"varint,3,opt,name=priority_change,json=priorityChange" json:"priority_change,omitempty"`
	TrackMode      *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode    `protobuf:"varint,4,opt,name=track_mode,json=trackMode,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode" json:"track_mode,omitempty"`
	SessionId      *uint32                                                                          `protobuf:"varint,5,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	SessionState   *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState `protobuf:"varint,6,opt,name=session_state,json=sessionState,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState" json:"session_state,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 3, 0, 0, 3, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd) GetSessionName() string {
	if x != nil && x.SessionName != nil {
		return *x.SessionName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd) GetSessionType() Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType {
	if x != nil && x.SessionType != nil {
		return *x.SessionType
	}
	return Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType_NORMAL
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd) GetPriorityChange() uint32 {
	if x != nil && x.PriorityChange != nil {
		return *x.PriorityChange
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd) GetTrackMode() Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode {
	if x != nil && x.TrackMode != nil {
		return *x.TrackMode
	}
	return Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode_INCREASE
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd) GetSessionId() uint32 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd) GetSessionState() Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState {
	if x != nil && x.SessionState != nil {
		return *x.SessionState
	}
	return Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState_DOWN
}

type Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorGroupName *string                                                                           `protobuf:"bytes,1,opt,name=monitor_group_name,json=monitorGroupName" json:"monitor_group_name,omitempty"`
	FailureRatio     *uint32                                                                           `protobuf:"varint,2,opt,name=failure_ratio,json=failureRatio" json:"failure_ratio,omitempty"`
	PriorityChange   *uint32                                                                           `protobuf:"varint,3,opt,name=priority_change,json=priorityChange" json:"priority_change,omitempty"`
	TrackMode        *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode `protobuf:"varint,4,opt,name=track_mode,json=trackMode,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode" json:"track_mode,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 24, 3, 0, 0, 4, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp) GetMonitorGroupName() string {
	if x != nil && x.MonitorGroupName != nil {
		return *x.MonitorGroupName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp) GetFailureRatio() uint32 {
	if x != nil && x.FailureRatio != nil {
		return *x.FailureRatio
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp) GetPriorityChange() uint32 {
	if x != nil && x.PriorityChange != nil {
		return *x.PriorityChange
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp) GetTrackMode() Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode {
	if x != nil && x.TrackMode != nil {
		return *x.TrackMode
	}
	return Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode_LINK
}

type Ifm_Interfaces_Interface_Ipv6_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonAddress *Ifm_Interfaces_Interface_Ipv6_Address_CommonAddress `protobuf:"bytes,1,opt,name=common_address,json=commonAddress" json:"common_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_Address) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_Address) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_Address) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_Address.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_Address) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_Address) GetCommonAddress() *Ifm_Interfaces_Interface_Ipv6_Address_CommonAddress {
	if x != nil {
		return x.CommonAddress
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_NdPrefixs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NdPrefix []*Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix `protobuf:"bytes,1,rep,name=nd_prefix,json=ndPrefix" json:"nd_prefix,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdPrefixs) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_NdPrefixs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdPrefixs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_NdPrefixs) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_NdPrefixs) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdPrefixs.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_NdPrefixs) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 1}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdPrefixs) GetNdPrefix() []*Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix {
	if x != nil {
		return x.NdPrefix
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mtu6       *uint32                                         `protobuf:"varint,1,opt,name=mtu6" json:"mtu6,omitempty"`
	Addresses  *Ifm_Interfaces_Interface_Ipv6_State_Addresses  `protobuf:"bytes,2,opt,name=addresses" json:"addresses,omitempty"`
	Statistics *Ifm_Interfaces_Interface_Ipv6_State_Statistics `protobuf:"bytes,3,opt,name=statistics" json:"statistics,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_State) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_State) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_State) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_State.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_State) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 2}
}

func (x *Ifm_Interfaces_Interface_Ipv6_State) GetMtu6() uint32 {
	if x != nil && x.Mtu6 != nil {
		return *x.Mtu6
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State) GetAddresses() *Ifm_Interfaces_Interface_Ipv6_State_Addresses {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6_State) GetStatistics() *Ifm_Interfaces_Interface_Ipv6_State_Statistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IfProperty *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty `protobuf:"bytes,1,opt,name=if_property,json=ifProperty" json:"if_property,omitempty"`
	Proxys     *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys     `protobuf:"bytes,2,opt,name=proxys" json:"proxys,omitempty"`
	AntiAttack *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack `protobuf:"bytes,3,opt,name=anti_attack,json=antiAttack" json:"anti_attack,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_NdCollection) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_NdCollection) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 3}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection) GetIfProperty() *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty {
	if x != nil {
		return x.IfProperty
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection) GetProxys() *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys {
	if x != nil {
		return x.Proxys
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection) GetAntiAttack() *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack {
	if x != nil {
		return x.AntiAttack
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_Cgas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cga []*Ifm_Interfaces_Interface_Ipv6_Cgas_Cga `protobuf:"bytes,1,rep,name=cga" json:"cga,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_Cgas) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_Cgas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_Cgas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_Cgas) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_Cgas) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_Cgas.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_Cgas) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 4}
}

func (x *Ifm_Interfaces_Interface_Ipv6_Cgas) GetCga() []*Ifm_Interfaces_Interface_Ipv6_Cgas_Cga {
	if x != nil {
		return x.Cga
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HopByHopSwitch     *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch     `protobuf:"bytes,1,opt,name=hop_by_hop_switch,json=hopByHopSwitch" json:"hop_by_hop_switch,omitempty"`
	RoutingSwitch      *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch      `protobuf:"bytes,2,opt,name=routing_switch,json=routingSwitch" json:"routing_switch,omitempty"`
	DestinationSwitch  *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch  `protobuf:"bytes,3,opt,name=destination_switch,json=destinationSwitch" json:"destination_switch,omitempty"`
	NoOptionExhSwitchs *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs `protobuf:"bytes,4,opt,name=no_option_exh_switchs,json=noOptionExhSwitchs" json:"no_option_exh_switchs,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 5}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter) GetHopByHopSwitch() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch {
	if x != nil {
		return x.HopByHopSwitch
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter) GetRoutingSwitch() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch {
	if x != nil {
		return x.RoutingSwitch
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter) GetDestinationSwitch() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch {
	if x != nil {
		return x.DestinationSwitch
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter) GetNoOptionExhSwitchs() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs {
	if x != nil {
		return x.NoOptionExhSwitchs
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_Pp6Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PermitIncompleteFragment *bool `protobuf:"varint,1,opt,name=permit_incomplete_fragment,json=permitIncompleteFragment" json:"permit_incomplete_fragment,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_Pp6Collection) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_Pp6Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_Pp6Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_Pp6Collection) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_Pp6Collection) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_Pp6Collection.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_Pp6Collection) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 6}
}

func (x *Ifm_Interfaces_Interface_Ipv6_Pp6Collection) GetPermitIncompleteFragment() bool {
	if x != nil && x.PermitIncompleteFragment != nil {
		return *x.PermitIncompleteFragment
	}
	return false
}

type Ifm_Interfaces_Interface_Ipv6_Address_CommonAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses *Ifm_Interfaces_Interface_Ipv6_Address_CommonAddress_Addresses `protobuf:"bytes,1,opt,name=addresses" json:"addresses,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_Address_CommonAddress) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_Address_CommonAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_Address_CommonAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_Address_CommonAddress) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_Address_CommonAddress) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_Address_CommonAddress.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_Address_CommonAddress) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_Address_CommonAddress) GetAddresses() *Ifm_Interfaces_Interface_Ipv6_Address_CommonAddress_Addresses {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_Address_CommonAddress_Addresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_Ipv6_Address_CommonAddress_Addresses) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_Address_CommonAddress_Addresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_Address_CommonAddress_Addresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_Address_CommonAddress_Addresses) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_Address_CommonAddress_Addresses) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_Address_CommonAddress_Addresses.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_Address_CommonAddress_Addresses) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 0, 0, 0}
}

type Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix            *string `protobuf:"bytes,1,opt,name=prefix" json:"prefix,omitempty"`
	PrefixLen         *int32  `protobuf:"varint,2,opt,name=prefix_len,json=prefixLen" json:"prefix_len,omitempty"`
	ValidLifetime     *uint32 `protobuf:"varint,3,opt,name=valid_lifetime,json=validLifetime" json:"valid_lifetime,omitempty"`
	PreferredLifetime *uint32 `protobuf:"varint,4,opt,name=preferred_lifetime,json=preferredLifetime" json:"preferred_lifetime,omitempty"`
	AutoFlag          *bool   `protobuf:"varint,5,opt,name=auto_flag,json=autoFlag" json:"auto_flag,omitempty"`
	OnLinkFlag        *bool   `protobuf:"varint,6,opt,name=on_link_flag,json=onLinkFlag" json:"on_link_flag,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix) GetPrefixLen() int32 {
	if x != nil && x.PrefixLen != nil {
		return *x.PrefixLen
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix) GetValidLifetime() uint32 {
	if x != nil && x.ValidLifetime != nil {
		return *x.ValidLifetime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix) GetPreferredLifetime() uint32 {
	if x != nil && x.PreferredLifetime != nil {
		return *x.PreferredLifetime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix) GetAutoFlag() bool {
	if x != nil && x.AutoFlag != nil {
		return *x.AutoFlag
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix) GetOnLinkFlag() bool {
	if x != nil && x.OnLinkFlag != nil {
		return *x.OnLinkFlag
	}
	return false
}

type Ifm_Interfaces_Interface_Ipv6_State_Addresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []*Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address `protobuf:"bytes,1,rep,name=address" json:"address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_State_Addresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_State_Addresses) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_State_Addresses.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_State_Addresses) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 2, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses) GetAddress() []*Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_State_Statistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InReceives                *uint64 `protobuf:"varint,1,opt,name=in_receives,json=inReceives" json:"in_receives,omitempty"`
	InOctets                  *uint64 `protobuf:"varint,2,opt,name=in_octets,json=inOctets" json:"in_octets,omitempty"`
	InRatePkts                *uint64 `protobuf:"varint,3,opt,name=in_rate_pkts,json=inRatePkts" json:"in_rate_pkts,omitempty"`
	InRateBits                *uint64 `protobuf:"varint,4,opt,name=in_rate_bits,json=inRateBits" json:"in_rate_bits,omitempty"`
	InRateByteBandwidthUsage  *string `protobuf:"bytes,5,opt,name=in_rate_byte_bandwidth_usage,json=inRateByteBandwidthUsage" json:"in_rate_byte_bandwidth_usage,omitempty"`
	InUcastPkts               *uint64 `protobuf:"varint,6,opt,name=in_ucast_pkts,json=inUcastPkts" json:"in_ucast_pkts,omitempty"`
	InUcastOctets             *uint64 `protobuf:"varint,7,opt,name=in_ucast_octets,json=inUcastOctets" json:"in_ucast_octets,omitempty"`
	InMcastPkts               *uint64 `protobuf:"varint,8,opt,name=in_mcast_pkts,json=inMcastPkts" json:"in_mcast_pkts,omitempty"`
	InMcastOctets             *uint64 `protobuf:"varint,9,opt,name=in_mcast_octets,json=inMcastOctets" json:"in_mcast_octets,omitempty"`
	OutUcastPkts              *uint64 `protobuf:"varint,10,opt,name=out_ucast_pkts,json=outUcastPkts" json:"out_ucast_pkts,omitempty"`
	OutUcastOctets            *uint64 `protobuf:"varint,11,opt,name=out_ucast_octets,json=outUcastOctets" json:"out_ucast_octets,omitempty"`
	OutMcastPkts              *uint64 `protobuf:"varint,12,opt,name=out_mcast_pkts,json=outMcastPkts" json:"out_mcast_pkts,omitempty"`
	OutMcastOctets            *uint64 `protobuf:"varint,13,opt,name=out_mcast_octets,json=outMcastOctets" json:"out_mcast_octets,omitempty"`
	OutRatePkts               *uint64 `protobuf:"varint,14,opt,name=out_rate_pkts,json=outRatePkts" json:"out_rate_pkts,omitempty"`
	OutRateBits               *uint64 `protobuf:"varint,15,opt,name=out_rate_bits,json=outRateBits" json:"out_rate_bits,omitempty"`
	OutRateByteBandwidthUsage *string `protobuf:"bytes,16,opt,name=out_rate_byte_bandwidth_usage,json=outRateByteBandwidthUsage" json:"out_rate_byte_bandwidth_usage,omitempty"`
	OutTransmits              *uint64 `protobuf:"varint,17,opt,name=out_transmits,json=outTransmits" json:"out_transmits,omitempty"`
	OutOctets                 *uint64 `protobuf:"varint,18,opt,name=out_octets,json=outOctets" json:"out_octets,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_State_Statistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_State_Statistics) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_State_Statistics.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_State_Statistics) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 2, 1}
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetInReceives() uint64 {
	if x != nil && x.InReceives != nil {
		return *x.InReceives
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetInOctets() uint64 {
	if x != nil && x.InOctets != nil {
		return *x.InOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetInRatePkts() uint64 {
	if x != nil && x.InRatePkts != nil {
		return *x.InRatePkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetInRateBits() uint64 {
	if x != nil && x.InRateBits != nil {
		return *x.InRateBits
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetInRateByteBandwidthUsage() string {
	if x != nil && x.InRateByteBandwidthUsage != nil {
		return *x.InRateByteBandwidthUsage
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetInUcastPkts() uint64 {
	if x != nil && x.InUcastPkts != nil {
		return *x.InUcastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetInUcastOctets() uint64 {
	if x != nil && x.InUcastOctets != nil {
		return *x.InUcastOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetInMcastPkts() uint64 {
	if x != nil && x.InMcastPkts != nil {
		return *x.InMcastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetInMcastOctets() uint64 {
	if x != nil && x.InMcastOctets != nil {
		return *x.InMcastOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetOutUcastPkts() uint64 {
	if x != nil && x.OutUcastPkts != nil {
		return *x.OutUcastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetOutUcastOctets() uint64 {
	if x != nil && x.OutUcastOctets != nil {
		return *x.OutUcastOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetOutMcastPkts() uint64 {
	if x != nil && x.OutMcastPkts != nil {
		return *x.OutMcastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetOutMcastOctets() uint64 {
	if x != nil && x.OutMcastOctets != nil {
		return *x.OutMcastOctets
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetOutRatePkts() uint64 {
	if x != nil && x.OutRatePkts != nil {
		return *x.OutRatePkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetOutRateBits() uint64 {
	if x != nil && x.OutRateBits != nil {
		return *x.OutRateBits
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetOutRateByteBandwidthUsage() string {
	if x != nil && x.OutRateByteBandwidthUsage != nil {
		return *x.OutRateByteBandwidthUsage
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetOutTransmits() uint64 {
	if x != nil && x.OutTransmits != nil {
		return *x.OutTransmits
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Statistics) GetOutOctets() uint64 {
	if x != nil && x.OutOctets != nil {
		return *x.OutOctets
	}
	return 0
}

type Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip             *string                                                              `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	PrefixLength   *uint32                                                              `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength" json:"prefix_length,omitempty"`
	Type           *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type          `protobuf:"varint,3,opt,name=type,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type" json:"type,omitempty"`
	AlgorithmType  *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType `protobuf:"varint,4,opt,name=algorithm_type,json=algorithmType,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType" json:"algorithm_type,omitempty"`
	CollisionCount *uint32                                                              `protobuf:"varint,5,opt,name=collision_count,json=collisionCount" json:"collision_count,omitempty"`
	IsBlock        *bool                                                                `protobuf:"varint,6,opt,name=is_block,json=isBlock" json:"is_block,omitempty"`
	Status         *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status        `protobuf:"varint,7,opt,name=status,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status" json:"status,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 2, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address) GetPrefixLength() uint32 {
	if x != nil && x.PrefixLength != nil {
		return *x.PrefixLength
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address) GetType() Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_INVALID_ENUM_VALUE_Type
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address) GetAlgorithmType() Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType {
	if x != nil && x.AlgorithmType != nil {
		return *x.AlgorithmType
	}
	return Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType_NONE
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address) GetCollisionCount() uint32 {
	if x != nil && x.CollisionCount != nil {
		return *x.CollisionCount
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address) GetIsBlock() bool {
	if x != nil && x.IsBlock != nil {
		return *x.IsBlock
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address) GetStatus() Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_INVALID_ENUM_VALUE_Status
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetransTimer     *uint32                                                                 `protobuf:"varint,1,opt,name=retrans_timer,json=retransTimer" json:"retrans_timer,omitempty"`
	NudReachTime     *uint32                                                                 `protobuf:"varint,2,opt,name=nud_reach_time,json=nudReachTime" json:"nud_reach_time,omitempty"`
	AttemptsValue    *uint32                                                                 `protobuf:"varint,3,opt,name=attempts_value,json=attemptsValue" json:"attempts_value,omitempty"`
	NsMcastFlag      *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag      `protobuf:"varint,4,opt,name=ns_mcast_flag,json=nsMcastFlag,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag" json:"ns_mcast_flag,omitempty"`
	MaxDynNbNum      *uint64                                                                 `protobuf:"varint,5,opt,name=max_dyn_nb_num,json=maxDynNbNum" json:"max_dyn_nb_num,omitempty"`
	DadTimeout       *uint32                                                                 `protobuf:"varint,6,opt,name=dad_timeout,json=dadTimeout" json:"dad_timeout,omitempty"`
	NudAttempts      *uint32                                                                 `protobuf:"varint,7,opt,name=nud_attempts,json=nudAttempts" json:"nud_attempts,omitempty"`
	NaGlean          *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean          `protobuf:"varint,8,opt,name=na_glean,json=naGlean,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean" json:"na_glean,omitempty"`
	MaFlag           *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag           `protobuf:"varint,9,opt,name=ma_flag,json=maFlag,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag" json:"ma_flag,omitempty"`
	OFlag            *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag            `protobuf:"varint,10,opt,name=o_flag,json=oFlag,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag" json:"o_flag,omitempty"`
	RaHaltFlag       *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag       `protobuf:"varint,11,opt,name=ra_halt_flag,json=raHaltFlag,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag" json:"ra_halt_flag,omitempty"`
	MaxInterval      *uint32                                                                 `protobuf:"varint,12,opt,name=max_interval,json=maxInterval" json:"max_interval,omitempty"`
	RaLifetime       *uint32                                                                 `protobuf:"varint,13,opt,name=ra_lifetime,json=raLifetime" json:"ra_lifetime,omitempty"`
	RaPreference     *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference     `protobuf:"varint,14,opt,name=ra_preference,json=raPreference,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference" json:"ra_preference,omitempty"`
	RaPrefixFlag     *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag     `protobuf:"varint,15,opt,name=ra_prefix_flag,json=raPrefixFlag,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag" json:"ra_prefix_flag,omitempty"`
	RaMtuFlag        *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag        `protobuf:"varint,16,opt,name=ra_mtu_flag,json=raMtuFlag,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag" json:"ra_mtu_flag,omitempty"`
	StrictFlag       *bool                                                                   `protobuf:"varint,17,opt,name=strict_flag,json=strictFlag" json:"strict_flag,omitempty"`
	TsFuzzFactor     *uint32                                                                 `protobuf:"varint,18,opt,name=ts_fuzz_factor,json=tsFuzzFactor" json:"ts_fuzz_factor,omitempty"`
	TsClockDrift     *uint32                                                                 `protobuf:"varint,19,opt,name=ts_clock_drift,json=tsClockDrift" json:"ts_clock_drift,omitempty"`
	TsDelta          *uint32                                                                 `protobuf:"varint,20,opt,name=ts_delta,json=tsDelta" json:"ts_delta,omitempty"`
	RsaMinKeyLen     *uint32                                                                 `protobuf:"varint,21,opt,name=rsa_min_key_len,json=rsaMinKeyLen" json:"rsa_min_key_len,omitempty"`
	RsaMaxKeyLen     *uint32                                                                 `protobuf:"varint,22,opt,name=rsa_max_key_len,json=rsaMaxKeyLen" json:"rsa_max_key_len,omitempty"`
	StaleTime        *uint32                                                                 `protobuf:"varint,23,opt,name=stale_time,json=staleTime" json:"stale_time,omitempty"`
	CollectHostFlag  *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag  `protobuf:"varint,24,opt,name=collect_host_flag,json=collectHostFlag,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag" json:"collect_host_flag,omitempty"`
	GenerateRdEnable *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable `protobuf:"varint,25,opt,name=generate_rd_enable,json=generateRdEnable,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable" json:"generate_rd_enable,omitempty"`
	NudInterval      *uint32                                                                 `protobuf:"varint,26,opt,name=nud_interval,json=nudInterval" json:"nud_interval,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 3, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetRetransTimer() uint32 {
	if x != nil && x.RetransTimer != nil {
		return *x.RetransTimer
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetNudReachTime() uint32 {
	if x != nil && x.NudReachTime != nil {
		return *x.NudReachTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetAttemptsValue() uint32 {
	if x != nil && x.AttemptsValue != nil {
		return *x.AttemptsValue
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetNsMcastFlag() Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag {
	if x != nil && x.NsMcastFlag != nil {
		return *x.NsMcastFlag
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag_OFF
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetMaxDynNbNum() uint64 {
	if x != nil && x.MaxDynNbNum != nil {
		return *x.MaxDynNbNum
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetDadTimeout() uint32 {
	if x != nil && x.DadTimeout != nil {
		return *x.DadTimeout
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetNudAttempts() uint32 {
	if x != nil && x.NudAttempts != nil {
		return *x.NudAttempts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetNaGlean() Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean {
	if x != nil && x.NaGlean != nil {
		return *x.NaGlean
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean_OFF
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetMaFlag() Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag {
	if x != nil && x.MaFlag != nil {
		return *x.MaFlag
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag_OFF
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetOFlag() Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag {
	if x != nil && x.OFlag != nil {
		return *x.OFlag
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag_OFF
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetRaHaltFlag() Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag {
	if x != nil && x.RaHaltFlag != nil {
		return *x.RaHaltFlag
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag_OFF
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetMaxInterval() uint32 {
	if x != nil && x.MaxInterval != nil {
		return *x.MaxInterval
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetRaLifetime() uint32 {
	if x != nil && x.RaLifetime != nil {
		return *x.RaLifetime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetRaPreference() Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference {
	if x != nil && x.RaPreference != nil {
		return *x.RaPreference
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference_MEDIUM
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetRaPrefixFlag() Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag {
	if x != nil && x.RaPrefixFlag != nil {
		return *x.RaPrefixFlag
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag_OFF
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetRaMtuFlag() Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag {
	if x != nil && x.RaMtuFlag != nil {
		return *x.RaMtuFlag
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag_OFF
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetStrictFlag() bool {
	if x != nil && x.StrictFlag != nil {
		return *x.StrictFlag
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetTsFuzzFactor() uint32 {
	if x != nil && x.TsFuzzFactor != nil {
		return *x.TsFuzzFactor
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetTsClockDrift() uint32 {
	if x != nil && x.TsClockDrift != nil {
		return *x.TsClockDrift
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetTsDelta() uint32 {
	if x != nil && x.TsDelta != nil {
		return *x.TsDelta
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetRsaMinKeyLen() uint32 {
	if x != nil && x.RsaMinKeyLen != nil {
		return *x.RsaMinKeyLen
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetRsaMaxKeyLen() uint32 {
	if x != nil && x.RsaMaxKeyLen != nil {
		return *x.RsaMaxKeyLen
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetStaleTime() uint32 {
	if x != nil && x.StaleTime != nil {
		return *x.StaleTime
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetCollectHostFlag() Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag {
	if x != nil && x.CollectHostFlag != nil {
		return *x.CollectHostFlag
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag_OFF
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetGenerateRdEnable() Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable {
	if x != nil && x.GenerateRdEnable != nil {
		return *x.GenerateRdEnable
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable_OFF
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty) GetNudInterval() uint32 {
	if x != nil && x.NudInterval != nil {
		return *x.NudInterval
	}
	return 0
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteProxy     *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy     `protobuf:"varint,1,opt,name=route_proxy,json=routeProxy,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy" json:"route_proxy,omitempty"`
	InnerVlanProxy *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy `protobuf:"varint,2,opt,name=inner_vlan_proxy,json=innerVlanProxy,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy" json:"inner_vlan_proxy,omitempty"`
	InterVlanProxy *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy `protobuf:"varint,3,opt,name=inter_vlan_proxy,json=interVlanProxy,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy" json:"inter_vlan_proxy,omitempty"`
	AnywayProxy    *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy    `protobuf:"varint,4,opt,name=anyway_proxy,json=anywayProxy,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy" json:"anyway_proxy,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 3, 1}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys) GetRouteProxy() Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy {
	if x != nil && x.RouteProxy != nil {
		return *x.RouteProxy
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy_OFF
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys) GetInnerVlanProxy() Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy {
	if x != nil && x.InnerVlanProxy != nil {
		return *x.InnerVlanProxy
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy_OFF
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys) GetInterVlanProxy() Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy {
	if x != nil && x.InterVlanProxy != nil {
		return *x.InterVlanProxy
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy_OFF
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys) GetAnywayProxy() Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy {
	if x != nil && x.AnywayProxy != nil {
		return *x.AnywayProxy
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy_OFF
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiveRateLimits *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits `protobuf:"bytes,1,opt,name=receive_rate_limits,json=receiveRateLimits" json:"receive_rate_limits,omitempty"`
	SourceIpReceive   *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive   `protobuf:"bytes,2,opt,name=source_ip_receive,json=sourceIpReceive" json:"source_ip_receive,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 3, 2}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack) GetReceiveRateLimits() *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits {
	if x != nil {
		return x.ReceiveRateLimits
	}
	return nil
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack) GetSourceIpReceive() *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive {
	if x != nil {
		return x.SourceIpReceive
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiveRateLimit []*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit `protobuf:"bytes,1,rep,name=receive_rate_limit,json=receiveRateLimit" json:"receive_rate_limit,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 3, 2, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits) GetReceiveRateLimit() []*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit {
	if x != nil {
		return x.ReceiveRateLimit
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpRateLimits *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits `protobuf:"bytes,1,opt,name=ip_rate_limits,json=ipRateLimits" json:"ip_rate_limits,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 3, 2, 1}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive) GetIpRateLimits() *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits {
	if x != nil {
		return x.IpRateLimits
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type `protobuf:"varint,1,opt,name=type,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type" json:"type,omitempty"`
	Value *uint32                                                                                        `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 3, 2, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit) GetType() Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type_RS
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpRateLimit []*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit `protobuf:"bytes,1,rep,name=ip_rate_limit,json=ipRateLimit" json:"ip_rate_limit,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 3, 2, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits) GetIpRateLimit() []*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit {
	if x != nil {
		return x.IpRateLimit
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketType *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType `protobuf:"varint,1,opt,name=packet_type,json=packetType,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType" json:"packet_type,omitempty"`
	Ipv6Addr   *string                                                                                                    `protobuf:"bytes,2,opt,name=ipv6_addr,json=ipv6Addr" json:"ipv6_addr,omitempty"`
	Value      *uint32                                                                                                    `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 3, 2, 1, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit) GetPacketType() Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType {
	if x != nil && x.PacketType != nil {
		return *x.PacketType
	}
	return Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType_RS
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit) GetIpv6Addr() string {
	if x != nil && x.Ipv6Addr != nil {
		return *x.Ipv6Addr
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type Ifm_Interfaces_Interface_Ipv6_Cgas_Cga struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RsakeyPair *string `protobuf:"bytes,1,opt,name=rsakey_pair,json=rsakeyPair" json:"rsakey_pair,omitempty"`
	SecLevel   *uint32 `protobuf:"varint,2,opt,name=sec_level,json=secLevel" json:"sec_level,omitempty"`
	Modifier   *string `protobuf:"bytes,3,opt,name=modifier" json:"modifier,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_Cgas_Cga) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_Cgas_Cga{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_Cgas_Cga) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_Cgas_Cga) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_Cgas_Cga) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_Cgas_Cga.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_Cgas_Cga) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 4, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_Cgas_Cga) GetRsakeyPair() string {
	if x != nil && x.RsakeyPair != nil {
		return *x.RsakeyPair
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Ipv6_Cgas_Cga) GetSecLevel() uint32 {
	if x != nil && x.SecLevel != nil {
		return *x.SecLevel
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_Cgas_Cga) GetModifier() string {
	if x != nil && x.Modifier != nil {
		return *x.Modifier
	}
	return ""
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllOptions *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions `protobuf:"varint,1,opt,name=all_options,json=allOptions,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions" json:"all_options,omitempty"`
	Options    *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options    `protobuf:"bytes,2,opt,name=options" json:"options,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 5, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch) GetAllOptions() Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions {
	if x != nil && x.AllOptions != nil {
		return *x.AllOptions
	}
	return Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions_DENY
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch) GetOptions() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllOptions *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions `protobuf:"varint,1,opt,name=all_options,json=allOptions,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions" json:"all_options,omitempty"`
	Options    *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options    `protobuf:"bytes,2,opt,name=options" json:"options,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 5, 1}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch) GetAllOptions() Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions {
	if x != nil && x.AllOptions != nil {
		return *x.AllOptions
	}
	return Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions_DENY
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch) GetOptions() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllOptions *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions `protobuf:"varint,1,opt,name=all_options,json=allOptions,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions" json:"all_options,omitempty"`
	Options    *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options    `protobuf:"bytes,2,opt,name=options" json:"options,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 5, 2}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch) GetAllOptions() Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions {
	if x != nil && x.AllOptions != nil {
		return *x.AllOptions
	}
	return Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions_DENY
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch) GetOptions() *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoOptionExhSwitch []*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch `protobuf:"bytes,1,rep,name=no_option_exh_switch,json=noOptionExhSwitch" json:"no_option_exh_switch,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 5, 3}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs) GetNoOptionExhSwitch() []*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch {
	if x != nil {
		return x.NoOptionExhSwitch
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Option []*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option `protobuf:"bytes,1,rep,name=option" json:"option,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 5, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options) GetOption() []*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option {
	if x != nil {
		return x.Option
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptionCode *uint32                                                                                       `protobuf:"varint,1,opt,name=option_code,json=optionCode" json:"option_code,omitempty"`
	FilterRule *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule `protobuf:"varint,2,opt,name=filter_rule,json=filterRule,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule" json:"filter_rule,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 5, 0, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option) GetOptionCode() uint32 {
	if x != nil && x.OptionCode != nil {
		return *x.OptionCode
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option) GetFilterRule() Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule {
	if x != nil && x.FilterRule != nil {
		return *x.FilterRule
	}
	return Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule_DENY
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Option []*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option `protobuf:"bytes,1,rep,name=option" json:"option,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 5, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options) GetOption() []*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option {
	if x != nil {
		return x.Option
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptionCode *uint32                                                                                      `protobuf:"varint,1,opt,name=option_code,json=optionCode" json:"option_code,omitempty"`
	FilterRule *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule `protobuf:"varint,2,opt,name=filter_rule,json=filterRule,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule" json:"filter_rule,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 5, 1, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option) GetOptionCode() uint32 {
	if x != nil && x.OptionCode != nil {
		return *x.OptionCode
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option) GetFilterRule() Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule {
	if x != nil && x.FilterRule != nil {
		return *x.FilterRule
	}
	return Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule_DENY
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Option []*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option `protobuf:"bytes,1,rep,name=option" json:"option,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 5, 2, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options) GetOption() []*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option {
	if x != nil {
		return x.Option
	}
	return nil
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptionCode *uint32                                                                                          `protobuf:"varint,1,opt,name=option_code,json=optionCode" json:"option_code,omitempty"`
	FilterRule *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule `protobuf:"varint,2,opt,name=filter_rule,json=filterRule,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule" json:"filter_rule,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 5, 2, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option) GetOptionCode() uint32 {
	if x != nil && x.OptionCode != nil {
		return *x.OptionCode
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option) GetFilterRule() Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule {
	if x != nil && x.FilterRule != nil {
		return *x.FilterRule
	}
	return Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule_DENY
}

type Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExhType    *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType    `protobuf:"varint,1,opt,name=exh_type,json=exhType,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType" json:"exh_type,omitempty"`
	FilterRule *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule `protobuf:"varint,2,opt,name=filter_rule,json=filterRule,enum=huawei_ifm.Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule" json:"filter_rule,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch) Reset() {
	*x = Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 25, 5, 3, 0}
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch) GetExhType() Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType {
	if x != nil && x.ExhType != nil {
		return *x.ExhType
	}
	return Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_INVALID_ENUM_VALUE_ExhType
}

func (x *Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch) GetFilterRule() Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule {
	if x != nil && x.FilterRule != nil {
		return *x.FilterRule
	}
	return Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule_DENY
}

type Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L2ProxyDynLearn *bool   `protobuf:"varint,1,opt,name=l2proxy_dyn_learn,json=l2proxyDynLearn" json:"l2proxy_dyn_learn,omitempty"`
	L2ProxyMaxNum   *uint32 `protobuf:"varint,2,opt,name=l2proxy_max_num,json=l2proxyMaxNum" json:"l2proxy_max_num,omitempty"`
}

func (x *Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface) Reset() {
	*x = Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 30, 0}
}

func (x *Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface) GetL2ProxyDynLearn() bool {
	if x != nil && x.L2ProxyDynLearn != nil {
		return *x.L2ProxyDynLearn
	}
	return false
}

func (x *Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface) GetL2ProxyMaxNum() uint32 {
	if x != nil && x.L2ProxyMaxNum != nil {
		return *x.L2ProxyMaxNum
	}
	return 0
}

type Ifm_Interfaces_Interface_Nve_Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceVtepIp   *string `protobuf:"bytes,1,opt,name=source_vtep_ip,json=sourceVtepIp" json:"source_vtep_ip,omitempty"`
	SourceVtepIpv6 *string `protobuf:"bytes,2,opt,name=source_vtep_ipv6,json=sourceVtepIpv6" json:"source_vtep_ipv6,omitempty"`
	PhysAddress    *string `protobuf:"bytes,3,opt,name=phys_address,json=physAddress" json:"phys_address,omitempty"`
	BypassVtepIp   *string `protobuf:"bytes,4,opt,name=bypass_vtep_ip,json=bypassVtepIp" json:"bypass_vtep_ip,omitempty"`
	BypassVtepIpv6 *string `protobuf:"bytes,5,opt,name=bypass_vtep_ipv6,json=bypassVtepIpv6" json:"bypass_vtep_ipv6,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Nve_Attribute) Reset() {
	*x = Ifm_Interfaces_Interface_Nve_Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Nve_Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Nve_Attribute) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Nve_Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Nve_Attribute.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Nve_Attribute) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 31, 0}
}

func (x *Ifm_Interfaces_Interface_Nve_Attribute) GetSourceVtepIp() string {
	if x != nil && x.SourceVtepIp != nil {
		return *x.SourceVtepIp
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Nve_Attribute) GetSourceVtepIpv6() string {
	if x != nil && x.SourceVtepIpv6 != nil {
		return *x.SourceVtepIpv6
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Nve_Attribute) GetPhysAddress() string {
	if x != nil && x.PhysAddress != nil {
		return *x.PhysAddress
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Nve_Attribute) GetBypassVtepIp() string {
	if x != nil && x.BypassVtepIp != nil {
		return *x.BypassVtepIp
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Nve_Attribute) GetBypassVtepIpv6() string {
	if x != nil && x.BypassVtepIpv6 != nil {
		return *x.BypassVtepIpv6
	}
	return ""
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkSelectionEnable        *bool                                                                  `protobuf:"varint,1,opt,name=link_selection_enable,json=linkSelectionEnable" json:"link_selection_enable,omitempty"`
	LinkSelectionAddress       *string                                                                `protobuf:"bytes,2,opt,name=link_selection_address,json=linkSelectionAddress" json:"link_selection_address,omitempty"`
	VendorSpecificEnable       *bool                                                                  `protobuf:"varint,3,opt,name=vendor_specific_enable,json=vendorSpecificEnable" json:"vendor_specific_enable,omitempty"`
	SubscriberIdEnable         *bool                                                                  `protobuf:"varint,4,opt,name=subscriber_id_enable,json=subscriberIdEnable" json:"subscriber_id_enable,omitempty"`
	SubscriberIdMode           *Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode `protobuf:"varint,5,opt,name=subscriber_id_mode,json=subscriberIdMode,enum=huawei_ifm.Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode" json:"subscriber_id_mode,omitempty"`
	SubscriberIdSelfDefineText *string                                                                `protobuf:"bytes,6,opt,name=subscriber_id_self_define_text,json=subscriberIdSelfDefineText" json:"subscriber_id_self_define_text,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 0}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82) GetLinkSelectionEnable() bool {
	if x != nil && x.LinkSelectionEnable != nil {
		return *x.LinkSelectionEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82) GetLinkSelectionAddress() string {
	if x != nil && x.LinkSelectionAddress != nil {
		return *x.LinkSelectionAddress
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82) GetVendorSpecificEnable() bool {
	if x != nil && x.VendorSpecificEnable != nil {
		return *x.VendorSpecificEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82) GetSubscriberIdEnable() bool {
	if x != nil && x.SubscriberIdEnable != nil {
		return *x.SubscriberIdEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82) GetSubscriberIdMode() Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode {
	if x != nil && x.SubscriberIdMode != nil {
		return *x.SubscriberIdMode
	}
	return Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_INVALID_ENUM_VALUE_SubscriberIdMode
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82) GetSubscriberIdSelfDefineText() string {
	if x != nil && x.SubscriberIdSelfDefineText != nil {
		return *x.SubscriberIdSelfDefineText
	}
	return ""
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerAddress []*Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress `protobuf:"bytes,1,rep,name=server_address,json=serverAddress" json:"server_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 1}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses) GetServerAddress() []*Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress {
	if x != nil {
		return x.ServerAddress
	}
	return nil
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayAddress []*Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress `protobuf:"bytes,1,rep,name=gateway_address,json=gatewayAddress" json:"gateway_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 2}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses) GetGatewayAddress() []*Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress {
	if x != nil {
		return x.GatewayAddress
	}
	return nil
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VpnName       *string `protobuf:"bytes,1,opt,name=vpn_name,json=vpnName" json:"vpn_name,omitempty"`
	SourceAddress *string `protobuf:"bytes,2,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 3}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress) GetVpnName() string {
	if x != nil && x.VpnName != nil {
		return *x.VpnName
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress) GetSourceAddress() string {
	if x != nil && x.SourceAddress != nil {
		return *x.SourceAddress
	}
	return ""
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelaySourceOptionAddress []*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress `protobuf:"bytes,1,rep,name=relay_source_option_address,json=relaySourceOptionAddress" json:"relay_source_option_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 4}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses) GetRelaySourceOptionAddress() []*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress {
	if x != nil {
		return x.RelaySourceOptionAddress
	}
	return nil
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opt82VendorSpecific []*Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific `protobuf:"bytes,1,rep,name=opt82_vendor_specific,json=opt82VendorSpecific" json:"opt82_vendor_specific,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 5}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics) GetOpt82VendorSpecific() []*Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific {
	if x != nil {
		return x.Opt82VendorSpecific
	}
	return nil
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     *string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Vendor      *bool   `protobuf:"varint,2,opt,name=vendor" json:"vendor,omitempty"`
	OptionCode  *uint32 `protobuf:"varint,3,opt,name=option_code,json=optionCode" json:"option_code,omitempty"`
	VendorClass *string `protobuf:"bytes,4,opt,name=vendor_class,json=vendorClass" json:"vendor_class,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 1, 0}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress) GetVendor() bool {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress) GetOptionCode() uint32 {
	if x != nil && x.OptionCode != nil {
		return *x.OptionCode
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress) GetVendorClass() string {
	if x != nil && x.VendorClass != nil {
		return *x.VendorClass
	}
	return ""
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor      *bool   `protobuf:"varint,1,opt,name=vendor" json:"vendor,omitempty"`
	OptionCode  *uint32 `protobuf:"varint,2,opt,name=option_code,json=optionCode" json:"option_code,omitempty"`
	VendorClass *string `protobuf:"bytes,3,opt,name=vendor_class,json=vendorClass" json:"vendor_class,omitempty"`
	IpAddress   *string `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 2, 0}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress) GetVendor() bool {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress) GetOptionCode() uint32 {
	if x != nil && x.OptionCode != nil {
		return *x.OptionCode
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress) GetVendorClass() string {
	if x != nil && x.VendorClass != nil {
		return *x.VendorClass
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress) GetIpAddress() string {
	if x != nil && x.IpAddress != nil {
		return *x.IpAddress
	}
	return ""
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor        *bool   `protobuf:"varint,1,opt,name=vendor" json:"vendor,omitempty"`
	OptionCode    *uint32 `protobuf:"varint,2,opt,name=option_code,json=optionCode" json:"option_code,omitempty"`
	VendorClass   *string `protobuf:"bytes,3,opt,name=vendor_class,json=vendorClass" json:"vendor_class,omitempty"`
	SourceAddress *string `protobuf:"bytes,4,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 4, 0}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress) GetVendor() bool {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress) GetOptionCode() uint32 {
	if x != nil && x.OptionCode != nil {
		return *x.OptionCode
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress) GetVendorClass() string {
	if x != nil && x.VendorClass != nil {
		return *x.VendorClass
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress) GetSourceAddress() string {
	if x != nil && x.SourceAddress != nil {
		return *x.SourceAddress
	}
	return ""
}

type Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubOptionNumber *uint32                                                                                               `protobuf:"varint,1,opt,name=sub_option_number,json=subOptionNumber" json:"sub_option_number,omitempty"`
	SubOptionFormat *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat `protobuf:"varint,2,opt,name=sub_option_format,json=subOptionFormat,enum=huawei_ifm.Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat" json:"sub_option_format,omitempty"`
	IpAddress       *string                                                                                               `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 32, 5, 0}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific) GetSubOptionNumber() uint32 {
	if x != nil && x.SubOptionNumber != nil {
		return *x.SubOptionNumber
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific) GetSubOptionFormat() Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat {
	if x != nil && x.SubOptionFormat != nil {
		return *x.SubOptionFormat
	}
	return Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat_SOURCEX_IPX_ADDRESS
}

func (x *Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific) GetIpAddress() string {
	if x != nil && x.IpAddress != nil {
		return *x.IpAddress
	}
	return ""
}

type Ifm_Interfaces_Interface_DhcpRelayIf_Option82 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriberIdEnable         *bool                                                           `protobuf:"varint,1,opt,name=subscriber_id_enable,json=subscriberIdEnable" json:"subscriber_id_enable,omitempty"`
	SubscriberIdMode           *Ifm_Interfaces_Interface_DhcpRelayIf_Option82_SubscriberIdMode `protobuf:"varint,2,opt,name=subscriber_id_mode,json=subscriberIdMode,enum=huawei_ifm.Ifm_Interfaces_Interface_DhcpRelayIf_Option82_SubscriberIdMode" json:"subscriber_id_mode,omitempty"`
	SubscriberIdSelfDefineText *string                                                         `protobuf:"bytes,3,opt,name=subscriber_id_self_define_text,json=subscriberIdSelfDefineText" json:"subscriber_id_self_define_text,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpRelayIf_Option82) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpRelayIf_Option82{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayIf_Option82) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpRelayIf_Option82) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpRelayIf_Option82) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayIf_Option82.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpRelayIf_Option82) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 33, 0}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayIf_Option82) GetSubscriberIdEnable() bool {
	if x != nil && x.SubscriberIdEnable != nil {
		return *x.SubscriberIdEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpRelayIf_Option82) GetSubscriberIdMode() Ifm_Interfaces_Interface_DhcpRelayIf_Option82_SubscriberIdMode {
	if x != nil && x.SubscriberIdMode != nil {
		return *x.SubscriberIdMode
	}
	return Ifm_Interfaces_Interface_DhcpRelayIf_Option82_INVALID_ENUM_VALUE_SubscriberIdMode
}

func (x *Ifm_Interfaces_Interface_DhcpRelayIf_Option82) GetSubscriberIdSelfDefineText() string {
	if x != nil && x.SubscriberIdSelfDefineText != nil {
		return *x.SubscriberIdSelfDefineText
	}
	return ""
}

type Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerAddress []*Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses_ServerAddress `protobuf:"bytes,1,rep,name=server_address,json=serverAddress" json:"server_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 33, 1}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses) GetServerAddress() []*Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses_ServerAddress {
	if x != nil {
		return x.ServerAddress
	}
	return nil
}

type Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses_ServerAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     *string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	IsVendor    *bool   `protobuf:"varint,2,opt,name=is_vendor,json=isVendor" json:"is_vendor,omitempty"`
	OptionCode  *uint32 `protobuf:"varint,3,opt,name=option_code,json=optionCode" json:"option_code,omitempty"`
	VendorClass *string `protobuf:"bytes,4,opt,name=vendor_class,json=vendorClass" json:"vendor_class,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses_ServerAddress) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses_ServerAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses_ServerAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses_ServerAddress) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses_ServerAddress) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses_ServerAddress.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses_ServerAddress) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 33, 1, 0}
}

func (x *Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses_ServerAddress) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses_ServerAddress) GetIsVendor() bool {
	if x != nil && x.IsVendor != nil {
		return *x.IsVendor
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses_ServerAddress) GetOptionCode() uint32 {
	if x != nil && x.OptionCode != nil {
		return *x.OptionCode
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses_ServerAddress) GetVendorClass() string {
	if x != nil && x.VendorClass != nil {
		return *x.VendorClass
	}
	return ""
}

type Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpTtl        *uint32                                                         `protobuf:"varint,1,opt,name=ip_ttl,json=ipTtl" json:"ip_ttl,omitempty"`
	DscpOutbound *uint32                                                         `protobuf:"varint,2,opt,name=dscp_outbound,json=dscpOutbound" json:"dscp_outbound,omitempty"`
	ServerEnable *Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable `protobuf:"varint,3,opt,name=server_enable,json=serverEnable,enum=huawei_ifm.Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable" json:"server_enable,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 34, 0}
}

func (x *Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting) GetIpTtl() uint32 {
	if x != nil && x.IpTtl != nil {
		return *x.IpTtl
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting) GetDscpOutbound() uint32 {
	if x != nil && x.DscpOutbound != nil {
		return *x.DscpOutbound
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting) GetServerEnable() Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable {
	if x != nil && x.ServerEnable != nil {
		return *x.ServerEnable
	}
	return Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_INVALID_ENUM_VALUE_ServerEnable
}

type Ifm_Interfaces_Interface_DhcpIf_Option82Formats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Option82Format []*Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format `protobuf:"bytes,1,rep,name=option82_format,json=option82Format" json:"option82_format,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpIf_Option82Formats) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpIf_Option82Formats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpIf_Option82Formats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpIf_Option82Formats) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpIf_Option82Formats) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpIf_Option82Formats.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpIf_Option82Formats) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 34, 1}
}

func (x *Ifm_Interfaces_Interface_DhcpIf_Option82Formats) GetOption82Format() []*Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format {
	if x != nil {
		return x.Option82Format
	}
	return nil
}

type Ifm_Interfaces_Interface_DhcpIf_Option82InsertSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Interfaces_Interface_DhcpIf_Option82InsertSetting) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpIf_Option82InsertSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpIf_Option82InsertSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpIf_Option82InsertSetting) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpIf_Option82InsertSetting) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpIf_Option82InsertSetting.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpIf_Option82InsertSetting) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 34, 2}
}

type Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubOptionType  *Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType `protobuf:"varint,1,opt,name=sub_option_type,json=subOptionType,enum=huawei_ifm.Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType" json:"sub_option_type,omitempty"`
	UserDefineText *string                                                                       `protobuf:"bytes,3,opt,name=user_define_text,json=userDefineText" json:"user_define_text,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 34, 1, 0}
}

func (x *Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format) GetSubOptionType() Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType {
	if x != nil && x.SubOptionType != nil {
		return *x.SubOptionType
	}
	return Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_INVALID_ENUM_VALUE_SubOptionType
}

func (x *Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format) GetUserDefineText() string {
	if x != nil && x.UserDefineText != nil {
		return *x.UserDefineText
	}
	return ""
}

type Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FsmState          *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState `protobuf:"varint,1,opt,name=fsm_state,json=fsmState,enum=huawei_ifm.Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState" json:"fsm_state,omitempty"`
	MacAddress        *string                                                      `protobuf:"bytes,2,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	IpAddress         *string                                                      `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
	IpMask            *string                                                      `protobuf:"bytes,4,opt,name=ip_mask,json=ipMask" json:"ip_mask,omitempty"`
	ServerAddress     *string                                                      `protobuf:"bytes,5,opt,name=server_address,json=serverAddress" json:"server_address,omitempty"`
	LeaseObtainedTime *string                                                      `protobuf:"bytes,6,opt,name=lease_obtained_time,json=leaseObtainedTime" json:"lease_obtained_time,omitempty"`
	LeaseExpireTime   *string                                                      `protobuf:"bytes,7,opt,name=lease_expire_time,json=leaseExpireTime" json:"lease_expire_time,omitempty"`
	LeaseRenewTime    *string                                                      `protobuf:"bytes,8,opt,name=lease_renew_time,json=leaseRenewTime" json:"lease_renew_time,omitempty"`
	LeaseRebindTime   *string                                                      `protobuf:"bytes,9,opt,name=lease_rebind_time,json=leaseRebindTime" json:"lease_rebind_time,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 35, 0}
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) GetFsmState() Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState {
	if x != nil && x.FsmState != nil {
		return *x.FsmState
	}
	return Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState_INIT
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) GetMacAddress() string {
	if x != nil && x.MacAddress != nil {
		return *x.MacAddress
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) GetIpAddress() string {
	if x != nil && x.IpAddress != nil {
		return *x.IpAddress
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) GetIpMask() string {
	if x != nil && x.IpMask != nil {
		return *x.IpMask
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) GetServerAddress() string {
	if x != nil && x.ServerAddress != nil {
		return *x.ServerAddress
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) GetLeaseObtainedTime() string {
	if x != nil && x.LeaseObtainedTime != nil {
		return *x.LeaseObtainedTime
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) GetLeaseExpireTime() string {
	if x != nil && x.LeaseExpireTime != nil {
		return *x.LeaseExpireTime
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) GetLeaseRenewTime() string {
	if x != nil && x.LeaseRenewTime != nil {
		return *x.LeaseRenewTime
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus) GetLeaseRebindTime() string {
	if x != nil && x.LeaseRebindTime != nil {
		return *x.LeaseRebindTime
	}
	return ""
}

type Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalPacketsReceived     *uint32 `protobuf:"varint,1,opt,name=total_packets_received,json=totalPacketsReceived" json:"total_packets_received,omitempty"`
	OfferPacketsReceived     *uint32 `protobuf:"varint,2,opt,name=offer_packets_received,json=offerPacketsReceived" json:"offer_packets_received,omitempty"`
	AckPacketsReceived       *uint32 `protobuf:"varint,3,opt,name=ack_packets_received,json=ackPacketsReceived" json:"ack_packets_received,omitempty"`
	NakPacketsReceived       *uint32 `protobuf:"varint,4,opt,name=nak_packets_received,json=nakPacketsReceived" json:"nak_packets_received,omitempty"`
	TotalPacketsSend         *uint32 `protobuf:"varint,5,opt,name=total_packets_send,json=totalPacketsSend" json:"total_packets_send,omitempty"`
	DiscoveryPacketsSend     *uint32 `protobuf:"varint,6,opt,name=discovery_packets_send,json=discoveryPacketsSend" json:"discovery_packets_send,omitempty"`
	RequestPacketsSend       *uint32 `protobuf:"varint,7,opt,name=request_packets_send,json=requestPacketsSend" json:"request_packets_send,omitempty"`
	RebootRequestPacketsSend *uint32 `protobuf:"varint,8,opt,name=reboot_request_packets_send,json=rebootRequestPacketsSend" json:"reboot_request_packets_send,omitempty"`
	SelectRequestPacketsSend *uint32 `protobuf:"varint,9,opt,name=select_request_packets_send,json=selectRequestPacketsSend" json:"select_request_packets_send,omitempty"`
	RenewRequestPacketsSend  *uint32 `protobuf:"varint,10,opt,name=renew_request_packets_send,json=renewRequestPacketsSend" json:"renew_request_packets_send,omitempty"`
	RebindRequestPacketsSend *uint32 `protobuf:"varint,11,opt,name=rebind_request_packets_send,json=rebindRequestPacketsSend" json:"rebind_request_packets_send,omitempty"`
	DeclinePacketsSend       *uint32 `protobuf:"varint,12,opt,name=decline_packets_send,json=declinePacketsSend" json:"decline_packets_send,omitempty"`
	ReleasePacketsSend       *uint32 `protobuf:"varint,13,opt,name=release_packets_send,json=releasePacketsSend" json:"release_packets_send,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 35, 1}
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) GetTotalPacketsReceived() uint32 {
	if x != nil && x.TotalPacketsReceived != nil {
		return *x.TotalPacketsReceived
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) GetOfferPacketsReceived() uint32 {
	if x != nil && x.OfferPacketsReceived != nil {
		return *x.OfferPacketsReceived
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) GetAckPacketsReceived() uint32 {
	if x != nil && x.AckPacketsReceived != nil {
		return *x.AckPacketsReceived
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) GetNakPacketsReceived() uint32 {
	if x != nil && x.NakPacketsReceived != nil {
		return *x.NakPacketsReceived
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) GetTotalPacketsSend() uint32 {
	if x != nil && x.TotalPacketsSend != nil {
		return *x.TotalPacketsSend
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) GetDiscoveryPacketsSend() uint32 {
	if x != nil && x.DiscoveryPacketsSend != nil {
		return *x.DiscoveryPacketsSend
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) GetRequestPacketsSend() uint32 {
	if x != nil && x.RequestPacketsSend != nil {
		return *x.RequestPacketsSend
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) GetRebootRequestPacketsSend() uint32 {
	if x != nil && x.RebootRequestPacketsSend != nil {
		return *x.RebootRequestPacketsSend
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) GetSelectRequestPacketsSend() uint32 {
	if x != nil && x.SelectRequestPacketsSend != nil {
		return *x.SelectRequestPacketsSend
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) GetRenewRequestPacketsSend() uint32 {
	if x != nil && x.RenewRequestPacketsSend != nil {
		return *x.RenewRequestPacketsSend
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) GetRebindRequestPacketsSend() uint32 {
	if x != nil && x.RebindRequestPacketsSend != nil {
		return *x.RebindRequestPacketsSend
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) GetDeclinePacketsSend() uint32 {
	if x != nil && x.DeclinePacketsSend != nil {
		return *x.DeclinePacketsSend
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics) GetReleasePacketsSend() uint32 {
	if x != nil && x.ReleasePacketsSend != nil {
		return *x.ReleasePacketsSend
	}
	return 0
}

type Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable                  *bool   `protobuf:"varint,1,opt,name=enable" json:"enable,omitempty"`
	TrustEnable             *bool   `protobuf:"varint,2,opt,name=trust_enable,json=trustEnable" json:"trust_enable,omitempty"`
	CheckArpEnable          *bool   `protobuf:"varint,3,opt,name=check_arp_enable,json=checkArpEnable" json:"check_arp_enable,omitempty"`
	AlarmArpEnable          *bool   `protobuf:"varint,4,opt,name=alarm_arp_enable,json=alarmArpEnable" json:"alarm_arp_enable,omitempty"`
	AlarmArpThreshold       *uint32 `protobuf:"varint,5,opt,name=alarm_arp_threshold,json=alarmArpThreshold" json:"alarm_arp_threshold,omitempty"`
	CheckIpEnable           *bool   `protobuf:"varint,6,opt,name=check_ip_enable,json=checkIpEnable" json:"check_ip_enable,omitempty"`
	AlarmIpEnable           *bool   `protobuf:"varint,7,opt,name=alarm_ip_enable,json=alarmIpEnable" json:"alarm_ip_enable,omitempty"`
	AlarmIpThreshold        *uint32 `protobuf:"varint,8,opt,name=alarm_ip_threshold,json=alarmIpThreshold" json:"alarm_ip_threshold,omitempty"`
	AlarmReplyEnable        *bool   `protobuf:"varint,9,opt,name=alarm_reply_enable,json=alarmReplyEnable" json:"alarm_reply_enable,omitempty"`
	AlarmReplyThreshold     *uint32 `protobuf:"varint,10,opt,name=alarm_reply_threshold,json=alarmReplyThreshold" json:"alarm_reply_threshold,omitempty"`
	CheckMacEnable          *bool   `protobuf:"varint,11,opt,name=check_mac_enable,json=checkMacEnable" json:"check_mac_enable,omitempty"`
	AlarmMacEnable          *bool   `protobuf:"varint,12,opt,name=alarm_mac_enable,json=alarmMacEnable" json:"alarm_mac_enable,omitempty"`
	AlarmMacThreshold       *uint32 `protobuf:"varint,13,opt,name=alarm_mac_threshold,json=alarmMacThreshold" json:"alarm_mac_threshold,omitempty"`
	CheckUserBindEnable     *bool   `protobuf:"varint,14,opt,name=check_user_bind_enable,json=checkUserBindEnable" json:"check_user_bind_enable,omitempty"`
	AlarmUserBindEnable     *bool   `protobuf:"varint,15,opt,name=alarm_user_bind_enable,json=alarmUserBindEnable" json:"alarm_user_bind_enable,omitempty"`
	AlarmUserBindThreshold  *uint32 `protobuf:"varint,16,opt,name=alarm_user_bind_threshold,json=alarmUserBindThreshold" json:"alarm_user_bind_threshold,omitempty"`
	MaxUserNumber           *uint32 `protobuf:"varint,17,opt,name=max_user_number,json=maxUserNumber" json:"max_user_number,omitempty"`
	AlarmUserLimitEnable    *bool   `protobuf:"varint,18,opt,name=alarm_user_limit_enable,json=alarmUserLimitEnable" json:"alarm_user_limit_enable,omitempty"`
	AlarmUserLimitThreshold *uint32 `protobuf:"varint,19,opt,name=alarm_user_limit_threshold,json=alarmUserLimitThreshold" json:"alarm_user_limit_threshold,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 36, 0}
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetTrustEnable() bool {
	if x != nil && x.TrustEnable != nil {
		return *x.TrustEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetCheckArpEnable() bool {
	if x != nil && x.CheckArpEnable != nil {
		return *x.CheckArpEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetAlarmArpEnable() bool {
	if x != nil && x.AlarmArpEnable != nil {
		return *x.AlarmArpEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetAlarmArpThreshold() uint32 {
	if x != nil && x.AlarmArpThreshold != nil {
		return *x.AlarmArpThreshold
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetCheckIpEnable() bool {
	if x != nil && x.CheckIpEnable != nil {
		return *x.CheckIpEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetAlarmIpEnable() bool {
	if x != nil && x.AlarmIpEnable != nil {
		return *x.AlarmIpEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetAlarmIpThreshold() uint32 {
	if x != nil && x.AlarmIpThreshold != nil {
		return *x.AlarmIpThreshold
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetAlarmReplyEnable() bool {
	if x != nil && x.AlarmReplyEnable != nil {
		return *x.AlarmReplyEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetAlarmReplyThreshold() uint32 {
	if x != nil && x.AlarmReplyThreshold != nil {
		return *x.AlarmReplyThreshold
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetCheckMacEnable() bool {
	if x != nil && x.CheckMacEnable != nil {
		return *x.CheckMacEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetAlarmMacEnable() bool {
	if x != nil && x.AlarmMacEnable != nil {
		return *x.AlarmMacEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetAlarmMacThreshold() uint32 {
	if x != nil && x.AlarmMacThreshold != nil {
		return *x.AlarmMacThreshold
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetCheckUserBindEnable() bool {
	if x != nil && x.CheckUserBindEnable != nil {
		return *x.CheckUserBindEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetAlarmUserBindEnable() bool {
	if x != nil && x.AlarmUserBindEnable != nil {
		return *x.AlarmUserBindEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetAlarmUserBindThreshold() uint32 {
	if x != nil && x.AlarmUserBindThreshold != nil {
		return *x.AlarmUserBindThreshold
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetMaxUserNumber() uint32 {
	if x != nil && x.MaxUserNumber != nil {
		return *x.MaxUserNumber
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetAlarmUserLimitEnable() bool {
	if x != nil && x.AlarmUserLimitEnable != nil {
		return *x.AlarmUserLimitEnable
	}
	return false
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute) GetAlarmUserLimitThreshold() uint32 {
	if x != nil && x.AlarmUserLimitThreshold != nil {
		return *x.AlarmUserLimitThreshold
	}
	return 0
}

type Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StaticBind []*Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind `protobuf:"bytes,1,rep,name=static_bind,json=staticBind" json:"static_bind,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 36, 1}
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds) GetStaticBind() []*Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind {
	if x != nil {
		return x.StaticBind
	}
	return nil
}

type Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress  *string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
	VlanId     *uint32 `protobuf:"varint,2,opt,name=vlan_id,json=vlanId" json:"vlan_id,omitempty"`
	CevlanId   *uint32 `protobuf:"varint,3,opt,name=cevlan_id,json=cevlanId" json:"cevlan_id,omitempty"`
	MacAddress *string `protobuf:"bytes,4,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind) Reset() {
	*x = Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 36, 1, 0}
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind) GetIpAddress() string {
	if x != nil && x.IpAddress != nil {
		return *x.IpAddress
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind) GetVlanId() uint32 {
	if x != nil && x.VlanId != nil {
		return *x.VlanId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind) GetCevlanId() uint32 {
	if x != nil && x.CevlanId != nil {
		return *x.CevlanId
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind) GetMacAddress() string {
	if x != nil && x.MacAddress != nil {
		return *x.MacAddress
	}
	return ""
}

type Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationAddress []*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses_DestinationAddress `protobuf:"bytes,1,rep,name=destination_address,json=destinationAddress" json:"destination_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses) Reset() {
	*x = Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 37, 0}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses) GetDestinationAddress() []*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses_DestinationAddress {
	if x != nil {
		return x.DestinationAddress
	}
	return nil
}

type Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationIf []*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs_DestinationIf `protobuf:"bytes,1,rep,name=destination_if,json=destinationIf" json:"destination_if,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs) Reset() {
	*x = Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 37, 1}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs) GetDestinationIf() []*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs_DestinationIf {
	if x != nil {
		return x.DestinationIf
	}
	return nil
}

type Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RebuildInterfaceId *bool `protobuf:"varint,1,opt,name=rebuild_interface_id,json=rebuildInterfaceId" json:"rebuild_interface_id,omitempty"`
	RebuildRemoteId    *bool `protobuf:"varint,2,opt,name=rebuild_remote_id,json=rebuildRemoteId" json:"rebuild_remote_id,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption) Reset() {
	*x = Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 37, 2}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption) GetRebuildInterfaceId() bool {
	if x != nil && x.RebuildInterfaceId != nil {
		return *x.RebuildInterfaceId
	}
	return false
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption) GetRebuildRemoteId() bool {
	if x != nil && x.RebuildRemoteId != nil {
		return *x.RebuildRemoteId
	}
	return false
}

type Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessLimit     *uint32 `protobuf:"varint,1,opt,name=access_limit,json=accessLimit" json:"access_limit,omitempty"`
	AccessVlanLimit *uint32 `protobuf:"varint,2,opt,name=access_vlan_limit,json=accessVlanLimit" json:"access_vlan_limit,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting) Reset() {
	*x = Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 37, 3}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting) GetAccessLimit() uint32 {
	if x != nil && x.AccessLimit != nil {
		return *x.AccessLimit
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting) GetAccessVlanLimit() uint32 {
	if x != nil && x.AccessVlanLimit != nil {
		return *x.AccessVlanLimit
	}
	return 0
}

type Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_PdRouteTrackVrrp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DegradeCost *uint32 `protobuf:"varint,1,opt,name=degrade_cost,json=degradeCost" json:"degrade_cost,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_PdRouteTrackVrrp) Reset() {
	*x = Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_PdRouteTrackVrrp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_PdRouteTrackVrrp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_PdRouteTrackVrrp) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_PdRouteTrackVrrp) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_PdRouteTrackVrrp.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_PdRouteTrackVrrp) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 37, 4}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_PdRouteTrackVrrp) GetDegradeCost() uint32 {
	if x != nil && x.DegradeCost != nil {
		return *x.DegradeCost
	}
	return 0
}

type Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses_DestinationAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv6Address *string `protobuf:"bytes,1,opt,name=ipv6_address,json=ipv6Address" json:"ipv6_address,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses_DestinationAddress) Reset() {
	*x = Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses_DestinationAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses_DestinationAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses_DestinationAddress) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses_DestinationAddress) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses_DestinationAddress.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses_DestinationAddress) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 37, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses_DestinationAddress) GetIpv6Address() string {
	if x != nil && x.Ipv6Address != nil {
		return *x.Ipv6Address
	}
	return ""
}

type Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs_DestinationIf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IfName *string `protobuf:"bytes,1,opt,name=if_name,json=ifName" json:"if_name,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs_DestinationIf) Reset() {
	*x = Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs_DestinationIf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs_DestinationIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs_DestinationIf) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs_DestinationIf) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs_DestinationIf.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs_DestinationIf) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 37, 1, 0}
}

func (x *Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs_DestinationIf) GetIfName() string {
	if x != nil && x.IfName != nil {
		return *x.IfName
	}
	return ""
}

type Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vni         *uint32                                                                    `protobuf:"varint,1,opt,name=vni" json:"vni,omitempty"`
	Peer        *string                                                                    `protobuf:"bytes,2,opt,name=peer" json:"peer,omitempty"`
	Mode        *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode        `protobuf:"varint,3,opt,name=mode,enum=huawei_ifm.Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode" json:"mode,omitempty"`
	Direction   *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction   `protobuf:"varint,4,opt,name=direction,enum=huawei_ifm.Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction" json:"direction,omitempty"`
	Collections *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections `protobuf:"bytes,5,opt,name=collections" json:"collections,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic) Reset() {
	*x = Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 42, 0}
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic) GetVni() uint32 {
	if x != nil && x.Vni != nil {
		return *x.Vni
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic) GetPeer() string {
	if x != nil && x.Peer != nil {
		return *x.Peer
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic) GetMode() Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode_L2
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic) GetDirection() Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction_INBOUND
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic) GetCollections() *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections {
	if x != nil {
		return x.Collections
	}
	return nil
}

type Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collection []*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection `protobuf:"bytes,1,rep,name=collection" json:"collection,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections) Reset() {
	*x = Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 42, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections) GetCollection() []*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection {
	if x != nil {
		return x.Collection
	}
	return nil
}

type Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceAddr           *string `protobuf:"bytes,1,opt,name=source_addr,json=sourceAddr" json:"source_addr,omitempty"`
	SendBitsRate         *uint64 `protobuf:"varint,2,opt,name=send_bits_rate,json=sendBitsRate" json:"send_bits_rate,omitempty"`
	SendPktsRate         *uint64 `protobuf:"varint,3,opt,name=send_pkts_rate,json=sendPktsRate" json:"send_pkts_rate,omitempty"`
	SendUnicastPkts      *uint64 `protobuf:"varint,4,opt,name=send_unicast_pkts,json=sendUnicastPkts" json:"send_unicast_pkts,omitempty"`
	SendMulticastPkts    *uint64 `protobuf:"varint,5,opt,name=send_multicast_pkts,json=sendMulticastPkts" json:"send_multicast_pkts,omitempty"`
	SendBroadcastPkts    *uint64 `protobuf:"varint,6,opt,name=send_broadcast_pkts,json=sendBroadcastPkts" json:"send_broadcast_pkts,omitempty"`
	SendTotalBytes       *uint64 `protobuf:"varint,7,opt,name=send_total_bytes,json=sendTotalBytes" json:"send_total_bytes,omitempty"`
	SendTotalPkts        *uint64 `protobuf:"varint,8,opt,name=send_total_pkts,json=sendTotalPkts" json:"send_total_pkts,omitempty"`
	ReceiveBitsRate      *uint64 `protobuf:"varint,9,opt,name=receive_bits_rate,json=receiveBitsRate" json:"receive_bits_rate,omitempty"`
	ReceivePktsRate      *uint64 `protobuf:"varint,10,opt,name=receive_pkts_rate,json=receivePktsRate" json:"receive_pkts_rate,omitempty"`
	ReceiveUnicastPkts   *uint64 `protobuf:"varint,11,opt,name=receive_unicast_pkts,json=receiveUnicastPkts" json:"receive_unicast_pkts,omitempty"`
	ReceiveMulticastPkts *uint64 `protobuf:"varint,12,opt,name=receive_multicast_pkts,json=receiveMulticastPkts" json:"receive_multicast_pkts,omitempty"`
	ReceiveBroadcastPkts *uint64 `protobuf:"varint,13,opt,name=receive_broadcast_pkts,json=receiveBroadcastPkts" json:"receive_broadcast_pkts,omitempty"`
	ReceiveTotalBytes    *uint64 `protobuf:"varint,14,opt,name=receive_total_bytes,json=receiveTotalBytes" json:"receive_total_bytes,omitempty"`
	ReceiveTotalPkts     *uint64 `protobuf:"varint,15,opt,name=receive_total_pkts,json=receiveTotalPkts" json:"receive_total_pkts,omitempty"`
	DropUnicastPkts      *uint64 `protobuf:"varint,16,opt,name=drop_unicast_pkts,json=dropUnicastPkts" json:"drop_unicast_pkts,omitempty"`
	DropMulticastPkts    *uint64 `protobuf:"varint,17,opt,name=drop_multicast_pkts,json=dropMulticastPkts" json:"drop_multicast_pkts,omitempty"`
	DropBroadcastPkts    *uint64 `protobuf:"varint,18,opt,name=drop_broadcast_pkts,json=dropBroadcastPkts" json:"drop_broadcast_pkts,omitempty"`
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) Reset() {
	*x = Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) ProtoMessage() {
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 42, 0, 0, 0}
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetSourceAddr() string {
	if x != nil && x.SourceAddr != nil {
		return *x.SourceAddr
	}
	return ""
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetSendBitsRate() uint64 {
	if x != nil && x.SendBitsRate != nil {
		return *x.SendBitsRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetSendPktsRate() uint64 {
	if x != nil && x.SendPktsRate != nil {
		return *x.SendPktsRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetSendUnicastPkts() uint64 {
	if x != nil && x.SendUnicastPkts != nil {
		return *x.SendUnicastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetSendMulticastPkts() uint64 {
	if x != nil && x.SendMulticastPkts != nil {
		return *x.SendMulticastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetSendBroadcastPkts() uint64 {
	if x != nil && x.SendBroadcastPkts != nil {
		return *x.SendBroadcastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetSendTotalBytes() uint64 {
	if x != nil && x.SendTotalBytes != nil {
		return *x.SendTotalBytes
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetSendTotalPkts() uint64 {
	if x != nil && x.SendTotalPkts != nil {
		return *x.SendTotalPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetReceiveBitsRate() uint64 {
	if x != nil && x.ReceiveBitsRate != nil {
		return *x.ReceiveBitsRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetReceivePktsRate() uint64 {
	if x != nil && x.ReceivePktsRate != nil {
		return *x.ReceivePktsRate
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetReceiveUnicastPkts() uint64 {
	if x != nil && x.ReceiveUnicastPkts != nil {
		return *x.ReceiveUnicastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetReceiveMulticastPkts() uint64 {
	if x != nil && x.ReceiveMulticastPkts != nil {
		return *x.ReceiveMulticastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetReceiveBroadcastPkts() uint64 {
	if x != nil && x.ReceiveBroadcastPkts != nil {
		return *x.ReceiveBroadcastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetReceiveTotalBytes() uint64 {
	if x != nil && x.ReceiveTotalBytes != nil {
		return *x.ReceiveTotalBytes
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetReceiveTotalPkts() uint64 {
	if x != nil && x.ReceiveTotalPkts != nil {
		return *x.ReceiveTotalPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetDropUnicastPkts() uint64 {
	if x != nil && x.DropUnicastPkts != nil {
		return *x.DropUnicastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetDropMulticastPkts() uint64 {
	if x != nil && x.DropMulticastPkts != nil {
		return *x.DropMulticastPkts
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection) GetDropBroadcastPkts() uint64 {
	if x != nil && x.DropBroadcastPkts != nil {
		return *x.DropBroadcastPkts
	}
	return 0
}

type Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action          *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action          `protobuf:"varint,1,opt,name=action,enum=huawei_ifm.Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action" json:"action,omitempty"`
	IcmpName        *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName        `protobuf:"varint,2,opt,name=icmp_name,json=icmpName,enum=huawei_ifm.Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName" json:"icmp_name,omitempty"`
	IcmpType        *uint32                                                                  `protobuf:"varint,3,opt,name=icmp_type,json=icmpType" json:"icmp_type,omitempty"`
	IcmpCode        *uint32                                                                  `protobuf:"varint,4,opt,name=icmp_code,json=icmpCode" json:"icmp_code,omitempty"`
	SwitchOperation *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation `protobuf:"varint,5,opt,name=switch_operation,json=switchOperation,enum=huawei_ifm.Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation" json:"switch_operation,omitempty"`
}

func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity) Reset() {
	*x = Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 43, 0}
}

func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity) GetAction() Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action_RECEIVEX_PKT
}

func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity) GetIcmpName() Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName {
	if x != nil && x.IcmpName != nil {
		return *x.IcmpName
	}
	return Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName_USERX_DEFINED
}

func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity) GetIcmpType() uint32 {
	if x != nil && x.IcmpType != nil {
		return *x.IcmpType
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity) GetIcmpCode() uint32 {
	if x != nil && x.IcmpCode != nil {
		return *x.IcmpCode
	}
	return 0
}

func (x *Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity) GetSwitchOperation() Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation {
	if x != nil && x.SwitchOperation != nil {
		return *x.SwitchOperation
	}
	return Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation_ENABLE
}

type Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptionType *Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType `protobuf:"varint,1,opt,name=option_type,json=optionType,enum=huawei_ifm.Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType" json:"option_type,omitempty"`
	Switch     *Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch     `protobuf:"varint,2,opt,name=switch,enum=huawei_ifm.Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch" json:"switch,omitempty"`
}

func (x *Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity) Reset() {
	*x = Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity) ProtoMessage() {}

func (x *Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity.ProtoReflect.Descriptor instead.
func (*Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 1, 0, 44, 0}
}

func (x *Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity) GetOptionType() Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType {
	if x != nil && x.OptionType != nil {
		return *x.OptionType
	}
	return Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType_ROUTEX_ALERT
}

func (x *Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity) GetSwitch() Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch {
	if x != nil && x.Switch != nil {
		return *x.Switch
	}
	return Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch_ENABLE
}

type Ifm_Global_Ipv4ConflictEnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreemptEnable *bool `protobuf:"varint,1,opt,name=preempt_enable,json=preemptEnable" json:"preempt_enable,omitempty"`
}

func (x *Ifm_Global_Ipv4ConflictEnable) Reset() {
	*x = Ifm_Global_Ipv4ConflictEnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Global_Ipv4ConflictEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Global_Ipv4ConflictEnable) ProtoMessage() {}

func (x *Ifm_Global_Ipv4ConflictEnable) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Global_Ipv4ConflictEnable.ProtoReflect.Descriptor instead.
func (*Ifm_Global_Ipv4ConflictEnable) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Ifm_Global_Ipv4ConflictEnable) GetPreemptEnable() bool {
	if x != nil && x.PreemptEnable != nil {
		return *x.PreemptEnable
	}
	return false
}

type Ifm_Global_Ipv6ConflictEnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreemptEnable *bool `protobuf:"varint,1,opt,name=preempt_enable,json=preemptEnable" json:"preempt_enable,omitempty"`
}

func (x *Ifm_Global_Ipv6ConflictEnable) Reset() {
	*x = Ifm_Global_Ipv6ConflictEnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Global_Ipv6ConflictEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Global_Ipv6ConflictEnable) ProtoMessage() {}

func (x *Ifm_Global_Ipv6ConflictEnable) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Global_Ipv6ConflictEnable.ProtoReflect.Descriptor instead.
func (*Ifm_Global_Ipv6ConflictEnable) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *Ifm_Global_Ipv6ConflictEnable) GetPreemptEnable() bool {
	if x != nil && x.PreemptEnable != nil {
		return *x.PreemptEnable
	}
	return false
}

type Ifm_Damp_Level struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auto   *Ifm_Damp_Level_Auto   `protobuf:"bytes,1,opt,name=auto" json:"auto,omitempty"`
	Manual *Ifm_Damp_Level_Manual `protobuf:"bytes,2,opt,name=manual" json:"manual,omitempty"`
}

func (x *Ifm_Damp_Level) Reset() {
	*x = Ifm_Damp_Level{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Damp_Level) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Damp_Level) ProtoMessage() {}

func (x *Ifm_Damp_Level) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Damp_Level.ProtoReflect.Descriptor instead.
func (*Ifm_Damp_Level) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *Ifm_Damp_Level) GetAuto() *Ifm_Damp_Level_Auto {
	if x != nil {
		return x.Auto
	}
	return nil
}

func (x *Ifm_Damp_Level) GetManual() *Ifm_Damp_Level_Manual {
	if x != nil {
		return x.Manual
	}
	return nil
}

type Ifm_Damp_Level_Auto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Damp_Level_Auto) Reset() {
	*x = Ifm_Damp_Level_Auto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Damp_Level_Auto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Damp_Level_Auto) ProtoMessage() {}

func (x *Ifm_Damp_Level_Auto) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Damp_Level_Auto.ProtoReflect.Descriptor instead.
func (*Ifm_Damp_Level_Auto) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 3, 0, 0}
}

type Ifm_Damp_Level_Manual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ifm_Damp_Level_Manual) Reset() {
	*x = Ifm_Damp_Level_Manual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_Damp_Level_Manual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_Damp_Level_Manual) ProtoMessage() {}

func (x *Ifm_Damp_Level_Manual) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_Damp_Level_Manual.ProtoReflect.Descriptor instead.
func (*Ifm_Damp_Level_Manual) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 3, 0, 1}
}

type Ifm_StaticDimensionRanges_StaticDimensionRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         *Ifm_StaticDimensionRanges_StaticDimensionRange_Type `protobuf:"varint,1,opt,name=type,enum=huawei_ifm.Ifm_StaticDimensionRanges_StaticDimensionRange_Type" json:"type,omitempty"`
	ChassisRange *string                                              `protobuf:"bytes,2,opt,name=chassis_range,json=chassisRange" json:"chassis_range,omitempty"`
	SlotRange    *string                                              `protobuf:"bytes,3,opt,name=slot_range,json=slotRange" json:"slot_range,omitempty"`
	CardRange    *string                                              `protobuf:"bytes,4,opt,name=card_range,json=cardRange" json:"card_range,omitempty"`
	PortRange    *string                                              `protobuf:"bytes,5,opt,name=port_range,json=portRange" json:"port_range,omitempty"`
}

func (x *Ifm_StaticDimensionRanges_StaticDimensionRange) Reset() {
	*x = Ifm_StaticDimensionRanges_StaticDimensionRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_StaticDimensionRanges_StaticDimensionRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_StaticDimensionRanges_StaticDimensionRange) ProtoMessage() {}

func (x *Ifm_StaticDimensionRanges_StaticDimensionRange) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_StaticDimensionRanges_StaticDimensionRange.ProtoReflect.Descriptor instead.
func (*Ifm_StaticDimensionRanges_StaticDimensionRange) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *Ifm_StaticDimensionRanges_StaticDimensionRange) GetType() Ifm_StaticDimensionRanges_StaticDimensionRange_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Ifm_StaticDimensionRanges_StaticDimensionRange_Type_ETHERNET
}

func (x *Ifm_StaticDimensionRanges_StaticDimensionRange) GetChassisRange() string {
	if x != nil && x.ChassisRange != nil {
		return *x.ChassisRange
	}
	return ""
}

func (x *Ifm_StaticDimensionRanges_StaticDimensionRange) GetSlotRange() string {
	if x != nil && x.SlotRange != nil {
		return *x.SlotRange
	}
	return ""
}

func (x *Ifm_StaticDimensionRanges_StaticDimensionRange) GetCardRange() string {
	if x != nil && x.CardRange != nil {
		return *x.CardRange
	}
	return ""
}

func (x *Ifm_StaticDimensionRanges_StaticDimensionRange) GetPortRange() string {
	if x != nil && x.PortRange != nil {
		return *x.PortRange
	}
	return ""
}

type Ifm_RemoteInterfaces_RemoteInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  *string                                                     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Index                 *uint32                                                     `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	RemoteStatisticsState *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState `protobuf:"bytes,3,opt,name=remote_statistics_state,json=remoteStatisticsState" json:"remote_statistics_state,omitempty"`
}

func (x *Ifm_RemoteInterfaces_RemoteInterface) Reset() {
	*x = Ifm_RemoteInterfaces_RemoteInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_RemoteInterfaces_RemoteInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_RemoteInterfaces_RemoteInterface) ProtoMessage() {}

func (x *Ifm_RemoteInterfaces_RemoteInterface) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_RemoteInterfaces_RemoteInterface.ProtoReflect.Descriptor instead.
func (*Ifm_RemoteInterfaces_RemoteInterface) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 6, 0}
}

func (x *Ifm_RemoteInterfaces_RemoteInterface) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Ifm_RemoteInterfaces_RemoteInterface) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *Ifm_RemoteInterfaces_RemoteInterface) GetRemoteStatisticsState() *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState {
	if x != nil {
		return x.RemoteStatisticsState
	}
	return nil
}

type Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastClearedTime          *string `protobuf:"bytes,1,opt,name=last_cleared_time,json=lastClearedTime" json:"last_cleared_time,omitempty"`
	InBitRate                *uint64 `protobuf:"varint,2,opt,name=in_bit_rate,json=inBitRate" json:"in_bit_rate,omitempty"`
	InPacketRate             *uint64 `protobuf:"varint,3,opt,name=in_packet_rate,json=inPacketRate" json:"in_packet_rate,omitempty"`
	InPeakBitRate            *uint64 `protobuf:"varint,4,opt,name=in_peak_bit_rate,json=inPeakBitRate" json:"in_peak_bit_rate,omitempty"`
	InPeakBitRateRecordTime  *string `protobuf:"bytes,5,opt,name=in_peak_bit_rate_record_time,json=inPeakBitRateRecordTime" json:"in_peak_bit_rate_record_time,omitempty"`
	OutBitRate               *uint64 `protobuf:"varint,6,opt,name=out_bit_rate,json=outBitRate" json:"out_bit_rate,omitempty"`
	OutPacketRate            *uint64 `protobuf:"varint,7,opt,name=out_packet_rate,json=outPacketRate" json:"out_packet_rate,omitempty"`
	OutPeakBitRate           *uint64 `protobuf:"varint,8,opt,name=out_peak_bit_rate,json=outPeakBitRate" json:"out_peak_bit_rate,omitempty"`
	OutPeakBitRateRecordTime *string `protobuf:"bytes,9,opt,name=out_peak_bit_rate_record_time,json=outPeakBitRateRecordTime" json:"out_peak_bit_rate_record_time,omitempty"`
	InUseRate                *string `protobuf:"bytes,10,opt,name=in_use_rate,json=inUseRate" json:"in_use_rate,omitempty"`
	OutUseRate               *string `protobuf:"bytes,11,opt,name=out_use_rate,json=outUseRate" json:"out_use_rate,omitempty"`
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) Reset() {
	*x = Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) ProtoMessage() {}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState.ProtoReflect.Descriptor instead.
func (*Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 6, 0, 0}
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) GetLastClearedTime() string {
	if x != nil && x.LastClearedTime != nil {
		return *x.LastClearedTime
	}
	return ""
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) GetInBitRate() uint64 {
	if x != nil && x.InBitRate != nil {
		return *x.InBitRate
	}
	return 0
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) GetInPacketRate() uint64 {
	if x != nil && x.InPacketRate != nil {
		return *x.InPacketRate
	}
	return 0
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) GetInPeakBitRate() uint64 {
	if x != nil && x.InPeakBitRate != nil {
		return *x.InPeakBitRate
	}
	return 0
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) GetInPeakBitRateRecordTime() string {
	if x != nil && x.InPeakBitRateRecordTime != nil {
		return *x.InPeakBitRateRecordTime
	}
	return ""
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) GetOutBitRate() uint64 {
	if x != nil && x.OutBitRate != nil {
		return *x.OutBitRate
	}
	return 0
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) GetOutPacketRate() uint64 {
	if x != nil && x.OutPacketRate != nil {
		return *x.OutPacketRate
	}
	return 0
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) GetOutPeakBitRate() uint64 {
	if x != nil && x.OutPeakBitRate != nil {
		return *x.OutPeakBitRate
	}
	return 0
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) GetOutPeakBitRateRecordTime() string {
	if x != nil && x.OutPeakBitRateRecordTime != nil {
		return *x.OutPeakBitRateRecordTime
	}
	return ""
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) GetInUseRate() string {
	if x != nil && x.InUseRate != nil {
		return *x.InUseRate
	}
	return ""
}

func (x *Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState) GetOutUseRate() string {
	if x != nil && x.OutUseRate != nil {
		return *x.OutUseRate
	}
	return ""
}

type Ifm_AutoRecoveryTimes_AutoRecoveryTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorDownType *Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType `protobuf:"varint,1,opt,name=error_down_type,json=errorDownType,enum=huawei_ifm.Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType" json:"error_down_type,omitempty"`
	TimeValue     *uint32                                               `protobuf:"varint,2,opt,name=time_value,json=timeValue" json:"time_value,omitempty"`
}

func (x *Ifm_AutoRecoveryTimes_AutoRecoveryTime) Reset() {
	*x = Ifm_AutoRecoveryTimes_AutoRecoveryTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_huawei_ifm_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ifm_AutoRecoveryTimes_AutoRecoveryTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ifm_AutoRecoveryTimes_AutoRecoveryTime) ProtoMessage() {}

func (x *Ifm_AutoRecoveryTimes_AutoRecoveryTime) ProtoReflect() protoreflect.Message {
	mi := &file_huawei_ifm_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ifm_AutoRecoveryTimes_AutoRecoveryTime.ProtoReflect.Descriptor instead.
func (*Ifm_AutoRecoveryTimes_AutoRecoveryTime) Descriptor() ([]byte, []int) {
	return file_huawei_ifm_proto_rawDescGZIP(), []int{0, 7, 0}
}

func (x *Ifm_AutoRecoveryTimes_AutoRecoveryTime) GetErrorDownType() Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType {
	if x != nil && x.ErrorDownType != nil {
		return *x.ErrorDownType
	}
	return Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType_BPDUX_PROTECTION
}

func (x *Ifm_AutoRecoveryTimes_AutoRecoveryTime) GetTimeValue() uint32 {
	if x != nil && x.TimeValue != nil {
		return *x.TimeValue
	}
	return 0
}

var File_huawei_ifm_proto protoreflect.FileDescriptor

var file_huawei_ifm_proto_rawDesc = []byte{
	0x0a, 0x10, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x2d, 0x69, 0x66, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x22, 0xbf,
	0xaa, 0x05, 0x0a, 0x03, 0x49, 0x66, 0x6d, 0x12, 0x33, 0x0a, 0x0d, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x0a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x06,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x44, 0x61, 0x6d, 0x70, 0x12, 0x46, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x12, 0x40, 0x0a, 0x14, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x3e, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x2b, 0x0a, 0x09, 0x68, 0x64, 0x6c, 0x63, 0x5f, 0x64, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x48, 0x64, 0x6c, 0x63, 0x44, 0x61, 0x6d, 0x70, 0x1a, 0x2a, 0x0a, 0x0c,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x12,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x1a, 0xd5, 0x82, 0x05, 0x0a, 0x0a, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x1a, 0x8c, 0x82, 0x05, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0d,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x3b, 0x0a,
	0x06, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x31, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x12, 0x13, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0e, 0x0a, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x12, 0x13, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x12,
	0x18, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x12, 0x46, 0x0a, 0x0c, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x30, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x48, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x10, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x12, 0x11, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x0b, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x17, 0x0a, 0x0f, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x6d, 0x74, 0x75, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x12, 0x1a,
	0x0a, 0x12, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x10, 0x0a, 0x08, 0x76, 0x72,
	0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x12, 0x13, 0x0a, 0x0b,
	0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x12, 0x3d, 0x0a, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x12, 0x4a, 0x0a, 0x0e, 0x6d, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d,
	0x69, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x50, 0x0a, 0x11,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x39,
	0x0a, 0x05, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x12, 0x35, 0x0a, 0x03, 0x62, 0x61, 0x73,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x73,
	0x12, 0x48, 0x0a, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x61,
	0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x42, 0x61, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x76, 0x72,
	0x72, 0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56,
	0x72, 0x72, 0x70, 0x12, 0x35, 0x0a, 0x03, 0x72, 0x62, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x62, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x6c, 0x32, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x08, 0x12, 0x44, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0b, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x5f, 0x69, 0x70, 0x5f, 0x64, 0x66, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x12, 0x20, 0x0a, 0x18,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75, 0x70, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x72, 0x61,
	0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x12, 0x4a,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x0e, 0x6c, 0x32,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x08, 0x12, 0x17, 0x0a, 0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x4c, 0x0a, 0x0f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x4a, 0x0a, 0x0e, 0x62, 0x64, 0x69,
	0x66, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x64, 0x69, 0x66, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x61, 0x72, 0x70, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x41, 0x72, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x0a, 0x6e,
	0x64, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x35, 0x0a, 0x03, 0x62, 0x66, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x42, 0x66, 0x64, 0x12, 0x48, 0x0a, 0x0d, 0x6e, 0x76, 0x65, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x4e, 0x76, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x46, 0x0a, 0x0c, 0x6e, 0x76, 0x6f, 0x33, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x76, 0x6f,
	0x33, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x40, 0x0a, 0x09, 0x61, 0x72, 0x70, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x41, 0x72, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x04, 0x65, 0x76,
	0x70, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45,
	0x76, 0x70, 0x6e, 0x12, 0x35, 0x0a, 0x03, 0x65, 0x66, 0x6d, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x66, 0x6d, 0x12, 0x4e, 0x0a, 0x10, 0x76, 0x6c,
	0x61, 0x6e, 0x69, 0x66, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x69,
	0x66, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x6c,
	0x64, 0x70, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c,
	0x6c, 0x64, 0x70, 0x12, 0x46, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x66,
	0x6c, 0x61, 0x70, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x6c, 0x61, 0x70, 0x12, 0x4a, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x70, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x70, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x64, 0x61, 0x6d, 0x70, 0x69,
	0x6e, 0x67, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44,
	0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x12,
	0x37, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x12, 0x0f, 0x0a, 0x07, 0x76, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x12, 0x1c, 0x0a, 0x14, 0x6c, 0x32, 0x5f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x46, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x52, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x69, 0x66, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x66,
	0x12, 0x55, 0x0a, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x42, 0x0a, 0x0a, 0x64, 0x61, 0x6d, 0x70, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x44, 0x61, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x12,
	0x4f, 0x0a, 0x11, 0x61, 0x72, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x41, 0x72, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x12, 0x4f, 0x0a, 0x11, 0x61, 0x72, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x41, 0x72, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x35, 0x0a, 0x03, 0x6e, 0x76, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x76, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x64, 0x68, 0x63, 0x70,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63,
	0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x47, 0x0a, 0x0d, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x66,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63,
	0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x66, 0x12, 0x3c, 0x0a, 0x07, 0x64, 0x68, 0x63, 0x70,
	0x5f, 0x69, 0x66, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x44, 0x68, 0x63, 0x70, 0x49, 0x66, 0x12, 0x49, 0x0a, 0x0e, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x66, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x66, 0x12, 0x4d, 0x0a, 0x10, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x73, 0x6e, 0x6f, 0x6f, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x66, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x53, 0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x66,
	0x12, 0x59, 0x0a, 0x16, 0x64, 0x68, 0x63, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x69,
	0x66, 0x5f, 0x38, 0x30, 0x32, 0x31, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x66, 0x38,
	0x30, 0x32, 0x31, 0x50, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x60, 0x0a, 0x1a,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x66, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x49, 0x66, 0x12, 0x4e,
	0x0a, 0x10, 0x66, 0x72, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46,
	0x72, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53,
	0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x55, 0x0a, 0x14, 0x6e, 0x76, 0x6f, 0x33, 0x5f, 0x76, 0x74, 0x65, 0x70,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x4b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x76, 0x6f, 0x33, 0x56, 0x74, 0x65, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x4f, 0x0a, 0x11, 0x69, 0x66,
	0x5f, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x73, 0x18,
	0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x66, 0x49, 0x63,
	0x6d, 0x70, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x73, 0x12, 0x52, 0x0a, 0x13, 0x69,
	0x66, 0x5f, 0x69, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x73, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x66, 0x49, 0x70, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x73, 0x12,
	0x50, 0x0a, 0x12, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x72, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x4d, 0x0a, 0x10, 0x69, 0x70, 0x5f, 0x66, 0x77, 0x64, 0x5f, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x70, 0x46, 0x77, 0x64, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x1a, 0xaa, 0x08, 0x0a, 0x07, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12, 0x4c, 0x0a, 0x0b,
	0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x54, 0x0a, 0x0f, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x4c, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b,
	0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x11, 0x0a, 0x09, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x12, 0x4c,
	0x0a, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x0b,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x37, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2e,
	0x49, 0x70, 0x76, 0x36, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x14, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x70, 0x5f, 0x64, 0x61,
	0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x12, 0x13, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x12, 0x1d, 0x0a,
	0x15, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x75,
	0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x12, 0x12, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x12, 0x59, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x0d, 0x73,
	0x75, 0x62, 0x5f, 0x69, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x22, 0x34, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x44,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x22, 0x40, 0x0a, 0x0e, 0x50, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x44, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x22, 0x34, 0x0a, 0x0a, 0x4c, 0x69,
	0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x69, 0x6e, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x50, 0x10, 0x01,
	0x22, 0x34, 0x0a, 0x0a, 0x49, 0x70, 0x76, 0x34, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13,
	0x0a, 0x0f, 0x49, 0x70, 0x76, 0x34, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x44, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x70, 0x76, 0x34, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x22, 0x34, 0x0a, 0x0a, 0x49, 0x70, 0x76, 0x36, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x70, 0x76, 0x36, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x70, 0x76,
	0x36, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x22, 0x7f, 0x0a, 0x10,
	0x4c, 0x69, 0x6e, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x4c, 0x69, 0x6e, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4c,
	0x69, 0x6e, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x69, 0x6e, 0x6b, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c,
	0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x69, 0x6e, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x04, 0x1a, 0x8c, 0x03,
	0x0a, 0x0d, 0x4d, 0x69, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x14, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x12, 0x11, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x12, 0x16, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x12, 0x13, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x12, 0x1e, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x12, 0x20, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x12, 0x1c, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x12, 0x1b, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x12, 0x1d, 0x0a, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x12, 0x19, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x12, 0x1c, 0x0a, 0x14,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x12, 0x1b, 0x0a, 0x13, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x12, 0x19, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x04, 0x12, 0x18, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x1a, 0xa0, 0x09, 0x0a,
	0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x16, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x14, 0x0a, 0x0c, 0x69, 0x6e, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x12,
	0x13, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x12, 0x16, 0x0a, 0x0e, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x12, 0x13, 0x0a, 0x0b,
	0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x12, 0x15, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x12, 0x14, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f,
	0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x12, 0x17,
	0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x12, 0x14, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x75,
	0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x12, 0x14, 0x0a,
	0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x12, 0x11, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x12, 0x16, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x12, 0x13,
	0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x04, 0x12, 0x1e, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x04, 0x12, 0x20, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x04, 0x12, 0x1c, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x04, 0x12, 0x1b, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04,
	0x12, 0x1d, 0x0a, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x12,
	0x19, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x12, 0x1c, 0x0a, 0x14, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x12, 0x1b, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x04, 0x12, 0x19, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04,
	0x12, 0x18, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x12, 0x18, 0x0a, 0x10, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x04, 0x12, 0x1b, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x04, 0x12, 0x1a, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x12, 0x1d, 0x0a,
	0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x12, 0x16, 0x0a, 0x0e,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x04, 0x12, 0x19, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x12,
	0x1d, 0x0a, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x12, 0x20,
	0x0a, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04,
	0x12, 0x1f, 0x0a, 0x17, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x04, 0x12, 0x22, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x04, 0x12, 0x1b, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x04, 0x12, 0x1e, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x04, 0x12, 0x20, 0x0a, 0x18, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x04, 0x12, 0x23, 0x0a, 0x1b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x04, 0x12, 0x22, 0x0a, 0x1a, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x04, 0x12, 0x25, 0x0a,
	0x1d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x04, 0x12, 0x22, 0x0a, 0x1a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x04, 0x12, 0x25, 0x0a, 0x1d, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x04, 0x1a,
	0xed, 0x28, 0x0a, 0x05, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72,
	0x75, 0x6e, 0x6b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x43, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x6c, 0x61, 0x63, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e,
	0x4c, 0x61, 0x63, 0x70, 0x12, 0x12, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x70, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x18, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f,
	0x75, 0x70, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x12, 0x12, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x70, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x46, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15,
	0x0a, 0x0d, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x19, 0x0a, 0x11, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x12, 0x12, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x12, 0x15, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x12, 0x1d, 0x0a, 0x15, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f,
	0x76, 0x6c, 0x61, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x1e, 0x0a, 0x16, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x12, 0x16, 0x0a, 0x0e, 0x70, 0x72,
	0x65, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x12, 0x1d, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x12, 0x1d, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d,
	0x12, 0x22, 0x0a, 0x1a, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0d, 0x12, 0x4b, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x1a, 0xa8, 0x13, 0x0a, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0xd1, 0x12, 0x0a, 0x06, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x12, 0x0e, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x12, 0x5b, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72,
	0x75, 0x6e, 0x6b, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x50,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x11, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x12, 0x4c, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x6c, 0x0a, 0x15, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x4d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x63, 0x70,
	0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x4c, 0x0a, 0x04, 0x6c, 0x61, 0x63, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x1a, 0xba, 0x0c,
	0x0a, 0x04, 0x4c, 0x61, 0x63, 0x70, 0x12, 0x66, 0x0a, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x77,
	0x0a, 0x18, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x55, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x63, 0x70,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x0d, 0x70, 0x64, 0x75, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x2e, 0x50,
	0x64, 0x75, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x1a, 0xbc, 0x01, 0x0a, 0x0e,
	0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x10,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x12, 0x60, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x52,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x22, 0x36, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x6f,
	0x6c, 0x65, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x6f, 0x6c,
	0x65, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x6f,
	0x6c, 0x65, 0x5f, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x10, 0x02, 0x1a, 0x8b, 0x07, 0x0a, 0x16, 0x50,
	0x6f, 0x72, 0x74, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x6c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e,
	0x6b, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x2e, 0x4c, 0x61, 0x63, 0x70, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x71, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4e, 0x65, 0x67, 0x6f, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x12, 0x15, 0x0a, 0x0d, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x12, 0x13, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x12, 0x14, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x19, 0x0a,
	0x11, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x12, 0x16, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x70, 0x72, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x12, 0x15, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x12, 0x17, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x70, 0x72, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x12, 0x12, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x12, 0x17, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x15, 0x0a,
	0x0d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x12, 0x16, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x22, 0x5c, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x49, 0x4e, 0x44,
	0x45, 0x50, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x46,
	0x4f, 0x52, 0x43, 0x45, 0x58, 0x5f, 0x55, 0x50, 0x10, 0x03, 0x22, 0x9b, 0x02, 0x0a, 0x08, 0x50,
	0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x4d, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x30,
	0x4d, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x58, 0x5f, 0x31, 0x47, 0x45, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x45,
	0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58,
	0x5f, 0x31, 0x54, 0x45, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x54, 0x45, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x50,
	0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x54, 0x45, 0x10,
	0x08, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f,
	0x31, 0x30, 0x30, 0x30, 0x54, 0x45, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x34, 0x30, 0x47, 0x45, 0x10, 0x0a, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x34, 0x30, 0x30, 0x47,
	0x45, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x58, 0x5f, 0x32, 0x35, 0x47, 0x45, 0x10, 0x0c, 0x1a, 0x9f, 0x01, 0x0a, 0x0c, 0x50, 0x64, 0x75,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x13, 0x0a, 0x0b, 0x72, 0x65, 0x63,
	0x76, 0x5f, 0x70, 0x64, 0x75, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x17,
	0x0a, 0x0f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x70, 0x64, 0x75, 0x6e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x13, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x64, 0x75, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x1a, 0x0a, 0x12,
	0x72, 0x65, 0x63, 0x76, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x64, 0x75, 0x6e,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x19, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x76,
	0x5f, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x12, 0x15, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x22, 0x37, 0x0a, 0x0b, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55,
	0x50, 0x10, 0x01, 0x22, 0x28, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x22, 0x38, 0x0a,
	0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x53, 0x4c,
	0x41, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x4d, 0x41,
	0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x02, 0x22, 0x82, 0x01, 0x0a, 0x13, 0x4c, 0x61, 0x63, 0x70,
	0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x2a, 0x0a, 0x26, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4c, 0x61, 0x63, 0x70, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4c,
	0x61, 0x63, 0x70, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4c,
	0x61, 0x63, 0x70, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x02, 0x1a, 0xa8, 0x09, 0x0a,
	0x04, 0x4c, 0x61, 0x63, 0x70, 0x12, 0x60, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e,
	0x4c, 0x61, 0x63, 0x70, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x12, 0x66, 0x61, 0x73, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x12, 0x17, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70,
	0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x12, 0x56, 0x0a, 0x0f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e,
	0x6b, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x64, 0x12, 0x15, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x5f,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x16, 0x0a, 0x0e, 0x6d,
	0x61, 0x78, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x12, 0x19, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x17,
	0x0a, 0x0f, 0x6d, 0x69, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x12, 0x15, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x12, 0x19,
	0x0a, 0x11, 0x64, 0x61, 0x6d, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x12, 0x17, 0x0a, 0x0f, 0x64, 0x61, 0x6d,
	0x70, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x12, 0x0f, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x12, 0x4d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x76, 0x72, 0x72,
	0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72,
	0x75, 0x6e, 0x6b, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x56, 0x72,
	0x72, 0x70, 0x12, 0x12, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x70, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x13, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x79, 0x73, 0x70, 0x72, 0x69, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x13, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x6d, 0x61, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x12, 0x53, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x6d, 0x61, 0x63, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72,
	0x75, 0x6e, 0x6b, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x2e, 0x53, 0x79, 0x73, 0x6d, 0x61, 0x63, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x0c, 0x73, 0x79, 0x73, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x43, 0x0a, 0x05, 0x6d,
	0x5f, 0x6c, 0x61, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x2e, 0x4d, 0x4c, 0x61, 0x67,
	0x12, 0x0f, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x6b, 0x65, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x1a, 0x53, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x56, 0x72, 0x72, 0x70, 0x12, 0x0f,
	0x0a, 0x07, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x12,
	0x0f, 0x0a, 0x07, 0x69, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x12, 0x14, 0x0a, 0x0c, 0x73, 0x79, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x0e, 0x0a, 0x06, 0x69, 0x64, 0x5f, 0x65, 0x78, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x1a, 0x2d, 0x0a, 0x04, 0x4d, 0x4c, 0x61, 0x67, 0x12, 0x14,
	0x0a, 0x0c, 0x73, 0x79, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x12, 0x0f, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x5f, 0x6d, 0x61, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x22, 0x4e, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x53, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46,
	0x41, 0x53, 0x54, 0x10, 0x01, 0x22, 0x6a, 0x0a, 0x0d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x74, 0x64, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x64, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x64, 0x5f, 0x53, 0x50,
	0x45, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x74, 0x64, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10,
	0x03, 0x22, 0x64, 0x0a, 0x0c, 0x53, 0x79, 0x73, 0x6d, 0x61, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x53, 0x79, 0x73, 0x6d, 0x61, 0x63, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x79, 0x73, 0x6d, 0x61, 0x63,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x79, 0x73, 0x6d, 0x61, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x52,
	0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x02, 0x1a, 0xa7, 0x01, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x55, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x41,
	0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0a, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x13, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x12, 0x12, 0x0a,
	0x0a, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x22, 0x4c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45,
	0x54, 0x48, 0x58, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x02, 0x22,
	0x96, 0x01, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x1b,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x44,
	0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x03, 0x12, 0x13, 0x0a,
	0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50,
	0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x05, 0x22, 0x84, 0x03, 0x0a, 0x08, 0x48, 0x61, 0x73,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x48, 0x61, 0x73, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x49, 0x50, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x61, 0x73, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x61, 0x73,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x58, 0x5f, 0x41, 0x4c,
	0x4c, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x44, 0x45, 0x53, 0x58, 0x5f, 0x49, 0x50, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x61, 0x73,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x45, 0x53, 0x58, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x05,
	0x12, 0x14, 0x0a, 0x10, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x52, 0x43,
	0x58, 0x5f, 0x49, 0x50, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x53, 0x52, 0x43, 0x58, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x07, 0x12, 0x15, 0x0a,
	0x11, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x4e, 0x48, 0x41, 0x4e, 0x43,
	0x45, 0x44, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x52, 0x45, 0x53, 0x49, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10,
	0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c,
	0x34, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x61, 0x73, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x58, 0x5f, 0x52, 0x4f, 0x42, 0x49,
	0x4e, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x53, 0x59, 0x4d, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x0e, 0x12, 0x22, 0x0a, 0x1e, 0x48,
	0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x59, 0x4d, 0x4d, 0x45, 0x54, 0x52, 0x49,
	0x43, 0x58, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0f, 0x1a,
	0xd3, 0x01, 0x0a, 0x03, 0x42, 0x61, 0x73, 0x12, 0x48, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x1a, 0x81, 0x01, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x5f, 0x0a, 0x11, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x42, 0x61, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x1a, 0x12, 0x0a, 0x10, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x1a, 0xbb, 0x04, 0x0a, 0x0c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x42, 0x61, 0x73, 0x12, 0x1f, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x76, 0x6c, 0x61,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x1f, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x76, 0x6c,
	0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x1e, 0x0a, 0x16, 0x63, 0x6f, 0x70, 0x79,
	0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x12, 0x1b, 0x0a, 0x13, 0x63, 0x6f, 0x70, 0x79,
	0x5f, 0x62, 0x79, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x12, 0x1c, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x12, 0x23, 0x0a, 0x1b, 0x69, 0x67, 0x6d, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x12, 0x4d, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x42, 0x61, 0x73, 0x2e, 0x56,
	0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x99, 0x02, 0x0a, 0x08, 0x56, 0x6c, 0x61, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x04, 0x71, 0x69, 0x6e, 0x71, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x42, 0x61, 0x73, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x51,
	0x69, 0x6e, 0x71, 0x12, 0x4d, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x42, 0x61, 0x73, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x56, 0x6c,
	0x61, 0x6e, 0x1a, 0x48, 0x0a, 0x04, 0x51, 0x69, 0x6e, 0x71, 0x12, 0x1f, 0x0a, 0x17, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x65, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x1f, 0x0a, 0x17, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x65, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x1a, 0x25, 0x0a, 0x04,
	0x56, 0x6c, 0x61, 0x6e, 0x12, 0x1d, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x1a, 0xbb, 0x08, 0x0a, 0x04, 0x56, 0x72, 0x72, 0x70, 0x12, 0x59, 0x0a, 0x14,
	0x69, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x76,
	0x72, 0x72, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x49, 0x66, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x56, 0x72, 0x72, 0x70, 0x73, 0x12, 0x4d, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x73, 0x1a, 0xb4, 0x01, 0x0a, 0x11, 0x49, 0x66, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x56, 0x72, 0x72, 0x70, 0x73, 0x12, 0x69, 0x0a, 0x13, 0x69, 0x66, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x72, 0x72, 0x70,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x72, 0x72,
	0x70, 0x2e, 0x49, 0x66, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x56, 0x72,
	0x72, 0x70, 0x73, 0x2e, 0x49, 0x66, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x56, 0x72, 0x72, 0x70, 0x1a, 0x34, 0x0a, 0x10, 0x49, 0x66, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x56, 0x72, 0x72, 0x70, 0x12, 0x0a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x12, 0x14, 0x0a, 0x0c, 0x76, 0x72, 0x72, 0x70, 0x5f, 0x69, 0x66, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x1a, 0xf2, 0x03, 0x0a, 0x0c, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x15, 0x0a, 0x0d, 0x74,
	0x74, 0x6c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x12, 0x15, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x16, 0x0a, 0x0e, 0x61, 0x72, 0x70,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x12, 0x65, 0x0a, 0x13, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x53, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0xb4, 0x02, 0x0a, 0x11, 0x41, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x6a,
	0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x41, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x41,
	0x6c, 0x6c, 0x53, 0x75, 0x62, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x68, 0x0a, 0x0b, 0x6f, 0x6e,
	0x65, 0x5f, 0x73, 0x75, 0x62, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x4f, 0x6e, 0x65, 0x53, 0x75, 0x62,
	0x76, 0x6c, 0x61, 0x6e, 0x1a, 0x23, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x76, 0x6c,
	0x61, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x1a, 0x24, 0x0a, 0x0a, 0x4f, 0x6e, 0x65,
	0x53, 0x75, 0x62, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x73, 0x75, 0x62, 0x76, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x1a,
	0x8f, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x12,
	0x55, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x1a, 0x29, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x12, 0x0a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x12, 0x0f, 0x0a, 0x07, 0x69, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x1a, 0x62, 0x0a, 0x03, 0x52, 0x62, 0x73, 0x12, 0x42, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64,
	0x5f, 0x72, 0x62, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x52, 0x62, 0x73, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x62, 0x70, 0x1a, 0x17, 0x0a, 0x07,
	0x42, 0x69, 0x6e, 0x64, 0x52, 0x62, 0x70, 0x12, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x1a, 0x93, 0x37, 0x0a, 0x08, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x12, 0x53, 0x0a, 0x0e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x10, 0x6c, 0x33, 0x5f, 0x73, 0x75,
	0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2e, 0x4c, 0x33, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x3e, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x63, 0x12,
	0x56, 0x0a, 0x10, 0x6c, 0x32, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x32, 0x53, 0x75, 0x62, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xfe, 0x0a, 0x0a, 0x0d, 0x4d, 0x61, 0x69, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x6c, 0x32, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d,
	0x61, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x32, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x73, 0x77, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x77, 0x61,
	0x70, 0x12, 0x15, 0x0a, 0x0d, 0x71, 0x69, 0x6e, 0x71, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x1a, 0xe6, 0x08, 0x0a, 0x0b, 0x4c, 0x32, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x63, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x32, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a,
	0x04, 0x70, 0x76, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x13, 0x0a, 0x0b, 0x74,
	0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x12, 0x18, 0x0a, 0x10, 0x75, 0x6e, 0x74, 0x61, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x12, 0x6d, 0x0a, 0x0e, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x55, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x4c, 0x32, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x7e, 0x0a, 0x17, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76,
	0x6c, 0x61, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x32, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x76, 0x0a, 0x13, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x4c, 0x32, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x1a, 0xda, 0x01, 0x0a, 0x0d, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x79, 0x0a, 0x0d, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x32, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x1a, 0x4e,
	0x0a, 0x0c, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x15,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x12, 0x0a, 0x0a, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x12, 0x13, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x1a, 0x26,
	0x0a, 0x15, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x0d, 0x0a, 0x05, 0x76, 0x6c, 0x61, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x1a, 0xc2, 0x01, 0x0a, 0x11, 0x50, 0x6f, 0x72, 0x74, 0x49,
	0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x86, 0x01, 0x0a,
	0x12, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x32, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x24, 0x0a, 0x10, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x73, 0x6f,
	0x6c, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x10, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x22, 0x83, 0x01, 0x0a, 0x08,
	0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4c,
	0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x69, 0x6e,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48,
	0x59, 0x42, 0x52, 0x49, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x69, 0x6e, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x31, 0x51, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10,
	0x04, 0x22, 0x35, 0x0a, 0x08, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x12, 0x14, 0x0a,
	0x10, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0xa9, 0x11, 0x0a, 0x0e, 0x4c, 0x33, 0x53,
	0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x09, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x33,
	0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x33, 0x53, 0x75, 0x62, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x1a, 0xf0, 0x0c, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x61, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x2e, 0x4c, 0x33, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x6f, 0x0a, 0x10, 0x71, 0x69, 0x6e, 0x71, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x33, 0x53,
	0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x51, 0x69, 0x6e, 0x71, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x0d, 0x71, 0x69, 0x6e, 0x71, 0x5f, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x33, 0x53, 0x75, 0x62,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x51, 0x69, 0x6e, 0x71, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12,
	0x6a, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x33, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x12, 0x71, 0x0a, 0x11, 0x64,
	0x6f, 0x74, 0x31, 0x71, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x33, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x6f,
	0x74, 0x31, 0x51, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68,
	0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x6e, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x33, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x6c, 0x61, 0x6e, 0x41, 0x6e, 0x79, 0x1a, 0xa9, 0x01, 0x0a, 0x08, 0x56, 0x6c, 0x61,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x75, 0x0a, 0x0f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x33,
	0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x56,
	0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x6f, 0x74, 0x31, 0x51, 0x1a, 0x26, 0x0a, 0x0d,
	0x56, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x6f, 0x74, 0x31, 0x51, 0x12, 0x15, 0x0a,
	0x0d, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x1a, 0x11, 0x0a, 0x0f, 0x51, 0x69, 0x6e, 0x71, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0e, 0x0a, 0x0c, 0x51, 0x69, 0x6e, 0x71, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x1a, 0xe9, 0x05, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72,
	0x56, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x12, 0x7b, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x61, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x2e, 0x4c, 0x33, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6c,
	0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0xdb, 0x04, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6c,
	0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x88, 0x01, 0x0a, 0x0f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x71, 0x69, 0x6e, 0x71, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x2e, 0x4c, 0x33, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6c,
	0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x51, 0x69,
	0x6e, 0x71, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6f, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x33, 0x53,
	0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x44, 0x6f, 0x74, 0x31, 0x51, 0x1a, 0x8e,
	0x02, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x51, 0x69, 0x6e, 0x71, 0x73,
	0x12, 0x94, 0x01, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x71,
	0x69, 0x6e, 0x71, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x7c, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x33, 0x53, 0x75, 0x62, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x6c, 0x61, 0x6e, 0x51, 0x69, 0x6e, 0x71, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56,
	0x6c, 0x61, 0x6e, 0x51, 0x69, 0x6e, 0x71, 0x1a, 0x66, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x56,
	0x6c, 0x61, 0x6e, 0x51, 0x69, 0x6e, 0x71, 0x12, 0x15, 0x0a, 0x0d, 0x70, 0x65, 0x5f, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x13,
	0x0a, 0x0b, 0x70, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x12, 0x15, 0x0a, 0x0d, 0x63, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x13, 0x0a, 0x0b, 0x63, 0x65,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x1a,
	0x22, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x44, 0x6f, 0x74, 0x31, 0x51,
	0x12, 0x11, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x1a, 0x12, 0x0a, 0x10, 0x44, 0x6f, 0x74, 0x31, 0x51, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x56,
	0x6c, 0x61, 0x6e, 0x41, 0x6e, 0x79, 0x1a, 0xeb, 0x02, 0x0a, 0x0a, 0x56, 0x6c, 0x61, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x65, 0x0a, 0x0a, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x33, 0x53, 0x75, 0x62, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xf5, 0x01, 0x0a,
	0x09, 0x56, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0a, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x64, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x56, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x33, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x56, 0x6c,
	0x61, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x10,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x12, 0x13, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x22, 0x47, 0x0a, 0x04, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c,
	0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x49, 0x4e, 0x47,
	0x4c, 0x45, 0x10, 0x02, 0x1a, 0xde, 0x0c, 0x0a, 0x03, 0x4d, 0x61, 0x63, 0x12, 0x67, 0x0a, 0x17,
	0x73, 0x75, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x61,
	0x63, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x63,
	0x2e, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x63,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x6e, 0x0a, 0x1a, 0x73, 0x75, 0x62, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x63, 0x2e, 0x53, 0x75, 0x62,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xa3, 0x06, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x64,
	0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x2e, 0x4d, 0x61, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x4d, 0x61, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x1a, 0xa4, 0x05, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x7a, 0x0a, 0x10, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x63, 0x2e,
	0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x63, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x75,
	0x0a, 0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x66, 0x1a, 0x80, 0x03, 0x0a, 0x0f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x0f, 0x0a, 0x07, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x0c, 0x0a, 0x04, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x77, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x67, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x75, 0x0a, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x66, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e,
	0x4d, 0x61, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4d, 0x61, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x22, 0x30, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x49, 0x53,
	0x43, 0x41, 0x52, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x01, 0x22, 0x2c, 0x0a, 0x05, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x21, 0x0a, 0x0c, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x12, 0x11, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x1a, 0xd7, 0x04, 0x0a, 0x18,
	0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x19, 0x73, 0x75, 0x62,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x63, 0x2e,
	0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x1a, 0xb2, 0x03, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x75, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x67, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x63, 0x2e, 0x53, 0x75,
	0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x7f, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53,
	0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x03, 0x63, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x12, 0x0b, 0x0a, 0x03, 0x63, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x22, 0x49,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42,
	0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x58, 0x5f,
	0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x02, 0x22, 0x3a, 0x0a, 0x09, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0xb3, 0x0b, 0x0a, 0x0e, 0x4c, 0x32, 0x53, 0x75, 0x62, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x32,
	0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x5c, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x32, 0x53,
	0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x32, 0x53, 0x75, 0x62, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x1a, 0xba, 0x04, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x67, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x32, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f,
	0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x15, 0x0a,
	0x0d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x12, 0x13, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x38, 0x30,
	0x32, 0x31, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x13, 0x0a, 0x0b, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x38, 0x30, 0x32, 0x31, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x14,
	0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x22, 0xd6, 0x02, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x50, 0x4f, 0x50, 0x58, 0x5f, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x1b,
	0x0a, 0x17, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x55, 0x53,
	0x48, 0x31, 0x58, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x10, 0x02,
	0x12, 0x24, 0x0a, 0x20, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d,
	0x41, 0x50, 0x58, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x58, 0x5f, 0x49, 0x4e, 0x43, 0x52,
	0x45, 0x41, 0x53, 0x45, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x41, 0x50, 0x58, 0x5f, 0x31, 0x58, 0x5f, 0x54, 0x4f, 0x58,
	0x5f, 0x31, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4d, 0x41, 0x50, 0x58, 0x5f, 0x32, 0x58, 0x5f, 0x54, 0x4f, 0x58, 0x5f, 0x31,
	0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4d, 0x41, 0x50, 0x58, 0x5f, 0x31, 0x58, 0x5f, 0x54, 0x4f, 0x58, 0x5f, 0x32, 0x10, 0x06,
	0x12, 0x1c, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d,
	0x41, 0x50, 0x58, 0x5f, 0x32, 0x58, 0x5f, 0x54, 0x4f, 0x58, 0x5f, 0x32, 0x10, 0x07, 0x12, 0x1a,
	0x0a, 0x16, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x4f, 0x50,
	0x58, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x32, 0x58, 0x5f,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x41, 0x50, 0x58, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45,
	0x54, 0x58, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x10, 0x0a, 0x1a, 0x8b, 0x04,
	0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x07, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x32, 0x53, 0x75, 0x62,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x5a, 0x0a, 0x05, 0x75, 0x6e,
	0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x32, 0x53, 0x75, 0x62, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x55, 0x6e, 0x74, 0x61, 0x67, 0x12, 0x5a, 0x0a, 0x05, 0x64, 0x6f, 0x74, 0x31, 0x71, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x32, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x6f, 0x74,
	0x31, 0x51, 0x12, 0x58, 0x0a, 0x04, 0x71, 0x69, 0x6e, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e,
	0x4c, 0x32, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x51, 0x69, 0x6e, 0x71, 0x1a, 0x09, 0x0a, 0x07,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x1a, 0x07, 0x0a, 0x05, 0x55, 0x6e, 0x74, 0x61, 0x67,
	0x1a, 0x07, 0x0a, 0x05, 0x44, 0x6f, 0x74, 0x31, 0x51, 0x1a, 0x70, 0x0a, 0x04, 0x51, 0x69, 0x6e,
	0x71, 0x12, 0x5f, 0x0a, 0x05, 0x71, 0x69, 0x6e, 0x71, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e,
	0x4c, 0x32, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x51, 0x69, 0x6e, 0x71, 0x2e, 0x51, 0x69, 0x6e,
	0x71, 0x73, 0x1a, 0x07, 0x0a, 0x05, 0x51, 0x69, 0x6e, 0x71, 0x73, 0x22, 0x3e, 0x0a, 0x0b, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0xe4, 0x6e, 0x0a, 0x0e,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x46,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x89, 0x6e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x50, 0x0a, 0x07, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54,
	0x65, 0x1a, 0xae, 0x6d, 0x0a, 0x06, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x12, 0x5b, 0x0a, 0x09,
	0x74, 0x65, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65,
	0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0xc6, 0x6c, 0x0a, 0x08, 0x54, 0x65,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x74, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73,
	0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x07,
	0x72, 0x73, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54,
	0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x54, 0x65, 0x12, 0x5c,
	0x0a, 0x05, 0x73, 0x72, 0x5f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54,
	0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x72, 0x54, 0x65, 0x12, 0x62, 0x0a, 0x08,
	0x69, 0x67, 0x70, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e,
	0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x67, 0x70, 0x41, 0x74, 0x74, 0x72,
	0x1a, 0xbf, 0x03, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x68, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65,
	0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x11, 0x0a, 0x09, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x15, 0x0a, 0x0d,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x73, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x12, 0x1c, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x12, 0x17, 0x0a, 0x0f, 0x6c, 0x73, 0x70, 0x5f, 0x74, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x12, 0x18, 0x0a, 0x10, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x12, 0x11, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x22, 0x98, 0x01, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x10,
	0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x58, 0x5f, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1d,
	0x0a, 0x19, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x43, 0x52, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x04, 0x12, 0x23, 0x0a,
	0x1f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x58, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x06, 0x1a, 0xf8, 0x36, 0x0a, 0x06, 0x52, 0x73, 0x76, 0x70, 0x54, 0x65, 0x12, 0x1d, 0x0a,
	0x15, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x16, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x12, 0x11, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x16, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x75, 0x70,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x12,
	0x15, 0x0a, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x17, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x12,
	0x1a, 0x0a, 0x12, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x12, 0x18, 0x0a, 0x10, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x66, 0x72, 0x72, 0x5f, 0x69, 0x6e, 0x75, 0x73, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x12, 0x1f, 0x0a, 0x17, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x69,
	0x73, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x12, 0x1b, 0x0a, 0x13, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x70,
	0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x12, 0x14, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x73, 0x70, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x12, 0x73, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x5c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54,
	0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x54,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x71,
	0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x5b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d,
	0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52,
	0x73, 0x76, 0x70, 0x54, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x0e, 0x72, 0x65, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x12, 0x20, 0x0a, 0x18, 0x72, 0x65, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x12, 0x21, 0x0a, 0x19, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x72, 0x65, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x12, 0x71,
	0x0a, 0x0c, 0x74, 0x69, 0x65, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x5b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d,
	0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52,
	0x73, 0x76, 0x70, 0x54, 0x65, 0x2e, 0x54, 0x69, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x12, 0x78, 0x0a, 0x10, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5e, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x54, 0x65, 0x2e, 0x50, 0x61, 0x74,
	0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x12, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x5f, 0x69, 0x67,
	0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x12, 0x71, 0x0a, 0x0c, 0x70, 0x63, 0x65, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5b, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54,
	0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x54, 0x65, 0x2e, 0x50,
	0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x73, 0x0a, 0x0d, 0x65, 0x6e,
	0x74, 0x72, 0x6f, 0x70, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x5c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73,
	0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x73, 0x76, 0x70,
	0x54, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x14, 0x0a, 0x0c, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x08, 0x12, 0x1a, 0x0a, 0x12, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x70, 0x72,
	0x65, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x08, 0x12, 0x71, 0x0a, 0x0c, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x54, 0x65, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x12, 0x6e, 0x0a, 0x0a, 0x68, 0x6f, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x62, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x54, 0x65, 0x2e, 0x48, 0x6f, 0x74, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x62, 0x79, 0x12, 0x6b, 0x0a, 0x09, 0x6c, 0x73, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x54, 0x65, 0x2e, 0x4c, 0x73, 0x70, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x12, 0x66, 0x0a, 0x06, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x56, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73,
	0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x73, 0x76, 0x70,
	0x54, 0x65, 0x2e, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x12, 0x79, 0x0a, 0x10, 0x68, 0x6f, 0x74,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70,
	0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x73,
	0x76, 0x70, 0x54, 0x65, 0x2e, 0x48, 0x6f, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x77, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x62, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54,
	0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x54, 0x65, 0x2e, 0x41,
	0x75, 0x74, 0x6f, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x73, 0x12, 0x6e, 0x0a,
	0x0b, 0x62, 0x66, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6c, 0x73, 0x70, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c,
	0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x73, 0x76,
	0x70, 0x54, 0x65, 0x2e, 0x42, 0x66, 0x64, 0x46, 0x6f, 0x72, 0x4c, 0x73, 0x70, 0x1a, 0xfe, 0x06,
	0x0a, 0x0b, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x12, 0x6e, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x60, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x54, 0x65, 0x2e, 0x46, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x1b, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x12, 0x15, 0x0a, 0x0d, 0x66, 0x72, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x16, 0x0a, 0x0e, 0x73, 0x65, 0x74,
	0x75, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x12, 0x15, 0x0a, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x13, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x12, 0x13, 0x0a,
	0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x12, 0x13, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6c,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x12, 0x21, 0x0a, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x12, 0x21, 0x0a, 0x19, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x12, 0x1d, 0x0a,
	0x15, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x12, 0x87, 0x01, 0x0a,
	0x11, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x54, 0x65, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xfc, 0x01, 0x0a, 0x10, 0x42, 0x79, 0x70, 0x61, 0x73,
	0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x0d, 0x66,
	0x72, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x12, 0x16, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x15, 0x0a, 0x0d, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x12, 0x13, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x12, 0x13, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x12, 0x13, 0x0a, 0x0b, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x12, 0x21, 0x0a, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x79, 0x5f,
	0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x12, 0x21, 0x0a, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x12, 0x1d, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x22, 0x57, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x58, 0x5f, 0x42, 0x41, 0x43,
	0x4b, 0x55, 0x50, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x45,
	0x54, 0x4f, 0x55, 0x52, 0x58, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x02, 0x1a, 0x9d,
	0x02, 0x0a, 0x0a, 0x48, 0x6f, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x12, 0x0b, 0x0a,
	0x03, 0x77, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x12, 0x80, 0x01, 0x0a, 0x0e, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x68, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70,
	0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x73,
	0x76, 0x70, 0x54, 0x65, 0x2e, 0x48, 0x6f, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x2e,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x0c, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x12, 0x19, 0x0a, 0x11, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x22, 0x4e,
	0x0a, 0x0d, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x1c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x4e, 0x4f, 0x4e, 0x58, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x00, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x1a, 0xc3,
	0x06, 0x0a, 0x08, 0x4c, 0x73, 0x70, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x72, 0x0a, 0x08, 0x6c,
	0x73, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x60, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54,
	0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x54, 0x65, 0x2e, 0x4c,
	0x73, 0x70, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x4c, 0x73, 0x70, 0x50, 0x61, 0x74, 0x68, 0x1a,
	0xc2, 0x05, 0x0a, 0x07, 0x4c, 0x73, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x7c, 0x0a, 0x09, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x69,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e,
	0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x54, 0x65, 0x2e,
	0x4c, 0x73, 0x70, 0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x4c, 0x73, 0x70, 0x50, 0x61, 0x74, 0x68,
	0x2e, 0x50, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x12, 0x65, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x12, 0x11, 0x0a, 0x09, 0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x0e, 0x0a, 0x06, 0x6c, 0x73, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x7c, 0x0a, 0x09, 0x6c, 0x73, 0x70, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x69, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x54, 0x65, 0x2e, 0x4c, 0x73, 0x70,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x4c, 0x73, 0x70, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x73,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x13, 0x0a,
	0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x12, 0x13, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6e,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x12, 0x13, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x12, 0x21, 0x0a, 0x19,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x61, 0x66, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x12,
	0x21, 0x0a, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x61,
	0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x09, 0x12, 0x1d, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x22, 0x6d, 0x0a, 0x08, 0x50, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52,
	0x59, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x48, 0x4f, 0x54, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x50, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x52, 0x44, 0x49, 0x4e,
	0x41, 0x52, 0x59, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x42, 0x45, 0x53, 0x54, 0x58, 0x5f, 0x45, 0x46, 0x46, 0x4f, 0x52, 0x54, 0x10, 0x03,
	0x22, 0x52, 0x0a, 0x08, 0x4c, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x4c, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x4c, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x50, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x03, 0x1a, 0x37, 0x0a, 0x06, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x12, 0x0e,
	0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x12, 0x1d,
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x1a, 0xa7, 0x09,
	0x0a, 0x0f, 0x48, 0x6f, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x83, 0x01, 0x0a, 0x0d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6c, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x54, 0x65, 0x2e, 0x48, 0x6f, 0x74, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x11, 0x0a, 0x09, 0x77, 0x74, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x12, 0x1a, 0x0a, 0x12, 0x77, 0x74,
	0x72, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x12, 0x81, 0x01, 0x0a, 0x0c, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6b, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54,
	0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x54, 0x65, 0x2e, 0x48,
	0x6f, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x0d, 0x75,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x6c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c,
	0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x73, 0x76,
	0x70, 0x54, 0x65, 0x2e, 0x48, 0x6f, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70,
	0x12, 0x83, 0x01, 0x0a, 0x0d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x54, 0x65, 0x2e, 0x48, 0x6f, 0x74, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x0c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x58, 0x5f, 0x4c, 0x53, 0x50,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x48, 0x53, 0x42, 0x58, 0x5f, 0x4c, 0x53, 0x50, 0x10, 0x01, 0x12, 0x22, 0x0a,
	0x1e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x42, 0x45,
	0x53, 0x54, 0x58, 0x5f, 0x45, 0x46, 0x46, 0x4f, 0x52, 0x54, 0x58, 0x5f, 0x4c, 0x53, 0x50, 0x10,
	0x02, 0x22, 0x46, 0x0a, 0x0b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x58, 0x5f, 0x54, 0x4f, 0x58, 0x5f,
	0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x22, 0x9b, 0x01, 0x0a, 0x0c, 0x55, 0x73,
	0x69, 0x6e, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x73,
	0x69, 0x6e, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x45,
	0x52, 0x45, 0x4e, 0x54, 0x58, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20,
	0x55, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x41, 0x4c, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x58, 0x5f, 0x53, 0x41, 0x4d, 0x45,
	0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x70, 0x5f, 0x4e, 0x4f, 0x54, 0x58, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x10,
	0x02, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x70, 0x5f, 0x45, 0x58, 0x41, 0x43, 0x54, 0x4c, 0x59, 0x58, 0x5f, 0x53, 0x41, 0x4d, 0x45, 0x58,
	0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x03, 0x22, 0xfd, 0x01, 0x0a, 0x0c, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x46, 0x4f, 0x52, 0x43, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x58, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x44, 0x4f, 0x58, 0x5f, 0x4e, 0x4f, 0x54, 0x58, 0x5f,
	0x52, 0x45, 0x56, 0x45, 0x52, 0x54, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x58, 0x5f, 0x54,
	0x4f, 0x58, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x42, 0x46, 0x44,
	0x58, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x58,
	0x5f, 0x44, 0x45, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x46, 0x52, 0x52, 0x58, 0x5f,
	0x49, 0x4e, 0x55, 0x53, 0x45, 0x10, 0x07, 0x1a, 0xd5, 0x04, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x6f,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x73, 0x12, 0x71, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x63, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x54, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a,
	0x11, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x12, 0x1a, 0x0a, 0x12, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x12, 0x11, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x12, 0x15, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x12, 0x15,
	0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x12, 0x16, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x17, 0x0a,
	0x0f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x86, 0x01, 0x0a, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x6d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54,
	0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x54,
	0x65, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x73,
	0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x22,
	0x5d, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x6f,
	0x64, 0x65, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x4f, 0x4c,
	0x4c, 0x45, 0x43, 0x54, 0x58, 0x5f, 0x42, 0x57, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x41, 0x44, 0x4a, 0x55, 0x53, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x22, 0x3f,
	0x0a, 0x0e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x12, 0x16, 0x0a, 0x12, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x5f, 0x41, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x4f, 0x52, 0x10, 0x01, 0x1a,
	0xe0, 0x03, 0x0a, 0x09, 0x42, 0x66, 0x64, 0x46, 0x6f, 0x72, 0x4c, 0x73, 0x70, 0x12, 0x72, 0x0a,
	0x07, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x61,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e,
	0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x54, 0x65, 0x2e,
	0x42, 0x66, 0x64, 0x46, 0x6f, 0x72, 0x4c, 0x73, 0x70, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x6c, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x5e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65,
	0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x54, 0x65,
	0x2e, 0x42, 0x66, 0x64, 0x46, 0x6f, 0x72, 0x4c, 0x73, 0x70, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x17, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x17, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f,
	0x72, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x12, 0x19, 0x0a, 0x11, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x22, 0x50, 0x0a, 0x07,
	0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x22, 0x52,
	0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x6f, 0x64,
	0x65, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4f, 0x4e, 0x45, 0x58,
	0x5f, 0x41, 0x52, 0x4d, 0x58, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x58, 0x5f, 0x54, 0x4c, 0x56,
	0x10, 0x03, 0x22, 0x5d, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x53, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x46, 0x46, 0x10,
	0x02, 0x22, 0x8e, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x23,
	0x0a, 0x1f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x58, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x58, 0x5f, 0x4f, 0x4e, 0x4c,
	0x59, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x58, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x10, 0x03, 0x22, 0x9b, 0x01, 0x0a, 0x0b, 0x54, 0x69, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x69, 0x65, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x69, 0x65, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x54, 0x58, 0x5f, 0x46, 0x49, 0x4c,
	0x4c, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x69, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x4d, 0x4f, 0x53, 0x54, 0x58, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x54, 0x69, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x52,
	0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x69, 0x65, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x04,
	0x22, 0x7f, 0x0a, 0x0e, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x61, 0x74,
	0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x47, 0x50, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x61,
	0x74, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x45, 0x10,
	0x03, 0x22, 0x5f, 0x0a, 0x0b, 0x50, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x0e, 0x50, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f,
	0x4e, 0x4f, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20,
	0x50, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x4f, 0x4e, 0x4c, 0x59,
	0x58, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x58, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x10, 0x02, 0x22, 0x59, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x45, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x1a, 0x9b, 0x29,
	0x0a, 0x04, 0x53, 0x72, 0x54, 0x65, 0x12, 0x11, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x16, 0x0a, 0x0e, 0x73, 0x65, 0x74,
	0x75, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x12, 0x15, 0x0a, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x6f, 0x0a, 0x0c, 0x70, 0x63, 0x65, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x59,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e,
	0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x72, 0x54, 0x65, 0x2e, 0x50, 0x63,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x0c, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x12,
	0x13, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x12, 0x1b, 0x0a, 0x13, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f,
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x12, 0x79, 0x0a, 0x11, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5e, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x72, 0x54, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x68,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x0d,
	0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x12, 0x74, 0x0a, 0x0e, 0x72, 0x65, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x72, 0x54, 0x65, 0x2e, 0x52, 0x65, 0x6f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x0a, 0x68, 0x6f, 0x74,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54,
	0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x72, 0x54, 0x65, 0x2e, 0x48, 0x6f, 0x74,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x12, 0x69, 0x0a, 0x09, 0x6c, 0x73, 0x70, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x72, 0x54, 0x65, 0x2e, 0x4c, 0x73, 0x70, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x12, 0x77, 0x0a, 0x10, 0x68, 0x6f, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x72, 0x54, 0x65, 0x2e, 0x48, 0x6f, 0x74, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x60, 0x0a, 0x04, 0x6c,
	0x73, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x72, 0x54, 0x65, 0x2e, 0x4c, 0x73, 0x70, 0x73, 0x12, 0x6c, 0x0a,
	0x0b, 0x62, 0x66, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6c, 0x73, 0x70, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x57, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c,
	0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x72, 0x54,
	0x65, 0x2e, 0x42, 0x66, 0x64, 0x46, 0x6f, 0x72, 0x4c, 0x73, 0x70, 0x12, 0x72, 0x0a, 0x0e, 0x62,
	0x66, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70,
	0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x72,
	0x54, 0x65, 0x2e, 0x42, 0x66, 0x64, 0x46, 0x6f, 0x72, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x1a,
	0x23, 0x0a, 0x0e, 0x52, 0x65, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x11, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x1a, 0x84, 0x02, 0x0a, 0x0a, 0x48, 0x6f, 0x74, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x62, 0x79, 0x12, 0x7e, 0x0a, 0x0e, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x66, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x72, 0x54, 0x65, 0x2e, 0x48, 0x6f, 0x74, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x62, 0x79, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x69, 0x76, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x08, 0x77, 0x74, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x12, 0x14, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x22, 0x4e, 0x0a, 0x0d, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x1c,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x4f,
	0x4e, 0x58, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x1b,
	0x0a, 0x17, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x52, 0x45, 0x56, 0x45, 0x52, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x1a, 0xf5, 0x04, 0x0a, 0x08,
	0x4c, 0x73, 0x70, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x70, 0x0a, 0x08, 0x6c, 0x73, 0x70, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x72, 0x54, 0x65, 0x2e, 0x4c, 0x73, 0x70, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x2e, 0x4c, 0x73, 0x70, 0x50, 0x61, 0x74, 0x68, 0x1a, 0xf6, 0x03, 0x0a, 0x07, 0x4c,
	0x73, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x12, 0x11, 0x0a, 0x09, 0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x7a, 0x0a, 0x09, 0x6c, 0x73, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x67, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x53, 0x72, 0x54, 0x65, 0x2e, 0x4c, 0x73, 0x70, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x2e, 0x4c, 0x73, 0x70, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x0e, 0x0a, 0x06, 0x6c, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x12, 0x15, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x6c, 0x73, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x13, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x12, 0x13, 0x0a,
	0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x12, 0x13, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6e,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x12, 0x21, 0x0a, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x12, 0x21, 0x0a, 0x19, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x12, 0x21, 0x0a,
	0x19, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x61, 0x66, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x12, 0x1d, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x66, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x22,
	0x52, 0x0a, 0x08, 0x4c, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4c,
	0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x4c, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x4c, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x58, 0x5f, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x03, 0x1a, 0x9e, 0x09, 0x0a, 0x0f, 0x48, 0x6f, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0d, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x6a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65,
	0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x72, 0x54, 0x65, 0x2e, 0x48,
	0x6f, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x11, 0x0a, 0x09, 0x77,
	0x74, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x12, 0x1a,
	0x0a, 0x12, 0x77, 0x74, 0x72, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x12, 0x7f, 0x0a, 0x0c, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x69, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54,
	0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x72, 0x54, 0x65, 0x2e,
	0x48, 0x6f, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0d,
	0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x6a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70,
	0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x72,
	0x54, 0x65, 0x2e, 0x48, 0x6f, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x12,
	0x81, 0x01, 0x0a, 0x0d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x53, 0x72, 0x54, 0x65, 0x2e, 0x48, 0x6f, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x0c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x58, 0x5f, 0x4c, 0x53, 0x50, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x48, 0x53, 0x42, 0x58, 0x5f, 0x4c, 0x53, 0x50, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x42, 0x45, 0x53, 0x54, 0x58,
	0x5f, 0x45, 0x46, 0x46, 0x4f, 0x52, 0x54, 0x58, 0x5f, 0x4c, 0x53, 0x50, 0x10, 0x02, 0x22, 0x46,
	0x0a, 0x0b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x58, 0x5f, 0x54, 0x4f, 0x58, 0x5f, 0x52, 0x45, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x22, 0x9b, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x69, 0x6e, 0x67,
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x73, 0x69, 0x6e, 0x67,
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x45, 0x52, 0x45, 0x4e,
	0x54, 0x58, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x73, 0x69,
	0x6e, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41,
	0x4c, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x58, 0x5f, 0x53, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12,
	0x1d, 0x0a, 0x19, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x5f,
	0x4e, 0x4f, 0x54, 0x58, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x10, 0x02, 0x12, 0x24,
	0x0a, 0x20, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x5f, 0x45,
	0x58, 0x41, 0x43, 0x54, 0x4c, 0x59, 0x58, 0x5f, 0x53, 0x41, 0x4d, 0x45, 0x58, 0x5f, 0x50, 0x41,
	0x54, 0x48, 0x10, 0x03, 0x22, 0xfd, 0x01, 0x0a, 0x0c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x57, 0x41, 0x49,
	0x54, 0x58, 0x5f, 0x54, 0x4f, 0x58, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x58,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x44, 0x4f, 0x58, 0x5f, 0x4e, 0x4f, 0x54, 0x58,
	0x5f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x54, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x42, 0x46, 0x44, 0x58, 0x5f, 0x44,
	0x4f, 0x57, 0x4e, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x58, 0x5f, 0x44, 0x45,
	0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x46, 0x52, 0x52, 0x58, 0x5f, 0x49, 0x4e, 0x55,
	0x53, 0x45, 0x10, 0x07, 0x1a, 0xb1, 0x05, 0x0a, 0x04, 0x4c, 0x73, 0x70, 0x73, 0x12, 0x63, 0x0a,
	0x03, 0x6c, 0x73, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x72, 0x54, 0x65, 0x2e, 0x4c, 0x73, 0x70, 0x73, 0x2e, 0x4c,
	0x73, 0x70, 0x1a, 0xc3, 0x04, 0x0a, 0x03, 0x4c, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x0e, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x73, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x12, 0x15, 0x0a, 0x0d, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x73, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x12, 0x12, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x0e, 0x0a,
	0x06, 0x6c, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x6c, 0x0a,
	0x06, 0x63, 0x5f, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54,
	0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x72, 0x54, 0x65, 0x2e, 0x4c, 0x73, 0x70,
	0x73, 0x2e, 0x4c, 0x73, 0x70, 0x2e, 0x43, 0x48, 0x6f, 0x70, 0x73, 0x1a, 0xfa, 0x02, 0x0a, 0x05,
	0x43, 0x48, 0x6f, 0x70, 0x73, 0x12, 0x70, 0x0a, 0x05, 0x63, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d,
	0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53,
	0x72, 0x54, 0x65, 0x2e, 0x4c, 0x73, 0x70, 0x73, 0x2e, 0x4c, 0x73, 0x70, 0x2e, 0x43, 0x48, 0x6f,
	0x70, 0x73, 0x2e, 0x43, 0x48, 0x6f, 0x70, 0x1a, 0xfe, 0x01, 0x0a, 0x04, 0x43, 0x48, 0x6f, 0x70,
	0x12, 0x0d, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x12,
	0x7f, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x6b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70,
	0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x72,
	0x54, 0x65, 0x2e, 0x4c, 0x73, 0x70, 0x73, 0x2e, 0x4c, 0x73, 0x70, 0x2e, 0x43, 0x48, 0x6f, 0x70,
	0x73, 0x2e, 0x43, 0x48, 0x6f, 0x70, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0d, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x12,
	0x0b, 0x0a, 0x03, 0x6e, 0x61, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x22, 0x4a, 0x0a, 0x09,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42,
	0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a, 0xae, 0x04, 0x0a, 0x09, 0x42, 0x66, 0x64,
	0x46, 0x6f, 0x72, 0x4c, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x12, 0x6a, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x5c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d,
	0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53,
	0x72, 0x54, 0x65, 0x2e, 0x42, 0x66, 0x64, 0x46, 0x6f, 0x72, 0x4c, 0x73, 0x70, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x17, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x17, 0x0a, 0x0f, 0x6d,
	0x69, 0x6e, 0x5f, 0x72, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x12, 0x19, 0x0a, 0x11, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x12,
	0x0d, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x12, 0x1e,
	0x0a, 0x16, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x12, 0x70,
	0x0a, 0x07, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x5f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65,
	0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x72, 0x54, 0x65, 0x2e, 0x42,
	0x66, 0x64, 0x46, 0x6f, 0x72, 0x4c, 0x73, 0x70, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x22, 0x65, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4d,
	0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4f, 0x4e,
	0x45, 0x58, 0x5f, 0x41, 0x52, 0x4d, 0x58, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x53, 0x53, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x58, 0x5f, 0x54, 0x4c, 0x56, 0x10, 0x03, 0x22, 0x50, 0x0a, 0x07, 0x41, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x1a, 0x81, 0x04, 0x0a, 0x0c, 0x42, 0x66,
	0x64, 0x46, 0x6f, 0x72, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x12, 0x6d, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x53, 0x72, 0x54, 0x65, 0x2e, 0x42, 0x66, 0x64, 0x46, 0x6f, 0x72, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x0f, 0x6d, 0x69, 0x6e,
	0x5f, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x12, 0x17, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x78, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x19, 0x0a, 0x11, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x0d, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x12, 0x73, 0x0a, 0x07, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x62, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x53, 0x72, 0x54, 0x65, 0x2e, 0x42, 0x66, 0x64, 0x46, 0x6f, 0x72, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x4f, 0x0a, 0x04, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4f, 0x4e, 0x45, 0x58, 0x5f, 0x41, 0x52, 0x4d,
	0x58, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x53, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x03, 0x22, 0x50, 0x0a, 0x07, 0x41,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x22, 0x5f, 0x0a,
	0x0b, 0x50, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x0e,
	0x50, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x4e, 0x4f, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x50, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x63, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x58, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x58, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x02, 0x22, 0x6b,
	0x0a, 0x10, 0x50, 0x61, 0x74, 0x68, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x61, 0x74, 0x68, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x48, 0x45, 0x52, 0x49, 0x54, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x50, 0x61, 0x74, 0x68, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a,
	0x18, 0x50, 0x61, 0x74, 0x68, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x1a, 0xc4, 0x05, 0x0a, 0x07,
	0x49, 0x67, 0x70, 0x41, 0x74, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x0a, 0x61, 0x64, 0x76, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x12, 0x17, 0x0a, 0x0f, 0x61,
	0x64, 0x76, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x12, 0x11, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x74, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x63, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5d,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e,
	0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x67, 0x70, 0x41, 0x74, 0x74, 0x72,
	0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x70, 0x0a,
	0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c,
	0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x67, 0x70,
	0x41, 0x74, 0x74, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x1a,
	0xb8, 0x02, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x76,
	0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x64, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54,
	0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x49, 0x67, 0x70, 0x41, 0x74,
	0x74, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x76, 0x0a, 0x08, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x65, 0x2e, 0x54, 0x65, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x49, 0x67, 0x70, 0x41, 0x74, 0x74, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x1a, 0x1c,
	0x0a, 0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x08, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x1a, 0x1c, 0x0a, 0x08,
	0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x08, 0x61, 0x62, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x22, 0x56, 0x0a, 0x0c, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x53, 0x50, 0x46,
	0x10, 0x02, 0x1a, 0x39, 0x0a, 0x0d, 0x42, 0x64, 0x69, 0x66, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x14, 0x0a, 0x0c, 0x64, 0x61, 0x6d, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x1a, 0xb6, 0x01,
	0x0a, 0x0a, 0x41, 0x72, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x41, 0x72, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x13, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x22, 0x4f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x44, 0x55, 0x41, 0x4c, 0x58, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x58, 0x5f,
	0x53, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x1a, 0x9d, 0x01, 0x0a, 0x09, 0x4e, 0x64, 0x53, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x22, 0x38, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x55, 0x41, 0x4c, 0x58, 0x5f,
	0x53, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0x49, 0x0a, 0x03, 0x42, 0x66, 0x64, 0x12, 0x22, 0x0a,
	0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x63, 0x72,
	0x63, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x12, 0x1e, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x5f, 0x69, 0x66, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x1a, 0xa2, 0x01, 0x0a, 0x0c, 0x4e, 0x76, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x76, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x76, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2e, 0x56, 0x74, 0x65, 0x70, 0x1a, 0x4c, 0x0a, 0x04, 0x56, 0x74, 0x65, 0x70,
	0x12, 0x16, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x74, 0x65, 0x70, 0x5f,
	0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x14, 0x0a, 0x0c, 0x70, 0x68, 0x79, 0x73,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x12, 0x16,
	0x0a, 0x0e, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x1a, 0x4c, 0x0a, 0x0b, 0x4e, 0x76, 0x6f, 0x33, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x15, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x61,
	0x6e, 0x79, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x12, 0x1e, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x61,
	0x6e, 0x79, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x1a, 0xce, 0x09, 0x0a, 0x08, 0x41, 0x72, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x13, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x16, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x13,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x12, 0x19, 0x0a, 0x11, 0x61, 0x72, 0x70, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x12, 0x56,
	0x0a, 0x10, 0x61, 0x72, 0x70, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41,
	0x72, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x41, 0x72, 0x70, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x12, 0x1a, 0x0a, 0x12, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x12, 0x1a,
	0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x12, 0x1a, 0x0a, 0x12, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x12, 0x18, 0x0a, 0x10, 0x66, 0x61, 0x6b, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x12, 0x15, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x12, 0x16, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x5f,
	0x6d, 0x61, 0x63, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x12,
	0x15, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x12, 0x19, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x12, 0x4c, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x74, 0x75, 0x69, 0x74, 0x6f, 0x75, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x72, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x72, 0x61, 0x74, 0x75, 0x69, 0x74, 0x6f, 0x75, 0x73, 0x12,
	0x1b, 0x0a, 0x13, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x12, 0x1d, 0x0a, 0x15,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x64, 0x74, 0x62, 0x6c, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x12, 0x21, 0x0a, 0x19, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x1e,
	0x0a, 0x16, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x1f,
	0x0a, 0x17, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x12,
	0x19, 0x0a, 0x11, 0x66, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x1b, 0x0a, 0x13, 0x67, 0x72,
	0x61, 0x74, 0x75, 0x69, 0x74, 0x6f, 0x75, 0x73, 0x5f, 0x61, 0x72, 0x70, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x12, 0x55, 0x0a, 0x0f, 0x67, 0x72, 0x61, 0x74, 0x75,
	0x69, 0x74, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x72, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x47, 0x72, 0x61, 0x74, 0x75, 0x69, 0x74, 0x6f, 0x75, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x19,
	0x0a, 0x11, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x22, 0x96, 0x01, 0x0a, 0x0e, 0x41, 0x72,
	0x70, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x21,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x41, 0x72, 0x70, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x72, 0x70, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x53,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x58, 0x5f, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x72, 0x70, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x58, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x72, 0x70, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54,
	0x10, 0x03, 0x22, 0x80, 0x01, 0x0a, 0x0a, 0x47, 0x72, 0x61, 0x74, 0x75, 0x69, 0x74, 0x6f, 0x75,
	0x73, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x47, 0x72, 0x61, 0x74, 0x75, 0x69, 0x74, 0x6f,
	0x75, 0x73, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x72, 0x61, 0x74, 0x75, 0x69, 0x74, 0x6f,
	0x75, 0x73, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x47,
	0x72, 0x61, 0x74, 0x75, 0x69, 0x74, 0x6f, 0x75, 0x73, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x52, 0x44,
	0x49, 0x4e, 0x47, 0x58, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x47, 0x72, 0x61, 0x74, 0x75, 0x69, 0x74, 0x6f, 0x75, 0x73, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x03, 0x22, 0x6e, 0x0a, 0x0e, 0x47, 0x72, 0x61, 0x74, 0x75, 0x69, 0x74,
	0x6f, 0x75, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x47, 0x72,
	0x61, 0x74, 0x75, 0x69, 0x74, 0x6f, 0x75, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x47, 0x72, 0x61, 0x74, 0x75, 0x69, 0x74, 0x6f, 0x75, 0x73, 0x53, 0x65, 0x6e, 0x64,
	0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x72, 0x61,
	0x74, 0x75, 0x69, 0x74, 0x6f, 0x75, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x03, 0x1a, 0x93, 0x01, 0x0a, 0x04, 0x45, 0x76, 0x70, 0x6e, 0x12, 0x0c,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x16, 0x0a, 0x0e,
	0x70, 0x62, 0x62, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x12, 0x0b, 0x0a, 0x03, 0x65, 0x73, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x12, 0x10, 0x0a, 0x08, 0x65, 0x73, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x12, 0x19, 0x0a, 0x11, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x16,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x62, 0x66, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x12, 0x13, 0x0a, 0x0b, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65,
	0x5f, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x1a, 0xfe, 0x11, 0x0a, 0x03,
	0x45, 0x66, 0x6d, 0x12, 0x41, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x66, 0x6d, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xb3, 0x11, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x36, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x66, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x66,
	0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x17,
	0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x10, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x0f, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x4e, 0x0a, 0x0a, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x66, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x67, 0x0a, 0x17, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x45, 0x66, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x69,
	0x66, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x45, 0x66, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x66, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x14, 0x0a, 0x0c,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x12, 0x19, 0x0a, 0x11, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x63, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x12, 0x50, 0x0a,
	0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x66, 0x6d, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12,
	0x5d, 0x0a, 0x12, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x45, 0x66, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x4e,
	0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x66, 0x6d, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5d,
	0x0a, 0x12, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x45, 0x66, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0xf0, 0x02,
	0x0a, 0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x0c,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x48, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x66, 0x6d, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x11, 0x0a, 0x09,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x12,
	0x5b, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x66, 0x6d, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x41, 0x0a, 0x0c,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x14,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22,
	0x3f, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x15, 0x0a,
	0x11, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x5f, 0x53, 0x45, 0x43, 0x4f,
	0x4e, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x55, 0x6e,
	0x69, 0x74, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x01,
	0x1a, 0xde, 0x01, 0x0a, 0x10, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x64, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x45, 0x66, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x11, 0x0a, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x22, 0x41,
	0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x01, 0x1a, 0xd0, 0x01, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x5d, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x66, 0x6d, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x11,
	0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x22, 0x41, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x4e, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x1a, 0xde, 0x01, 0x0a, 0x10, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x64, 0x0a, 0x0c, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x66, 0x6d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12,
	0x11, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x22, 0x41, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x2c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x22, 0x29, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x22, 0x38,
	0x0a, 0x09, 0x4c, 0x69, 0x6e, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x4c,
	0x69, 0x6e, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x69, 0x6e, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x5c, 0x0a, 0x15, 0x49, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x6f, 0x6f, 0x70, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x6f,
	0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x44, 0x0a, 0x0d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x49, 0x66, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x49, 0x66, 0x44, 0x6f, 0x77, 0x6e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x66, 0x44,
	0x6f, 0x77, 0x6e, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x3b, 0x0a, 0x0f,
	0x56, 0x6c, 0x61, 0x6e, 0x69, 0x66, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x12, 0x14, 0x0a, 0x0c, 0x64, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x1a, 0xbf, 0x46, 0x0a, 0x04, 0x4c, 0x6c,
	0x64, 0x70, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xf2, 0x45, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c,
	0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x0a, 0x74, 0x6c, 0x76, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x6c, 0x76, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x1a, 0x8e, 0x03, 0x0a, 0x09, 0x54, 0x6c, 0x76,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x12, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x12, 0x18, 0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x12, 0x19, 0x0a, 0x11,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x12, 0x1a, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x12, 0x13, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x12, 0x14, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x12, 0x1f,
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x12,
	0x18, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x12, 0x18, 0x0a, 0x10, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x12, 0x14, 0x0a, 0x0c, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x12, 0x19, 0x0a, 0x11, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x12, 0x12, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x5f, 0x70, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x12, 0x18, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x12, 0x16, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x12, 0x0b, 0x0a, 0x03, 0x64, 0x64,
	0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x12, 0x10, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x1a, 0xc5, 0x3f, 0x0a, 0x09, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a,
	0xdf, 0x3e, 0x0a, 0x08, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x0d, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x72, 0x0a, 0x13, 0x63,
	0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x55, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c,
	0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x43,
	0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x12, 0x6c, 0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73,
	0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0f, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x12, 0x18, 0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x12, 0x13, 0x0a, 0x0b,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x12, 0x1a, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x12, 0x23, 0x0a,
	0x1b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x12, 0x25, 0x0a, 0x1d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x12, 0x14, 0x0a, 0x0c, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x12,
	0x14, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x12, 0x19, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x12, 0x81, 0x01, 0x0a, 0x1a, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x7d, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67,
	0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64,
	0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x1b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x6f,
	0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x12, 0x67, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x81, 0x01, 0x0a, 0x1a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64,
	0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x7d, 0x0a, 0x18, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c,
	0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x13, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x12, 0x1a, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x12, 0x17, 0x0a,
	0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x12, 0x5b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64,
	0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x12, 0x74, 0x0a, 0x13, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x73, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x73, 0x12, 0x6a,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64,
	0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x62, 0x0a, 0x0a, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x66,
	0x0a, 0x0c, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x6c, 0x76, 0x73, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x54, 0x6c, 0x76, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x25, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6c, 0x76, 0x73,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64,
	0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x6c, 0x76, 0x73, 0x12,
	0x5c, 0x0a, 0x07, 0x64, 0x64, 0x70, 0x5f, 0x74, 0x6c, 0x76, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x44, 0x64, 0x70, 0x54, 0x6c, 0x76, 0x12, 0x66, 0x0a,
	0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6c, 0x76, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x54, 0x6c, 0x76, 0x1a, 0xea, 0x08, 0x0a, 0x12, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x73, 0x12, 0x85, 0x01, 0x0a,
	0x12, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x1a, 0xcb, 0x07, 0x0a, 0x11, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x7c, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c,
	0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0e, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x12, 0x88, 0x01, 0x0a, 0x0b, 0x69, 0x66, 0x5f, 0x73,
	0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x73, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x49, 0x66, 0x53, 0x75, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0d, 0x0a, 0x05, 0x69, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x12, 0x0b, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x22, 0xfb,
	0x03, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x49, 0x50, 0x56, 0x34, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49,
	0x50, 0x56, 0x36, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x53,
	0x41, 0x50, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x44, 0x4c,
	0x43, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x42, 0x4e, 0x31,
	0x38, 0x32, 0x32, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x41,
	0x43, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x31, 0x36, 0x33,
	0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x31, 0x36, 0x34, 0x10,
	0x08, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x36, 0x39, 0x10, 0x09, 0x12,
	0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x31, 0x32, 0x31, 0x10, 0x0a, 0x12, 0x0c,
	0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x58, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x58, 0x5f, 0x54, 0x41, 0x4c, 0x4b,
	0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x45, 0x43, 0x4e, 0x45,
	0x54, 0x58, 0x5f, 0x49, 0x56, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x42, 0x41, 0x4e, 0x59, 0x41, 0x4e, 0x58, 0x5f, 0x56, 0x49, 0x4e, 0x45, 0x53, 0x10, 0x0e, 0x12,
	0x19, 0x0a, 0x15, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x31, 0x36, 0x34, 0x58, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x58, 0x5f, 0x4e, 0x53, 0x41, 0x50, 0x10, 0x0f, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x44, 0x4e, 0x53, 0x10, 0x10, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x44, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x55, 0x49, 0x53, 0x48, 0x45, 0x44, 0x58, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x11, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41,
	0x53, 0x58, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x12, 0x12, 0x18, 0x0a, 0x14, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x58, 0x54, 0x50, 0x58, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x58, 0x5f, 0x49,
	0x50, 0x56, 0x34, 0x10, 0x13, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x54,
	0x50, 0x58, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x58, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x14, 0x12,
	0x1f, 0x0a, 0x1b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x54, 0x50, 0x58, 0x5f, 0x4e, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x58, 0x5f, 0x58, 0x54, 0x50, 0x10, 0x15,
	0x12, 0x1d, 0x0a, 0x19, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x49, 0x42, 0x52, 0x45, 0x58, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x58, 0x5f, 0x57, 0x57, 0x50, 0x4e, 0x10, 0x16, 0x12,
	0x1c, 0x0a, 0x18, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x49, 0x42, 0x52, 0x45, 0x58, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x58, 0x5f, 0x57, 0x57, 0x4e, 0x10, 0x17, 0x12, 0x0d, 0x0a,
	0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x57, 0x49, 0x44, 0x10, 0x18, 0x22, 0x74, 0x0a, 0x09,
	0x49, 0x66, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x66, 0x53,
	0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x49, 0x66, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x66, 0x53, 0x75, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x49, 0x46, 0x58, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x02, 0x12, 0x22,
	0x0a, 0x1e, 0x49, 0x66, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x58, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x58, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x10, 0x03, 0x1a, 0xfa, 0x03, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56,
	0x6c, 0x61, 0x6e, 0x73, 0x12, 0x76, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x1a, 0xf0, 0x02, 0x0a,
	0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x0a, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x12, 0x7c, 0x0a, 0x09, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x69, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x78, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x67, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c,
	0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x22, 0x30, 0x0a, 0x09, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x4e, 0x4f, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x59, 0x45,
	0x53, 0x10, 0x01, 0x22, 0x2a, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x0e,
	0x0a, 0x0a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x4e, 0x4f, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x59, 0x45, 0x53, 0x10, 0x01, 0x1a,
	0x9e, 0x01, 0x0a, 0x09, 0x56, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x6a, 0x0a,
	0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x57, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x25, 0x0a, 0x08, 0x56, 0x6c, 0x61,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x12, 0x0d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x1a, 0xa9, 0x01, 0x0a, 0x0b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x6c, 0x76, 0x73,
	0x12, 0x70, 0x0a, 0x0b, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x6c, 0x76, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x54, 0x6c, 0x76, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54,
	0x6c, 0x76, 0x1a, 0x28, 0x0a, 0x0a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x6c, 0x76,
	0x12, 0x0c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x12, 0x0c,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x1a, 0xc0, 0x02, 0x0a,
	0x22, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54,
	0x6c, 0x76, 0x73, 0x12, 0xb8, 0x01, 0x0a, 0x24, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6c, 0x76, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x89, 0x01, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c,
	0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x6c, 0x76, 0x73, 0x2e, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x6c, 0x76, 0x1a, 0x5f,
	0x0a, 0x21, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x54, 0x6c, 0x76, 0x12, 0x0b, 0x0a, 0x03, 0x6f, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x12, 0x10, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x12, 0x0d, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x12, 0x0c, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x1a,
	0x5c, 0x0a, 0x06, 0x44, 0x64, 0x70, 0x54, 0x6c, 0x76, 0x12, 0x15, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x12, 0x10, 0x0a, 0x08, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x12, 0x14, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x12, 0x13, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x1a, 0x1f, 0x0a,
	0x0b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6c, 0x76, 0x12, 0x10, 0x0a, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x22, 0xb0,
	0x02, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64,
	0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x00, 0x12,
	0x27, 0x0a, 0x23, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x58, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x68, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x58, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x10, 0x02, 0x12,
	0x24, 0x0a, 0x20, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x58, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e,
	0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x41, 0x43, 0x58, 0x5f, 0x41,
	0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x68, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x58, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x05, 0x12,
	0x24, 0x0a, 0x20, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x58, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10,
	0x07, 0x22, 0x95, 0x02, 0x0a, 0x0d, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x53, 0x75, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e,
	0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x58, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x10, 0x01,
	0x12, 0x21, 0x0a, 0x1d, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x58, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e,
	0x54, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x53, 0x75, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x41, 0x43, 0x58, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x53, 0x75, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x58, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x58, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x58, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x58, 0x5f, 0x49, 0x44, 0x10, 0x06,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x07, 0x22, 0x5d, 0x0a, 0x18, 0x41, 0x75, 0x74,
	0x6f, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67,
	0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x4e, 0x4f, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x75, 0x74, 0x6f, 0x4e, 0x65,
	0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x59, 0x45, 0x53, 0x10, 0x01, 0x22, 0x57, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x6f,
	0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x4e, 0x4f, 0x10,
	0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x59, 0x45, 0x53, 0x10,
	0x01, 0x22, 0x94, 0x13, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x70,
	0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f,
	0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x41, 0x55, 0x49, 0x10, 0x01,
	0x12, 0x2c, 0x0a, 0x28, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58,
	0x5f, 0x31, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x35, 0x10, 0x02, 0x12, 0x26,
	0x0a, 0x22, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f,
	0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x46,
	0x4f, 0x49, 0x52, 0x4c, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61,
	0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58,
	0x5f, 0x32, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x54,
	0x10, 0x05, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x58, 0x5f, 0x31, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x46, 0x50, 0x10,
	0x06, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x58, 0x5f, 0x31, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x46, 0x42, 0x10, 0x07,
	0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58,
	0x5f, 0x31, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x46, 0x4c, 0x10, 0x08, 0x12,
	0x2d, 0x0a, 0x29, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44,
	0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f,
	0x31, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x33, 0x36, 0x10, 0x09, 0x12, 0x2e,
	0x0a, 0x2a, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f,
	0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31,
	0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x54, 0x48, 0x44, 0x10, 0x0a, 0x12, 0x2e,
	0x0a, 0x2a, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f,
	0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31,
	0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x54, 0x46, 0x44, 0x10, 0x0b, 0x12, 0x2f,
	0x0a, 0x2b, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f,
	0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31,
	0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x46, 0x4c, 0x48, 0x44, 0x10, 0x0c, 0x12,
	0x2f, 0x0a, 0x2b, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44,
	0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f,
	0x31, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x46, 0x4c, 0x46, 0x44, 0x10, 0x0d,
	0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58,
	0x5f, 0x31, 0x30, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x54, 0x34, 0x10, 0x0e,
	0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58,
	0x5f, 0x31, 0x30, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x54, 0x58, 0x48, 0x44,
	0x10, 0x0f, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x54, 0x58,
	0x46, 0x44, 0x10, 0x10, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f,
	0x46, 0x58, 0x48, 0x44, 0x10, 0x11, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61,
	0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45,
	0x58, 0x5f, 0x46, 0x58, 0x46, 0x44, 0x10, 0x12, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x72,
	0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41,
	0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x58, 0x5f, 0x42, 0x41,
	0x53, 0x45, 0x58, 0x5f, 0x54, 0x32, 0x48, 0x44, 0x10, 0x13, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x70,
	0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f,
	0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x58, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x54, 0x32, 0x46, 0x44, 0x10, 0x14, 0x12, 0x30, 0x0a, 0x2c,
	0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33,
	0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30,
	0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x58, 0x48, 0x44, 0x10, 0x15, 0x12, 0x30,
	0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f,
	0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31,
	0x30, 0x30, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x58, 0x46, 0x44, 0x10, 0x16,
	0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58,
	0x5f, 0x31, 0x30, 0x30, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x4c, 0x58, 0x48,
	0x44, 0x10, 0x17, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f,
	0x4c, 0x58, 0x46, 0x44, 0x10, 0x18, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61,
	0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53,
	0x45, 0x58, 0x5f, 0x53, 0x58, 0x48, 0x44, 0x10, 0x19, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x70, 0x65,
	0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d,
	0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x58, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x53, 0x58, 0x46, 0x44, 0x10, 0x1a, 0x12, 0x31, 0x0a, 0x2d,
	0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33,
	0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30,
	0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x43, 0x58, 0x48, 0x44, 0x10, 0x1b, 0x12,
	0x31, 0x0a, 0x2d, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44,
	0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f,
	0x31, 0x30, 0x30, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x43, 0x58, 0x46, 0x44,
	0x10, 0x1c, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x54,
	0x48, 0x44, 0x10, 0x1d, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58,
	0x5f, 0x54, 0x46, 0x44, 0x10, 0x1e, 0x12, 0x2f, 0x0a, 0x2b, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61,
	0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x49, 0x47, 0x58, 0x5f, 0x42, 0x41,
	0x53, 0x45, 0x58, 0x5f, 0x58, 0x10, 0x1f, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x70, 0x65, 0x72, 0x4d,
	0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55,
	0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x49, 0x47, 0x58, 0x5f, 0x42,
	0x41, 0x53, 0x45, 0x58, 0x5f, 0x4c, 0x58, 0x34, 0x10, 0x20, 0x12, 0x2f, 0x0a, 0x2b, 0x4f, 0x70,
	0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f,
	0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x49, 0x47,
	0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x52, 0x10, 0x21, 0x12, 0x30, 0x0a, 0x2c, 0x4f,
	0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58,
	0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x49,
	0x47, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x45, 0x52, 0x10, 0x22, 0x12, 0x30, 0x0a,
	0x2c, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54,
	0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30,
	0x47, 0x49, 0x47, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x4c, 0x52, 0x10, 0x23, 0x12,
	0x30, 0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44,
	0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f,
	0x31, 0x30, 0x47, 0x49, 0x47, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x53, 0x52, 0x10,
	0x24, 0x12, 0x2f, 0x0a, 0x2b, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x58, 0x5f, 0x31, 0x30, 0x47, 0x49, 0x47, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x57,
	0x10, 0x25, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x49, 0x47, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f,
	0x45, 0x57, 0x10, 0x26, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x49, 0x47, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45,
	0x58, 0x5f, 0x4c, 0x57, 0x10, 0x27, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61,
	0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x49, 0x47, 0x58, 0x5f, 0x42, 0x41,
	0x53, 0x45, 0x58, 0x5f, 0x53, 0x57, 0x10, 0x28, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x70, 0x65, 0x72,
	0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41,
	0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x34, 0x30, 0x47, 0x49, 0x47, 0x58, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x4b, 0x52, 0x34, 0x10, 0x46, 0x12, 0x31, 0x0a, 0x2d, 0x4f,
	0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58,
	0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x34, 0x30, 0x47, 0x49,
	0x47, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x43, 0x52, 0x34, 0x10, 0x47, 0x12, 0x31,
	0x0a, 0x2d, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f,
	0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x34,
	0x30, 0x47, 0x49, 0x47, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x53, 0x52, 0x34, 0x10,
	0x48, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x58, 0x5f, 0x34, 0x30, 0x47, 0x49, 0x47, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x46,
	0x52, 0x10, 0x49, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x58, 0x5f, 0x34, 0x30, 0x47, 0x49, 0x47, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58,
	0x5f, 0x4c, 0x52, 0x34, 0x10, 0x4a, 0x12, 0x33, 0x0a, 0x2f, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61,
	0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x49, 0x47, 0x58, 0x5f, 0x42,
	0x41, 0x53, 0x45, 0x58, 0x5f, 0x43, 0x52, 0x31, 0x30, 0x10, 0x4b, 0x12, 0x33, 0x0a, 0x2f, 0x4f,
	0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58,
	0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x47,
	0x49, 0x47, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x53, 0x52, 0x31, 0x30, 0x10, 0x4c,
	0x12, 0x32, 0x0a, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58,
	0x5f, 0x31, 0x30, 0x30, 0x47, 0x49, 0x47, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x58, 0x5f, 0x4c,
	0x52, 0x34, 0x10, 0x4d, 0x12, 0x32, 0x0a, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x75, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x58, 0x5f, 0x4d, 0x41, 0x55, 0x58, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x49, 0x47, 0x58, 0x5f, 0x42, 0x41, 0x53,
	0x45, 0x58, 0x5f, 0x45, 0x52, 0x34, 0x10, 0x4e, 0x22, 0x5d, 0x0a, 0x18, 0x4c, 0x69, 0x6e, 0x6b,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x4e, 0x4f, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x59, 0x45, 0x53, 0x10, 0x01, 0x22, 0x57, 0x0a, 0x16, 0x4c, 0x69, 0x6e, 0x6b, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x4e, 0x4f, 0x10, 0x00,
	0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x59, 0x45, 0x53, 0x10, 0x01,
	0x22, 0x2f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10,
	0x01, 0x22, 0x97, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x54, 0x58, 0x58, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52,
	0x58, 0x58, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x54, 0x58, 0x58, 0x5f, 0x52, 0x58, 0x10,
	0x03, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x7f, 0x0a, 0x0b, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x6c, 0x61, 0x70, 0x12, 0x10, 0x0a, 0x08, 0x73, 0x75,
	0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x0d, 0x0a, 0x05,
	0x72, 0x65, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x0f, 0x0a, 0x07, 0x63,
	0x65, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x10, 0x0a, 0x08,
	0x64, 0x65, 0x63, 0x61, 0x79, 0x5f, 0x6f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x10,
	0x0a, 0x08, 0x64, 0x65, 0x63, 0x61, 0x79, 0x5f, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x12, 0x1a, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x70,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x1a, 0x7d, 0x0a, 0x0d,
	0x54, 0x72, 0x61, 0x70, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x19, 0x0a,
	0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x19, 0x0a, 0x11, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x12, 0x1a, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x69,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x12,
	0x1a, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x1a, 0xae, 0x01, 0x0a, 0x07,
	0x44, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x4c, 0x0a, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x5f, 0x64, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x44, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x44, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x6d, 0x70, 0x69, 0x6e,
	0x67, 0x2e, 0x44, 0x61, 0x6d, 0x70, 0x1a, 0x0c, 0x0a, 0x0a, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x44, 0x61, 0x6d, 0x70, 0x1a, 0x06, 0x0a, 0x04, 0x44, 0x61, 0x6d, 0x70, 0x1a, 0x81, 0x30, 0x0a,
	0x04, 0x49, 0x70, 0x76, 0x34, 0x12, 0x42, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x70, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x5f, 0x61, 0x72, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x41, 0x72, 0x70, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x76, 0x72, 0x72, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72,
	0x72, 0x70, 0x12, 0x3a, 0x0a, 0x03, 0x72, 0x67, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x52, 0x67, 0x6d, 0x1a, 0x8b,
	0x06, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x57, 0x0a, 0x0e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x5f, 0x0a, 0x12, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x2e, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x5d, 0x0a, 0x11, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x2e, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x1a, 0x7a, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x5c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70,
	0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x1a, 0x0b, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x1a,
	0x13, 0x0a, 0x11, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x1a, 0xd5, 0x02, 0x0a, 0x10, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x72, 0x0a, 0x13, 0x6e, 0x65, 0x67,
	0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x4e, 0x65, 0x67, 0x6f, 0x74,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xcc, 0x01,
	0x0a, 0x12, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x7f, 0x0a, 0x10, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x65,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2e, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x2e, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x35, 0x0a, 0x0f, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x65, 0x67, 0x6f,
	0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x50, 0x50, 0x58,
	0x5f, 0x4e, 0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x54, 0x45, 0x10, 0x00, 0x1a, 0xe1, 0x0a, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73,
	0x12, 0x4e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x1a, 0xe0, 0x02, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x52,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x1a, 0xfe, 0x01, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0a,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0c, 0x0a, 0x04, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x12, 0x54, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x22, 0x71, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x41,
	0x49, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4e,
	0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4e, 0x45, 0x47, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x55,
	0x42, 0x10, 0x20, 0x12, 0x0e, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x48, 0x43, 0x50,
	0x10, 0x80, 0x02, 0x1a, 0x79, 0x0a, 0x08, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x12,
	0x51, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x1a, 0x1a, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0f, 0x0a,
	0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x1a, 0x8f,
	0x05, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x13, 0x0a,
	0x0b, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x12, 0x11, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x12, 0x14, 0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x12, 0x14, 0x0a, 0x0c, 0x69,
	0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x12, 0x24, 0x0a, 0x1c, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x12, 0x15, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x75, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x12, 0x17,
	0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x75, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x12, 0x15, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x6d, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x12, 0x17,
	0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x12, 0x15, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x62, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x12, 0x17,
	0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x62, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x12, 0x16, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x5f, 0x75,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x12,
	0x18, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x75, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x12, 0x16, 0x0a, 0x0e, 0x6f, 0x75, 0x74,
	0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x04, 0x12, 0x18, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f,
	0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x12, 0x16, 0x0a, 0x0e, 0x6f,
	0x75, 0x74, 0x5f, 0x62, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x04, 0x12, 0x18, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x12, 0x15, 0x0a,
	0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x04, 0x12, 0x15, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x12, 0x25, 0x0a, 0x1d, 0x6f,
	0x75, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x12, 0x15, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x12, 0x12, 0x0a, 0x0a, 0x6f, 0x75, 0x74,
	0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x12, 0x19, 0x0a,
	0x11, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x12, 0x16, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x5f,
	0x66, 0x72, 0x61, 0x67, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d,
	0x12, 0x14, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x6f, 0x6b, 0x73,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x12, 0x18, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x72,
	0x61, 0x67, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x04,
	0x1a, 0xae, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x72, 0x70, 0x73, 0x12,
	0x52, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x72, 0x70, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x72, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x41, 0x72, 0x70, 0x1a, 0x4c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x72, 0x70,
	0x12, 0x0f, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x12, 0x10, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x12, 0x0d, 0x0a, 0x05, 0x70, 0x65, 0x76, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x12, 0x0d, 0x0a, 0x05, 0x63, 0x65, 0x76, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x1a, 0x85, 0x1b, 0x0a, 0x04, 0x56, 0x72, 0x72, 0x70, 0x12, 0x45, 0x0a, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x1a, 0xb5, 0x1a, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x4a, 0x0a, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xde, 0x19, 0x0a, 0x05, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x0a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x10,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x12, 0x54, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72,
	0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x50,
	0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x16, 0x0a, 0x0e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x6b,
	0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x07, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x12, 0x1a, 0x0a, 0x12,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x12, 0x18, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x62, 0x66, 0x64, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x12, 0x15, 0x0a, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x16, 0x0a, 0x0e, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x12, 0x13, 0x0a, 0x0b, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x12, 0x5b, 0x0a, 0x0b, 0x76, 0x33, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x56, 0x33, 0x53, 0x65, 0x6e, 0x64, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72,
	0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72,
	0x72, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x12, 0x18, 0x0a, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x12, 0x5b, 0x0a, 0x0b, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x69, 0x70, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x70,
	0x73, 0x12, 0x65, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x5f, 0x62, 0x66, 0x64, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x42,
	0x66, 0x64, 0x73, 0x12, 0x5d, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x74, 0x67,
	0x72, 0x70, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x74, 0x67, 0x72,
	0x70, 0x73, 0x1a, 0x35, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x16, 0x0a,
	0x0e, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x12, 0x12, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x1a, 0x90, 0x01, 0x0a, 0x0a, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x70, 0x73, 0x12, 0x64, 0x0a, 0x0a, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x49, 0x70, 0x73, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x70, 0x1a, 0x1c,
	0x0a, 0x09, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x70, 0x12, 0x0f, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x1a, 0xf8, 0x02, 0x0a,
	0x0f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x73, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xef, 0x01, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x0f, 0x0a, 0x07, 0x69, 0x66, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x17, 0x0a, 0x0f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x12, 0x78, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x64, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x39, 0x0a, 0x09,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x52,
	0x45, 0x44, 0x55, 0x43, 0x45, 0x10, 0x01, 0x1a, 0x93, 0x06, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x42, 0x66, 0x64, 0x73, 0x12, 0x61, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x62,
	0x66, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x66, 0x64, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x66, 0x64, 0x1a, 0xa2, 0x05, 0x0a, 0x08, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x42, 0x66, 0x64, 0x12, 0x14, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x70, 0x0a, 0x0c, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x5a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72,
	0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x42, 0x66, 0x64, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x66,
	0x64, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x0f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x6c, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x58, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x66, 0x64,
	0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x66, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x72, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x5b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x42, 0x66, 0x64, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x66, 0x64, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x51, 0x0a, 0x0b,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
	0x4c, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x02, 0x22,
	0x39, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41,
	0x53, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x10, 0x01, 0x22, 0x71, 0x0a, 0x0c, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x58, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x10, 0x03, 0x1a, 0xfa, 0x02,
	0x0a, 0x0b, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x74, 0x67, 0x72, 0x70, 0x73, 0x12, 0x67, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x74, 0x67, 0x72, 0x70, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x52, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x56, 0x72,
	0x72, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x74, 0x67, 0x72, 0x70, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x4d, 0x74, 0x67, 0x72, 0x70, 0x1a, 0x81, 0x02, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x4d, 0x74, 0x67, 0x72, 0x70, 0x12, 0x1a, 0x0a, 0x12, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x12, 0x15, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x17, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x12, 0x70, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x2e, 0x56, 0x72, 0x72, 0x70, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x74, 0x67, 0x72, 0x70, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x4d, 0x74, 0x67, 0x72, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d,
	0x6f, 0x64, 0x65, 0x22, 0x35, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x49,
	0x4e, 0x4b, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x10, 0x01, 0x22, 0x91, 0x01, 0x0a, 0x12, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1d,
	0x0a, 0x19, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x44, 0x35, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x48, 0x4d, 0x41, 0x43, 0x58, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x03, 0x22, 0x59,
	0x0a, 0x0a, 0x56, 0x33, 0x53, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x56, 0x33, 0x53, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x56, 0x33, 0x58, 0x5f, 0x4f,
	0x4e, 0x4c, 0x59, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x33, 0x53, 0x65, 0x6e, 0x64, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x56, 0x32, 0x56, 0x33, 0x58, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x56, 0x33, 0x53, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x56,
	0x32, 0x58, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x22, 0x9a, 0x01, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
	0x4c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x42, 0x52,
	0x47, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x42, 0x52, 0x47,
	0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4d, 0x45, 0x4d, 0x58, 0x5f, 0x4c, 0x42, 0x52, 0x47, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4d, 0x45, 0x4d, 0x58, 0x5f, 0x4c, 0x42, 0x52, 0x47, 0x58, 0x5f, 0x4d,
	0x45, 0x4d, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x49,
	0x43, 0x41, 0x53, 0x54, 0x10, 0x07, 0x22, 0x41, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x42,
	0x41, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x05, 0x0a, 0x03, 0x52, 0x67, 0x6d,
	0x1a, 0x9e, 0x4c, 0x0a, 0x04, 0x49, 0x70, 0x76, 0x36, 0x12, 0x0c, 0x0a, 0x04, 0x6d, 0x74, 0x75,
	0x36, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x17, 0x0a, 0x0f, 0x73, 0x70, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x6d, 0x74, 0x75, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x12, 0x17, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x12, 0x42, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a,
	0x0a, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x63, 0x67, 0x61, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x43,
	0x67, 0x61, 0x73, 0x12, 0x60, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0e, 0x70, 0x70, 0x36, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x50, 0x70, 0x36, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xde, 0x01, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x57, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x7a, 0x0a, 0x0d, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5c, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x0b, 0x0a, 0x09, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0xea, 0x01, 0x0a, 0x09, 0x4e, 0x64, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x73, 0x12, 0x4f, 0x0a, 0x09, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x73, 0x2e, 0x4e, 0x64,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x1a, 0x8b, 0x01, 0x0a, 0x08, 0x4e, 0x64, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x0e, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x12, 0x12, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x12, 0x16, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x12,
	0x1a, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x66,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x11, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x12, 0x14,
	0x0a, 0x0c, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x1a, 0xc1, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0c,
	0x0a, 0x04, 0x6d, 0x74, 0x75, 0x36, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x4c, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xbe, 0x06, 0x0a, 0x09, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x49, 0x70, 0x76, 0x36, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xdc, 0x05, 0x0a,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0a, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x12, 0x15, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x54, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x49, 0x70, 0x76, 0x36, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x67, 0x0a, 0x0e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x49, 0x70, 0x76, 0x36, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x0f, 0x63, 0x6f,
	0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x12, 0x10, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x12, 0x58, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x78, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x4c, 0x4f,
	0x42, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x49,
	0x4e, 0x4b, 0x58, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x58, 0x5f,
	0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x41, 0x4e, 0x59, 0x43, 0x41, 0x53, 0x54, 0x10, 0x06, 0x22, 0x57, 0x0a, 0x0d, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x43, 0x47, 0x41, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x55, 0x49, 0x36, 0x34,
	0x10, 0x02, 0x22, 0x96, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a,
	0x19, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x49, 0x4e, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x54, 0x45, 0x4e, 0x54, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x07, 0x1a, 0xca, 0x03, 0x0a, 0x0a,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x13, 0x0a, 0x0b, 0x69, 0x6e,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x12,
	0x11, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x12, 0x14, 0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6b,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x12, 0x14, 0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x12, 0x24,
	0x0a, 0x1c, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x12, 0x15, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x75, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x12, 0x17, 0x0a, 0x0f, 0x69,
	0x6e, 0x5f, 0x75, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x12, 0x15, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x12, 0x17, 0x0a, 0x0f, 0x69,
	0x6e, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x12, 0x16, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x5f, 0x75, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x12, 0x18, 0x0a, 0x10,
	0x6f, 0x75, 0x74, 0x5f, 0x75, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x12, 0x16, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x12, 0x18,
	0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x12, 0x15, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x12,
	0x15, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x12, 0x25, 0x0a, 0x1d, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x12, 0x15, 0x0a,
	0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x04, 0x12, 0x12, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x1a, 0xda, 0x1f, 0x0a, 0x0c, 0x4e, 0x64, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0b, 0x69, 0x66, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x12, 0x4d, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x73,
	0x12, 0x56, 0x0a, 0x0b, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e,
	0x74, 0x69, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x1a, 0x94, 0x0f, 0x0a, 0x0a, 0x49, 0x66, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x15, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x16,
	0x0a, 0x0e, 0x6e, 0x75, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x16, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x64,
	0x0a, 0x0d, 0x6e, 0x73, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x66,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x4e, 0x73, 0x4d, 0x63, 0x61, 0x73, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x79, 0x6e, 0x5f,
	0x6e, 0x62, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x12, 0x13, 0x0a, 0x0b,
	0x64, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x12, 0x14, 0x0a, 0x0c, 0x6e, 0x75, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x5b, 0x0a, 0x08, 0x6e, 0x61, 0x5f, 0x67, 0x6c,
	0x65, 0x61, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x49, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x4e, 0x61, 0x47,
	0x6c, 0x65, 0x61, 0x6e, 0x12, 0x59, 0x0a, 0x07, 0x6d, 0x61, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x66,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x4d, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x57, 0x0a, 0x06, 0x6f, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x2e, 0x4f, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x62, 0x0a, 0x0c, 0x72, 0x61, 0x5f, 0x68,
	0x61, 0x6c, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x2e, 0x52, 0x61, 0x48, 0x61, 0x6c, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x12, 0x13, 0x0a, 0x0b, 0x72, 0x61, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x65, 0x0a, 0x0d, 0x72, 0x61, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x2e, 0x52, 0x61, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x66,
	0x0a, 0x0e, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x66, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x52, 0x61, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x60, 0x0a, 0x0b, 0x72, 0x61, 0x5f, 0x6d, 0x74, 0x75,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x52,
	0x61, 0x4d, 0x74, 0x75, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x13, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x12, 0x16, 0x0a,
	0x0e, 0x74, 0x73, 0x5f, 0x66, 0x75, 0x7a, 0x7a, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x16, 0x0a, 0x0e, 0x74, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x64, 0x72, 0x69, 0x66, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x10, 0x0a,
	0x08, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x12,
	0x17, 0x0a, 0x0f, 0x72, 0x73, 0x61, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6c,
	0x65, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x17, 0x0a, 0x0f, 0x72, 0x73, 0x61, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0d, 0x12, 0x12, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x6c, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x51, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x6e, 0x0a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x52, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x0c, 0x6e, 0x75, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x22, 0x36, 0x0a, 0x0b, 0x4e, 0x73, 0x4d,
	0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x73, 0x4d, 0x63,
	0x61, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x4e, 0x73, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4f, 0x4e, 0x10,
	0x01, 0x22, 0x2a, 0x0a, 0x07, 0x4e, 0x61, 0x47, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x0f, 0x0a, 0x0b,
	0x4e, 0x61, 0x47, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x4e, 0x61, 0x47, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0x27, 0x0a,
	0x06, 0x4d, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x61, 0x46, 0x6c, 0x61,
	0x67, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x61, 0x46, 0x6c, 0x61,
	0x67, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0x24, 0x0a, 0x05, 0x4f, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x0d, 0x0a, 0x09, 0x4f, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x4f, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0x33, 0x0a, 0x0a,
	0x52, 0x61, 0x48, 0x61, 0x6c, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x61,
	0x48, 0x61, 0x6c, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x52, 0x61, 0x48, 0x61, 0x6c, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4f, 0x4e, 0x10,
	0x01, 0x22, 0x54, 0x0a, 0x0c, 0x52, 0x61, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x61, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x61,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x61, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x22, 0x39, 0x0a, 0x0c, 0x52, 0x61, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x61, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x52, 0x61, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4f, 0x4e,
	0x10, 0x01, 0x22, 0x30, 0x0a, 0x09, 0x52, 0x61, 0x4d, 0x74, 0x75, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x11, 0x0a, 0x0d, 0x52, 0x61, 0x4d, 0x74, 0x75, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4f, 0x46, 0x46,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x61, 0x4d, 0x74, 0x75, 0x46, 0x6c, 0x61, 0x67, 0x5f,
	0x4f, 0x4e, 0x10, 0x01, 0x22, 0x42, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x48,
	0x6f, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0x45, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x1a,
	0x87, 0x05, 0x0a, 0x06, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x73, 0x12, 0x5d, 0x0a, 0x0b, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x48, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x73, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x66, 0x0a, 0x10, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e,
	0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x73, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x12, 0x66, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x5f, 0x0a, 0x0c, 0x61, 0x6e, 0x79,
	0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x73, 0x2e, 0x41,
	0x6e, 0x79, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x22, 0x33, 0x0a, 0x0a, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x22,
	0x3f, 0x0a, 0x0e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x4f, 0x4e, 0x10, 0x01,
	0x22, 0x3f, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x4f, 0x4e, 0x10,
	0x01, 0x22, 0x36, 0x0a, 0x0b, 0x41, 0x6e, 0x79, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x12, 0x13, 0x0a, 0x0f, 0x41, 0x6e, 0x79, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x6e, 0x79, 0x77, 0x61, 0x79, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x1a, 0xa9, 0x09, 0x0a, 0x0a, 0x41, 0x6e,
	0x74, 0x69, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x70, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e,
	0x74, 0x69, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x6c, 0x0a, 0x11, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e,
	0x74, 0x69, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x70, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x1a, 0x80, 0x03, 0x0a, 0x11, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x80,
	0x01, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x1a, 0xe7, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x77, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x69, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e,
	0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x74,
	0x69, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x22, 0x4b,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52,
	0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x41, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x41, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4e, 0x44, 0x4d, 0x49, 0x53, 0x53, 0x10, 0x04, 0x1a, 0xb7, 0x04, 0x0a, 0x0f,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12,
	0x76, 0x0a, 0x0e, 0x69, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x6e, 0x74, 0x69, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x70, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x1a, 0xab, 0x03, 0x0a, 0x0c, 0x49, 0x70, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x0d, 0x69, 0x70, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x6a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x2e, 0x49, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x96, 0x02, 0x0a,
	0x0b, 0x49, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x8a, 0x01, 0x0a,
	0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x75, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x4e, 0x64,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x74, 0x69, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x2e, 0x49, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x09, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x22, 0x58, 0x0a, 0x0a, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x53, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x41, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x53,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4e, 0x41, 0x10, 0x03, 0x1a, 0x88, 0x01, 0x0a, 0x04, 0x43, 0x67, 0x61, 0x73, 0x12, 0x3f,
	0x0a, 0x03, 0x63, 0x67, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x43, 0x67, 0x61, 0x73, 0x2e, 0x43, 0x67, 0x61, 0x1a,
	0x3f, 0x0a, 0x03, 0x43, 0x67, 0x61, 0x12, 0x13, 0x0a, 0x0b, 0x72, 0x73, 0x61, 0x6b, 0x65, 0x79,
	0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x11, 0x0a, 0x09, 0x73,
	0x65, 0x63, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x10,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x1a, 0x99, 0x17, 0x0a, 0x15, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x11, 0x68, 0x6f,
	0x70, 0x5f, 0x62, 0x79, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x70, 0x42, 0x79, 0x48, 0x6f, 0x70, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x65, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x6d, 0x0a, 0x12,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x71, 0x0a, 0x15, 0x6e,
	0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x68, 0x5f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x73, 0x1a, 0xf7,
	0x04, 0x0a, 0x0e, 0x48, 0x6f, 0x70, 0x42, 0x79, 0x48, 0x6f, 0x70, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x12, 0x6e, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x70, 0x42, 0x79, 0x48, 0x6f, 0x70,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x41, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x67, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x56, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x70, 0x42, 0x79, 0x48, 0x6f, 0x70, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xd1, 0x02, 0x0a, 0x07, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6d, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x70, 0x42, 0x79, 0x48, 0x6f, 0x70,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xd6, 0x01, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x13, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x7d, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x68, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x70, 0x42,
	0x79, 0x48, 0x6f, 0x70, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x75, 0x6c, 0x65, 0x22, 0x38, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x22, 0x38,
	0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x13, 0x0a, 0x0f,
	0x41, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x1a, 0xf2, 0x04, 0x0a, 0x0d, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x6d, 0x0a, 0x0b, 0x61, 0x6c,
	0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x58, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x41,
	0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x66, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0xcf, 0x02, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6c, 0x0a,
	0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5c, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xd5, 0x01, 0x0a, 0x06,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x7c, 0x0a, 0x0b, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x67, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x38, 0x0a, 0x0a, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x54, 0x10, 0x01, 0x22, 0x38, 0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x44, 0x45, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x1a, 0x87, 0x05,
	0x0a, 0x11, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x12, 0x71, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x41, 0x6c, 0x6c, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6a, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0xd8, 0x02, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x70,
	0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x60,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0xda, 0x01, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0b, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x12, 0x80, 0x01, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x75, 0x6c, 0x65, 0x22, 0x38, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x5f,
	0x44, 0x45, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x75, 0x6c, 0x65, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x22, 0x38, 0x0a,
	0x0a, 0x41, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x1a, 0xd2, 0x04, 0x0a, 0x12, 0x4e, 0x6f, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x73, 0x12, 0x82,
	0x01, 0x0a, 0x14, 0x6e, 0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x68,
	0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x64, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4e,
	0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x73, 0x2e, 0x4e, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x68, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x1a, 0xb6, 0x03, 0x0a, 0x11, 0x4e, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x7e, 0x0a, 0x08, 0x65, 0x78, 0x68,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x6c, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x73, 0x2e,
	0x4e, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x2e, 0x45, 0x78, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x0b, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x6f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x4e, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x68, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x73, 0x2e, 0x4e, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x68, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x22, 0x60, 0x0a, 0x07, 0x45, 0x78, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x45, 0x78, 0x68, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x78, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x2c, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x78, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x53, 0x50,
	0x10, 0x32, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x78, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x48,
	0x10, 0x33, 0x22, 0x38, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x13, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x44,
	0x45, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x75, 0x6c, 0x65, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x1a, 0x33, 0x0a, 0x0d,
	0x50, 0x70, 0x36, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x1a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x1a, 0x6e, 0x0a, 0x0d, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x49, 0x66, 0x12, 0x16, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x14, 0x0a, 0x0c, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x12, 0x14, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x12, 0x19, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x1a, 0xd2, 0x02, 0x0a, 0x09, 0x44, 0x61, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x56, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44,
	0x61, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x0d, 0x0a, 0x05, 0x72, 0x65, 0x75,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x19, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x12, 0x18, 0x0a, 0x10, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x6c, 0x69, 0x66, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x17, 0x0a,
	0x0f, 0x64, 0x61, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x17, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x12,
	0x13, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x22, 0x50, 0x0a, 0x0e, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x52, 0x45, 0x53,
	0x53, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x52, 0x45,
	0x53, 0x53, 0x45, 0x44, 0x10, 0x01, 0x1a, 0xbb, 0x07, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x44, 0x6f, 0x77, 0x6e, 0x12, 0x43, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d,
	0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x6f, 0x77, 0x6e, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x0d, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x12, 0x16, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x22, 0xb9, 0x06, 0x0a, 0x05, 0x43, 0x61, 0x75,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x42, 0x50, 0x44, 0x55,
	0x58, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x58, 0x5f, 0x44, 0x45,
	0x46, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f,
	0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x02, 0x12,
	0x21, 0x0a, 0x1d, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x45, 0x43,
	0x58, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x58, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x10, 0x41, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x53, 0x54, 0x4f, 0x52,
	0x4d, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x42, 0x12, 0x1a, 0x0a, 0x16,
	0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x58, 0x5f,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x10, 0x43, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x61, 0x75, 0x73,
	0x65, 0x5f, 0x44, 0x55, 0x41, 0x4c, 0x58, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x44,
	0x12, 0x20, 0x0a, 0x1c, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x4d, 0x41, 0x43, 0x58, 0x5f, 0x41,
	0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x58, 0x5f, 0x46, 0x4c, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47,
	0x10, 0x45, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x4e, 0x4f, 0x58, 0x5f,
	0x53, 0x54, 0x41, 0x43, 0x4b, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x46, 0x12, 0x19, 0x0a,
	0x15, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x43, 0x52, 0x43, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x49, 0x53, 0x54, 0x49, 0x43, 0x53, 0x10, 0x47, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x61, 0x75, 0x73,
	0x65, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x58, 0x5f, 0x50,
	0x4f, 0x57, 0x45, 0x52, 0x58, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x48, 0x12, 0x14, 0x0a, 0x10, 0x43,
	0x61, 0x75, 0x73, 0x65, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x58, 0x5f, 0x46, 0x4c, 0x41, 0x50, 0x10,
	0x49, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x4c, 0x32, 0x58, 0x5f, 0x4c,
	0x4f, 0x4f, 0x50, 0x58, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x52, 0x45, 0x44, 0x10, 0x4a, 0x12, 0x26,
	0x0a, 0x22, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x58, 0x5f, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x58, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x58, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x10, 0x4b, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f,
	0x53, 0x50, 0x49, 0x4e, 0x45, 0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x58, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x45, 0x44, 0x58, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x4c, 0x12, 0x1c,
	0x0a, 0x18, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x58, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x4d, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x4c, 0x45, 0x41, 0x46, 0x58, 0x5f, 0x4d, 0x53, 0x54, 0x50,
	0x10, 0x4e, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x4d, 0x58, 0x5f, 0x4c,
	0x41, 0x47, 0x10, 0x4f, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x46, 0x41,
	0x42, 0x52, 0x49, 0x43, 0x58, 0x5f, 0x55, 0x50, 0x4c, 0x49, 0x4e, 0x4b, 0x58, 0x5f, 0x54, 0x48,
	0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x50, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x61, 0x75,
	0x73, 0x65, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x10, 0x51, 0x12, 0x22, 0x0a, 0x1e,
	0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x45, 0x58, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x58, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x52,
	0x12, 0x22, 0x0a, 0x1e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x58,
	0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x58, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x53, 0x49,
	0x56, 0x45, 0x10, 0x53, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x46, 0x4f,
	0x52, 0x57, 0x41, 0x52, 0x44, 0x58, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x58, 0x5f, 0x42,
	0x55, 0x46, 0x46, 0x45, 0x52, 0x58, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x55, 0x12,
	0x2c, 0x0a, 0x28, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44,
	0x58, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x58, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x58, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x56, 0x12, 0x1f, 0x0a,
	0x1b, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x58, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x58, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x57, 0x12, 0x24,
	0x0a, 0x20, 0x43, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x4d, 0x58, 0x5f, 0x4c, 0x41, 0x47, 0x58, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x58, 0x5f, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x10, 0x58, 0x1a, 0xb5, 0x01, 0x0a, 0x0f, 0x41, 0x72, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x0f, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x47, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x72,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x0d, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x12, 0x10, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x22, 0x27, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x4f, 0x4f, 0x53, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x10, 0x01, 0x1a, 0xb6, 0x01, 0x0a,
	0x0f, 0x41, 0x72, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x5d, 0x0a, 0x10, 0x6c, 0x32, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x41, 0x72, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x2e, 0x4c, 0x32, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a,
	0x44, 0x0a, 0x0e, 0x4c, 0x32, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x19, 0x0a, 0x11, 0x6c, 0x32, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x64, 0x79, 0x6e,
	0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x12, 0x17, 0x0a, 0x0f,
	0x6c, 0x32, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x1a, 0xd4, 0x01, 0x0a, 0x03, 0x4e, 0x76, 0x65, 0x12, 0x45, 0x0a,
	0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x76, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x1a, 0x85, 0x01, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x74, 0x65,
	0x70, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x18, 0x0a, 0x10, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x12, 0x14, 0x0a, 0x0c, 0x70, 0x68, 0x79, 0x73, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x12, 0x16, 0x0a, 0x0e, 0x62, 0x79,
	0x70, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x12, 0x18, 0x0a, 0x10, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x74, 0x65,
	0x70, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x1a, 0xb8, 0x13, 0x0a,
	0x12, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x12, 0x66, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x52, 0x0a, 0x08, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x12,
	0x61, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x63, 0x0a, 0x11, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x14, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x79, 0x0a, 0x1d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44,
	0x68, 0x63, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x6c, 0x0a, 0x16,
	0x6f, 0x70, 0x74, 0x38, 0x32, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x38, 0x32, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x1a, 0xfe, 0x02, 0x0a, 0x08, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x12, 0x1d, 0x0a, 0x15, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x12, 0x1e, 0x0a, 0x16, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x12, 0x1e, 0x0a, 0x16, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x12, 0x1c, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x12, 0x6d, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x51, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x38, 0x32, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x1e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x22, 0x5e, 0x0a, 0x10, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x27, 0x0a, 0x23, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x49, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x45, 0x4c,
	0x46, 0x58, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x1a, 0xdd, 0x01, 0x0a, 0x0f,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x6d, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68,
	0x63, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x5b,
	0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x0f, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x12, 0x0e, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x12, 0x13, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x14, 0x0a, 0x0c, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x1a, 0xe5, 0x01, 0x0a, 0x10,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x70, 0x0a, 0x0f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x1a, 0x5f, 0x0a, 0x0e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x12, 0x13, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x14, 0x0a, 0x0c, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x12,
	0x12, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x1a, 0x3e, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x08, 0x76, 0x70, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x16, 0x0a, 0x0e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x1a, 0x9e, 0x02, 0x0a, 0x1a, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x1b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44,
	0x68, 0x63, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x6d, 0x0a, 0x18, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x0e, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x12, 0x13, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x14, 0x0a, 0x0c, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x12, 0x16, 0x0a, 0x0e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x1a, 0xa8, 0x03, 0x0a, 0x14, 0x4f, 0x70, 0x74, 0x38, 0x32, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x12, 0x7f, 0x0a,
	0x15, 0x6f, 0x70, 0x74, 0x38, 0x32, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x38, 0x32, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x38, 0x32,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x1a, 0x8e,
	0x02, 0x0a, 0x13, 0x4f, 0x70, 0x74, 0x38, 0x32, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x19, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x12, 0x8b, 0x01, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x70, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x38, 0x32, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x38,
	0x32, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x2e,
	0x53, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x12, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x22, 0x3a, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x75, 0x62, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x58, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x00, 0x22,
	0x66, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x24, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x10, 0x00, 0x12, 0x27,
	0x0a, 0x23, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x58, 0x5f, 0x41,
	0x4c, 0x57, 0x41, 0x59, 0x53, 0x10, 0x01, 0x1a, 0x89, 0x07, 0x0a, 0x0b, 0x44, 0x68, 0x63, 0x70,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x66, 0x12, 0x11, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x12, 0x5f, 0x0a, 0x13, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68,
	0x63, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x66, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4b, 0x0a, 0x08, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x66, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x12, 0x5a, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x49, 0x66, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x1a, 0x98, 0x02, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38,
	0x32, 0x12, 0x1c, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x12,
	0x66, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x66, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x1e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x22,
	0x5e, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x5f, 0x53, 0x45, 0x4c, 0x46, 0x58, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x1a,
	0xd9, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x66, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x5e, 0x0a, 0x0d, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0f, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x11, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x12, 0x13, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x14, 0x0a, 0x0c, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x22, 0x66, 0x0a, 0x11, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x28, 0x0a, 0x24, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x58, 0x5f, 0x41, 0x4c, 0x57, 0x41, 0x59,
	0x53, 0x10, 0x01, 0x1a, 0xf1, 0x07, 0x0a, 0x06, 0x44, 0x68, 0x63, 0x70, 0x49, 0x66, 0x12, 0x5a,
	0x0a, 0x13, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x49, 0x66, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x55, 0x0a, 0x10, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x49,
	0x66, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x73, 0x12, 0x62, 0x0a, 0x17, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x5f, 0x69, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x49, 0x66, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x85, 0x02, 0x0a, 0x11, 0x44, 0x68, 0x63, 0x70, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x06, 0x69,
	0x70, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x15, 0x0a, 0x0d, 0x64,
	0x73, 0x63, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x12, 0x61, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61, 0x77,
	0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x44, 0x68, 0x63, 0x70, 0x49, 0x66, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x66, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x1a, 0xae, 0x03,
	0x0a, 0x0f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x73, 0x12, 0x63, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x44, 0x68, 0x63, 0x70, 0x49, 0x66, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x1a, 0xb5, 0x02, 0x0a, 0x0e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x38, 0x32, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x71, 0x0a, 0x0f, 0x73, 0x75, 0x62,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x58, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x49, 0x66, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x53,
	0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x10,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x22, 0x95, 0x01, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x53,
	0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x1d,
	0x0a, 0x19, 0x53, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x58, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x1c, 0x0a,
	0x18, 0x53, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52,
	0x45, 0x4d, 0x4f, 0x54, 0x45, 0x58, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x53,
	0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x49, 0x52,
	0x43, 0x55, 0x49, 0x54, 0x58, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x03, 0x1a, 0x17,
	0x0a, 0x15, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x38, 0x32, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x84, 0x09, 0x0a, 0x0c, 0x44, 0x68, 0x63, 0x70,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x66, 0x12, 0x1a, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x12, 0x16, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x10, 0x0a, 0x08,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x12, 0x55,
	0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x66, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5d, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x66, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x1a, 0xbd, 0x03, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a, 0x09, 0x66, 0x73, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44,
	0x68, 0x63, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x66, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x46, 0x73, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x13, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x12, 0x12, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0f, 0x0a, 0x07, 0x69, 0x70,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x12, 0x16, 0x0a, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x12, 0x1b, 0x0a, 0x13, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x62, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x12, 0x19, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x12, 0x18, 0x0a, 0x10, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x12, 0x19, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x22, 0x91, 0x01, 0x0a, 0x08, 0x46, 0x73, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x46, 0x73, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x46, 0x73, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x45, 0x4c,
	0x45, 0x43, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x73, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x73, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x73, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x52, 0x45, 0x4e, 0x45, 0x57, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12,
	0x46, 0x73, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x45, 0x42, 0x49, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x05, 0x1a, 0xb7, 0x03, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1e, 0x0a, 0x16, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x1e, 0x0a, 0x16, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x1c, 0x0a, 0x14, 0x61, 0x63, 0x6b,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x1c, 0x0a, 0x14, 0x6e, 0x61, 0x6b, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x1a, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x12, 0x1e, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x12, 0x1c, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x12,
	0x23, 0x0a, 0x1b, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x12, 0x23, 0x0a, 0x1b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x22, 0x0a, 0x1a, 0x72, 0x65, 0x6e,
	0x65, 0x77, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x23, 0x0a,
	0x1b, 0x72, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x12, 0x1c, 0x0a, 0x14, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x12, 0x1c, 0x0a, 0x14, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x1a, 0xb5,
	0x07, 0x0a, 0x0e, 0x44, 0x68, 0x63, 0x70, 0x53, 0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x49,
	0x66, 0x12, 0x5b, 0x0a, 0x0f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x44, 0x68, 0x63, 0x70, 0x53, 0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x66, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x55,
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x53,
	0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x42, 0x69, 0x6e, 0x64, 0x73, 0x1a, 0xa2, 0x04, 0x0a, 0x0e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x12, 0x14, 0x0a, 0x0c, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x12, 0x18,
	0x0a, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x61, 0x72, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x12, 0x18, 0x0a, 0x10, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x5f, 0x61, 0x72, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x12, 0x1b, 0x0a, 0x13, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x61, 0x72, 0x70, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x12,
	0x17, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x12, 0x17, 0x0a, 0x0f, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x5f, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x12, 0x1a, 0x0a, 0x12, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x70, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x1a, 0x0a,
	0x12, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x12, 0x1d, 0x0a, 0x15, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x18, 0x0a, 0x10, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x12, 0x18, 0x0a, 0x10, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x6d, 0x61, 0x63, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x12, 0x1b, 0x0a, 0x13,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x1e, 0x0a, 0x16, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x12, 0x1e, 0x0a, 0x16, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x12, 0x21, 0x0a, 0x19, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x17, 0x0a, 0x0f,
	0x6d, 0x61, 0x78, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x1f, 0x0a, 0x17, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x12, 0x22, 0x0a, 0x1a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x1a, 0xc9, 0x01, 0x0a, 0x0b, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x64, 0x73, 0x12, 0x5f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x53, 0x6e, 0x6f, 0x6f, 0x70, 0x69,
	0x6e, 0x67, 0x49, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x64, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x64, 0x1a, 0x59, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x0a, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0f, 0x0a,
	0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x11,
	0x0a, 0x09, 0x63, 0x65, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x12, 0x13, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x1a, 0xa2, 0x09, 0x0a, 0x14, 0x44, 0x68, 0x63, 0x70, 0x76,
	0x36, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x14, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x12, 0x14, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x12, 0x19, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x12, 0x6d,
	0x0a, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x61, 0x0a,
	0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x66, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63,
	0x70, 0x76, 0x36, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x66, 0x73,
	0x12, 0x5f, 0x0a, 0x0e, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44,
	0x68, 0x63, 0x70, 0x76, 0x36, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x6a, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x67, 0x0a,
	0x13, 0x70, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f,
	0x76, 0x72, 0x72, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x50, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x56, 0x72, 0x72, 0x70, 0x1a, 0xc2, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x7e, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x76, 0x36, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a,
	0x2a, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x1a, 0xa2, 0x01, 0x0a, 0x0e,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x66, 0x73, 0x12, 0x6e,
	0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x66,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x68, 0x63,
	0x70, 0x76, 0x36, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x66, 0x73,
	0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x66, 0x1a, 0x20,
	0x0a, 0x0d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x66, 0x12,
	0x0f, 0x0a, 0x07, 0x69, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x1a, 0x48, 0x0a, 0x0d, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x14, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x12,
	0x19, 0x0a, 0x11, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x1a, 0x45, 0x0a, 0x12, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x14, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x19, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x1a, 0x28, 0x0a, 0x10, 0x50, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x56, 0x72, 0x72, 0x70, 0x12, 0x14, 0x0a, 0x0c, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x1a, 0x20, 0x0a, 0x0f, 0x49,
	0x66, 0x38, 0x30, 0x32, 0x31, 0x50, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x1a, 0x2c, 0x0a,
	0x17, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x44, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x49, 0x66, 0x12, 0x11, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x1a, 0xda, 0x01, 0x0a, 0x0f,
	0x46, 0x72, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x59, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x46, 0x72, 0x45,
	0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6c, 0x0a, 0x0d, 0x45, 0x6e,
	0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x20, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x49, 0x45, 0x54, 0x46, 0x10, 0x13, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x4f, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x14, 0x1a, 0x36, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0c, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x13, 0x0a, 0x0b, 0x64,
	0x6f, 0x77, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x1a, 0xdc, 0x09, 0x0a, 0x12, 0x4e, 0x76, 0x6f, 0x33, 0x56, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x66, 0x0a, 0x13, 0x6e, 0x76, 0x6f, 0x33, 0x5f,
	0x76, 0x74, 0x65, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x76, 0x6f, 0x33, 0x56,
	0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x4e, 0x76,
	0x6f, 0x33, 0x56, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x1a,
	0xdd, 0x08, 0x0a, 0x11, 0x4e, 0x76, 0x6f, 0x33, 0x56, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x0b, 0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x12, 0x0c, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x12, 0x5c, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e,
	0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x76, 0x6f, 0x33, 0x56, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x4e, 0x76, 0x6f, 0x33, 0x56, 0x74, 0x65, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x66,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49,
	0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x76, 0x6f, 0x33, 0x56, 0x74, 0x65, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x4e, 0x76, 0x6f, 0x33, 0x56,
	0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x4e, 0x76, 0x6f, 0x33, 0x56, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x4e, 0x76, 0x6f, 0x33, 0x56, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x81, 0x05, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x74, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f,
	0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x76, 0x6f,
	0x33, 0x56, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x4e, 0x76, 0x6f, 0x33, 0x56, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xfb, 0x03, 0x0a, 0x0a, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x16, 0x0a, 0x0e,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x12, 0x16, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6b, 0x74,
	0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x12, 0x19, 0x0a, 0x11,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x12, 0x1b, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x12, 0x1b, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x12, 0x18, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x12, 0x17, 0x0a, 0x0f, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x12, 0x19, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x62, 0x69, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x12,
	0x19, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x12, 0x1c, 0x0a, 0x14, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b,
	0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x12, 0x1e, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b,
	0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x12, 0x1e, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b,
	0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x12, 0x1b, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x04, 0x12, 0x1a, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x04, 0x12, 0x19, 0x0a, 0x11, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x12, 0x1b, 0x0a, 0x13,
	0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x6b, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x12, 0x1b, 0x0a, 0x13, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x22, 0x20, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x32, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d,
	0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x33, 0x10, 0x01, 0x22, 0x55, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x42, 0x49, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x1a,
	0xf5, 0x09, 0x0a, 0x0f, 0x49, 0x66, 0x49, 0x63, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x73, 0x12, 0x5d, 0x0a, 0x10, 0x69, 0x66, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x49, 0x66, 0x49, 0x63, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x73, 0x2e, 0x49, 0x66, 0x49, 0x63, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x1a, 0x82, 0x09, 0x0a, 0x0e, 0x49, 0x66, 0x49, 0x63, 0x6d, 0x70, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x5a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x66, 0x49, 0x63,
	0x6d, 0x70, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x73, 0x2e, 0x49, 0x66, 0x49, 0x63,
	0x6d, 0x70, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5f, 0x0a, 0x09, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66,
	0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x66, 0x49, 0x63, 0x6d,
	0x70, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x73, 0x2e, 0x49, 0x66, 0x49, 0x63, 0x6d,
	0x70, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x11, 0x0a, 0x09, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x11, 0x0a, 0x09, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x6d, 0x0a, 0x10, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x53, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e,
	0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x66, 0x49, 0x63, 0x6d, 0x70, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x73, 0x2e, 0x49, 0x66, 0x49, 0x63, 0x6d, 0x70, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x45, 0x43, 0x45,
	0x49, 0x56, 0x45, 0x58, 0x5f, 0x50, 0x4b, 0x54, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x58, 0x5f, 0x50, 0x4b, 0x54, 0x10, 0x01,
	0x22, 0x98, 0x05, 0x0a, 0x08, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x16, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x58, 0x5f,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x63, 0x6d,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x49, 0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x58, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x4e, 0x45, 0x45, 0x44, 0x58,
	0x5f, 0x44, 0x46, 0x53, 0x45, 0x54, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x63, 0x6d, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x58, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x58, 0x5f, 0x54, 0x4f, 0x53, 0x58, 0x5f, 0x52, 0x45, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x63, 0x6d, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x58, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43,
	0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x63, 0x6d, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x58,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x63, 0x6d, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x58, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x49,
	0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x4e, 0x45, 0x54, 0x58, 0x5f, 0x52, 0x45, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x63, 0x6d, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x5f, 0x4e, 0x45, 0x54, 0x58, 0x5f, 0x54, 0x4f, 0x53, 0x58, 0x5f, 0x52, 0x45,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x63, 0x6d, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x4e, 0x45, 0x54, 0x58, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43,
	0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x63, 0x6d, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x58, 0x5f, 0x50,
	0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x63, 0x6d, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x58, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41,
	0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0d, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x63, 0x6d, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x58, 0x5f, 0x55,
	0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0e, 0x12, 0x20, 0x0a, 0x1c,
	0x49, 0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x53, 0x45, 0x4d,
	0x42, 0x4c, 0x59, 0x58, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x0f, 0x12, 0x1b,
	0x0a, 0x17, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x58, 0x5f, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x48, 0x10, 0x10, 0x12, 0x22, 0x0a, 0x1e, 0x49,
	0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x58, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x58, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x11, 0x12,
	0x1d, 0x0a, 0x19, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x53, 0x54, 0x41, 0x4d, 0x50, 0x58, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x12, 0x12, 0x1f,
	0x0a, 0x1b, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53,
	0x54, 0x41, 0x4d, 0x50, 0x58, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x13, 0x12,
	0x1a, 0x0a, 0x16, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x54, 0x54, 0x4c, 0x58,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x14, 0x22, 0x4a, 0x0a, 0x0f, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x83, 0x04, 0x0a, 0x10, 0x49, 0x66, 0x49, 0x70,
	0x4f, 0x70, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x73, 0x12, 0x61, 0x0a, 0x12,
	0x69, 0x66, 0x5f, 0x69, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x66, 0x49, 0x70, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x73, 0x2e,
	0x49, 0x66, 0x49, 0x70, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x1a,
	0x8b, 0x03, 0x0a, 0x0f, 0x49, 0x66, 0x49, 0x70, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x65, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x66, 0x49, 0x70, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x73, 0x2e,
	0x49, 0x66, 0x49, 0x70, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5c, 0x0a, 0x06, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x49, 0x66, 0x49, 0x70, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x73, 0x2e, 0x49, 0x66, 0x49, 0x70, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x22, 0x81, 0x01, 0x0a, 0x0a, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x58, 0x5f, 0x41, 0x4c, 0x45,
	0x52, 0x54, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x58, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x58, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x02,
	0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x03, 0x22, 0x2f, 0x0a, 0x06,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x11, 0x0a,
	0x0f, 0x49, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x1a, 0x29, 0x0a, 0x0e, 0x49, 0x70, 0x46, 0x77, 0x64, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x0f, 0x61, 0x63, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6f,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x22, 0x3d, 0x0a, 0x06, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x31, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x4d,
	0x41, 0x49, 0x4e, 0x58, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x53, 0x55, 0x42, 0x58, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x01, 0x22, 0xb2, 0x0b, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x45,
	0x52, 0x4e, 0x45, 0x54, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47,
	0x49, 0x47, 0x41, 0x42, 0x49, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x58, 0x5f, 0x54, 0x52,
	0x55, 0x4e, 0x4b, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50,
	0x58, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x58, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x4e, 0x45, 0x54, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x45,
	0x52, 0x49, 0x41, 0x4c, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50,
	0x4f, 0x53, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x50, 0x4f,
	0x53, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x54, 0x4d, 0x10,
	0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x49,
	0x46, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x10, 0x12, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42,
	0x41, 0x43, 0x4b, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f,
	0x31, 0x30, 0x30, 0x47, 0x45, 0x10, 0x14, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4c, 0x4d, 0x50, 0x49, 0x46, 0x10, 0x15, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4d, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x16, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x58, 0x5f, 0x34, 0x30, 0x47, 0x45, 0x10, 0x17, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x45, 0x10, 0x18, 0x12, 0x10, 0x0a, 0x0c, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x47, 0x45, 0x42, 0x52, 0x49, 0x45, 0x46, 0x10, 0x19, 0x12, 0x0d, 0x0a,
	0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x10, 0x1a, 0x12, 0x14, 0x0a, 0x10,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x58, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x10, 0x1b, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x49, 0x50, 0x10, 0x1c,
	0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x31, 0x10, 0x1e, 0x12, 0x12, 0x0a,
	0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x50, 0x58, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0x1f, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4d, 0x41, 0x58, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x10, 0x20, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56,
	0x4d, 0x45, 0x54, 0x48, 0x10, 0x21, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52,
	0x45, 0x4d, 0x4f, 0x54, 0x45, 0x58, 0x5f, 0x41, 0x50, 0x10, 0x23, 0x12, 0x10, 0x0a, 0x0c, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x56, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x10, 0x24, 0x12, 0x14, 0x0a,
	0x10, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x54, 0x4d, 0x58, 0x5f, 0x42, 0x55, 0x4e, 0x44, 0x4c,
	0x45, 0x10, 0x25, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x49, 0x42, 0x45,
	0x52, 0x58, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x26, 0x12, 0x13, 0x0a, 0x0f,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4e, 0x46, 0x49, 0x4e, 0x49, 0x42, 0x41, 0x4e, 0x44, 0x10,
	0x27, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x42, 0x44, 0x49, 0x46, 0x10,
	0x28, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x31, 0x10, 0x29, 0x12, 0x0b,
	0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x33, 0x10, 0x2a, 0x12, 0x0c, 0x0a, 0x08, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x56, 0x43, 0x34, 0x10, 0x2b, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x56, 0x43, 0x31, 0x32, 0x10, 0x2c, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x58, 0x5f, 0x56, 0x45, 0x10, 0x2d, 0x12, 0x15, 0x0a,
	0x11, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x58, 0x5f, 0x50, 0x4f,
	0x52, 0x54, 0x10, 0x2e, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x33, 0x10,
	0x30, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x50, 0x10, 0x31, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x43, 0x4e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x10, 0x32, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x50,
	0x4f, 0x53, 0x58, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x33, 0x12, 0x16, 0x0a, 0x12, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x58, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x41,
	0x4c, 0x10, 0x34, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x4c, 0x4f, 0x42,
	0x41, 0x4c, 0x58, 0x5f, 0x4d, 0x50, 0x58, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x35, 0x12,
	0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x54, 0x4e, 0x10, 0x37, 0x12, 0x1b, 0x0a,
	0x17, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x58, 0x5f, 0x49, 0x4d,
	0x41, 0x58, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x39, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x50, 0x4f, 0x53, 0x58, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x3b, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x4d, 0x50, 0x4c, 0x53, 0x58, 0x5f, 0x55,
	0x4e, 0x49, 0x10, 0x3f, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x44, 0x4d,
	0x10, 0x40, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x56, 0x45, 0x10, 0x41,
	0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x43, 0x4f, 0x45, 0x58, 0x5f, 0x50,
	0x4f, 0x52, 0x54, 0x10, 0x43, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x49,
	0x52, 0x54, 0x55, 0x41, 0x4c, 0x58, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x10,
	0x44, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x43, 0x10, 0x46, 0x12, 0x11,
	0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x34, 0x58, 0x31, 0x30, 0x47, 0x45, 0x10,
	0x47, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x58, 0x31,
	0x30, 0x47, 0x45, 0x10, 0x48, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f,
	0x33, 0x58, 0x34, 0x30, 0x47, 0x45, 0x10, 0x49, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x58, 0x5f, 0x34, 0x58, 0x32, 0x35, 0x47, 0x45, 0x10, 0x4a, 0x12, 0x0f, 0x0a, 0x0b, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x32, 0x35, 0x47, 0x45, 0x10, 0x4b, 0x12, 0x0e, 0x0a, 0x0a,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4d, 0x45, 0x54, 0x48, 0x10, 0x4f, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x57, 0x58, 0x5f, 0x56, 0x45, 0x10, 0x58, 0x12, 0x13, 0x0a,
	0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x58, 0x58, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x10, 0x59, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x49, 0x46, 0x10, 0x5a, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58,
	0x47, 0x49, 0x47, 0x41, 0x42, 0x49, 0x54, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10,
	0x5b, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x32, 0x30, 0x30, 0x47,
	0x45, 0x10, 0x5c, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x49, 0x52, 0x54,
	0x55, 0x41, 0x4c, 0x58, 0x5f, 0x4f, 0x44, 0x55, 0x4b, 0x10, 0x5e, 0x12, 0x0e, 0x0a, 0x0a, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x46, 0x4c, 0x45, 0x58, 0x45, 0x10, 0x5f, 0x12, 0x15, 0x0a, 0x11, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x46, 0x4c, 0x45, 0x58, 0x45, 0x58, 0x5f, 0x32, 0x30, 0x30, 0x47, 0x45,
	0x10, 0x60, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x35, 0x30, 0x58,
	0x5f, 0x31, 0x30, 0x30, 0x47, 0x45, 0x10, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x58, 0x5f, 0x35, 0x30, 0x47, 0x45, 0x10, 0x66, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x46, 0x4c, 0x45, 0x58, 0x45, 0x58, 0x5f, 0x35, 0x30, 0x47, 0x10, 0x67, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x4c, 0x45, 0x58, 0x45, 0x58, 0x5f, 0x31, 0x30,
	0x30, 0x47, 0x10, 0x68, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x4c, 0x45,
	0x58, 0x45, 0x58, 0x5f, 0x35, 0x30, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x10, 0x69, 0x12, 0x18,
	0x0a, 0x14, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x58, 0x5f,
	0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x6b, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x58, 0x5f, 0x34, 0x30, 0x30, 0x47, 0x45, 0x10, 0x6c, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x48, 0x50, 0x47, 0x45, 0x10, 0x72, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x58, 0x5f, 0x49, 0x46, 0x10, 0x74, 0x22,
	0x37, 0x0a, 0x0b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x22, 0xb2, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x6e,
	0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x69, 0x6e,
	0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x50, 0x50, 0x50, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x69,
	0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x48, 0x44, 0x4c, 0x43, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x46, 0x52, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x41, 0x54, 0x4d, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10,
	0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x54, 0x44, 0x4d,
	0x10, 0x07, 0x12, 0x19, 0x0a, 0x14, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xff, 0x01, 0x22, 0x7f, 0x0a,
	0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x54, 0x4f, 0x50, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50,
	0x54, 0x4f, 0x4d, 0x50, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e,
	0x42, 0x4d, 0x41, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xff, 0x01, 0x22, 0x7f,
	0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4d,
	0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x58,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x58, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x10, 0x02, 0x22,
	0xd6, 0x03, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4d, 0x50, 0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x07, 0x12,
	0x1f, 0x0a, 0x1b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56,
	0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x08,
	0x12, 0x1b, 0x0a, 0x17, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x49, 0x4d, 0x41, 0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x09, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x55, 0x4e,
	0x44, 0x4c, 0x45, 0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x41, 0x42,
	0x52, 0x49, 0x43, 0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x23, 0x0a,
	0x1f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x41, 0x47,
	0x58, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x10, 0x0c, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4c, 0x41, 0x47, 0x58, 0x5f, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x58, 0x5f, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x50, 0x4f, 0x53, 0x58, 0x5f, 0x54, 0x52, 0x55, 0x4e,
	0x4b, 0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x22, 0x0a, 0x1e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x4f, 0x53, 0x58, 0x5f,
	0x54, 0x52, 0x55, 0x4e, 0x4b, 0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x10, 0x12,
	0x22, 0x0a, 0x1e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47,
	0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x58, 0x5f, 0x4d, 0x50, 0x58, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x10, 0x11, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x58, 0x5f, 0x49, 0x4d, 0x41, 0x58, 0x5f,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x12, 0x22, 0xbe, 0x07, 0x0a, 0x11, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x1c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x31, 0x51, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x51, 0x49, 0x4e, 0x51, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50,
	0x32, 0x50, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x32, 0x4d, 0x50, 0x10, 0x04,
	0x12, 0x1a, 0x0a, 0x16, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x32, 0x56, 0x45, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16,
	0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4c, 0x33, 0x56, 0x45, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x6e, 0x63, 0x61,
	0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x4c,
	0x41, 0x4e, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x4f, 0x54, 0x31, 0x51, 0x58, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x08, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x6e, 0x63, 0x61, 0x70,
	0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x54, 0x41,
	0x43, 0x4b, 0x49, 0x4e, 0x47, 0x58, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x09, 0x12,
	0x23, 0x0a, 0x1f, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x54, 0x41, 0x47, 0x58, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x10, 0x0a, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x51, 0x49, 0x4e, 0x51, 0x58, 0x5f,
	0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c,
	0x32, 0x56, 0x43, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x33, 0x56, 0x43, 0x10,
	0x0d, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x56, 0x43, 0x58, 0x5f, 0x55, 0x4e, 0x54, 0x41,
	0x47, 0x10, 0x0e, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x56, 0x43, 0x58, 0x5f, 0x44, 0x4f,
	0x54, 0x31, 0x51, 0x10, 0x0f, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x56, 0x43, 0x58, 0x5f,
	0x51, 0x49, 0x4e, 0x51, 0x10, 0x10, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x56, 0x43, 0x58,
	0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x11, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x6e,
	0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x45, 0x56, 0x43, 0x58, 0x5f, 0x44, 0x4f, 0x54, 0x31, 0x51, 0x58, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x10, 0x12, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x45, 0x54, 0x46, 0x10, 0x13,
	0x12, 0x21, 0x0a, 0x1d, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52,
	0x44, 0x10, 0x14, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x58, 0x5f, 0x56,
	0x4c, 0x41, 0x4e, 0x10, 0x15, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x58,
	0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x58, 0x5f, 0x41, 0x4e, 0x59, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x16, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x51, 0x49, 0x4e, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x10, 0x17, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x58, 0x5f, 0x47, 0x52,
	0x45, 0x58, 0x5f, 0x56, 0x45, 0x10, 0x18, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x6e, 0x63, 0x61, 0x70,
	0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x33, 0x56,
	0x45, 0x58, 0x5f, 0x54, 0x45, 0x52, 0x10, 0x19, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x6e, 0x63, 0x61,
	0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x33,
	0x56, 0x45, 0x58, 0x5f, 0x41, 0x43, 0x43, 0x10, 0x1a, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xff, 0x01, 0x22, 0x66, 0x0a, 0x12, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x25, 0x0a, 0x21, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x58, 0x5f, 0x49, 0x50, 0x56, 0x36,
	0x58, 0x5f, 0x55, 0x50, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x23, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x49, 0x50, 0x56,
	0x34, 0x58, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x58, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x80, 0x80,
	0x0c, 0x1a, 0xdb, 0x02, 0x0a, 0x06, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x12,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x1f, 0x0a, 0x17, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x73, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x12, 0x47, 0x0a, 0x14, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x47, 0x0a, 0x14, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c,
	0x69, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x43, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x1e, 0x73,
	0x75, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x1a, 0x2c, 0x0a, 0x12, 0x49, 0x70, 0x76, 0x34, 0x43, 0x6f, 0x6e, 0x66, 0x6c,
	0x69, 0x63, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x0e, 0x70, 0x72, 0x65,
	0x65, 0x6d, 0x70, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x1a, 0x2c, 0x0a, 0x12, 0x49, 0x70, 0x76, 0x36, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x65, 0x6d,
	0x70, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x1a,
	0xbe, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x6d, 0x70, 0x12, 0x0e, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x6f,
	0x66, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x12, 0x29, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69,
	0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x44, 0x61, 0x6d, 0x70, 0x2e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x1a, 0x7b, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x44, 0x61, 0x6d, 0x70,
	0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x12, 0x31, 0x0a, 0x06, 0x6d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x75,
	0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x44, 0x61, 0x6d,
	0x70, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x1a, 0x06,
	0x0a, 0x04, 0x41, 0x75, 0x74, 0x6f, 0x1a, 0x08, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x1a, 0xe3, 0x0d, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x16, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0xed, 0x0c, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x4d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e,
	0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15,
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x12, 0x12, 0x0a, 0x0a, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x12, 0x12, 0x0a, 0x0a, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x12, 0x12, 0x0a,
	0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x22, 0xb2, 0x0b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x49, 0x47, 0x41, 0x42, 0x49, 0x54, 0x45, 0x54, 0x48,
	0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x45, 0x54, 0x48, 0x58, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x50, 0x58, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x05,
	0x12, 0x1a, 0x0a, 0x16, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c,
	0x58, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x08, 0x12, 0x0c, 0x0a,
	0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x4f, 0x53, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x43, 0x50, 0x4f, 0x53, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x41, 0x54, 0x4d, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x49, 0x46, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x12, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x45, 0x10, 0x14, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x4d, 0x50, 0x49, 0x46, 0x10, 0x15, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x16,
	0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x34, 0x30, 0x47, 0x45, 0x10,
	0x17, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x31, 0x30, 0x47, 0x45,
	0x10, 0x18, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x45, 0x42, 0x52, 0x49,
	0x45, 0x46, 0x10, 0x19, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x10, 0x1a, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x54, 0x41, 0x43,
	0x4b, 0x58, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x1b, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x53, 0x49, 0x50, 0x10, 0x1c, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x45, 0x31, 0x10, 0x1e, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x50, 0x58,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x1f, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x49, 0x4d, 0x41, 0x58, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x20, 0x12, 0x0e, 0x0a,
	0x0a, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x4d, 0x45, 0x54, 0x48, 0x10, 0x21, 0x12, 0x13, 0x0a,
	0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x58, 0x5f, 0x41, 0x50,
	0x10, 0x23, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x42, 0x52, 0x49, 0x44,
	0x47, 0x45, 0x10, 0x24, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x54, 0x4d,
	0x58, 0x5f, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x10, 0x25, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x46, 0x49, 0x42, 0x45, 0x52, 0x58, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x10, 0x26, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4e, 0x46, 0x49,
	0x4e, 0x49, 0x42, 0x41, 0x4e, 0x44, 0x10, 0x27, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x56, 0x42, 0x44, 0x49, 0x46, 0x10, 0x28, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x54, 0x31, 0x10, 0x29, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x33,
	0x10, 0x2a, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x43, 0x34, 0x10, 0x2b,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x43, 0x31, 0x32, 0x10, 0x2c, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x58, 0x5f,
	0x56, 0x45, 0x10, 0x2d, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x41, 0x42,
	0x52, 0x49, 0x43, 0x58, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x2e, 0x12, 0x0b, 0x0a, 0x07, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x45, 0x33, 0x10, 0x30, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x56, 0x50, 0x10, 0x31, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x43,
	0x4e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x32, 0x12, 0x14, 0x0a, 0x10,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x50, 0x4f, 0x53, 0x58, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b,
	0x10, 0x33, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b,
	0x58, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x34, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x58, 0x5f, 0x4d, 0x50, 0x58, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x10, 0x35, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f,
	0x54, 0x4e, 0x10, 0x37, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x4c, 0x4f,
	0x42, 0x41, 0x4c, 0x58, 0x5f, 0x49, 0x4d, 0x41, 0x58, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0x39, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x4f, 0x53, 0x58, 0x5f, 0x54,
	0x52, 0x55, 0x4e, 0x4b, 0x10, 0x3b, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47,
	0x4d, 0x50, 0x4c, 0x53, 0x58, 0x5f, 0x55, 0x4e, 0x49, 0x10, 0x3f, 0x12, 0x0c, 0x0a, 0x08, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x57, 0x44, 0x4d, 0x10, 0x40, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4e, 0x56, 0x45, 0x10, 0x41, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x46, 0x43, 0x4f, 0x45, 0x58, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x43, 0x12, 0x1a, 0x0a, 0x16,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x58, 0x5f, 0x54, 0x45,
	0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x44, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x46, 0x43, 0x10, 0x46, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f,
	0x34, 0x58, 0x31, 0x30, 0x47, 0x45, 0x10, 0x47, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x58, 0x5f, 0x31, 0x30, 0x58, 0x31, 0x30, 0x47, 0x45, 0x10, 0x48, 0x12, 0x11, 0x0a, 0x0d,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x33, 0x58, 0x34, 0x30, 0x47, 0x45, 0x10, 0x49, 0x12,
	0x11, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x34, 0x58, 0x32, 0x35, 0x47, 0x45,
	0x10, 0x4a, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x32, 0x35, 0x47,
	0x45, 0x10, 0x4b, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4d, 0x45, 0x54,
	0x48, 0x10, 0x4f, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x57, 0x58, 0x5f,
	0x56, 0x45, 0x10, 0x58, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x58, 0x58,
	0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x59, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x49, 0x46, 0x10, 0x5a, 0x12, 0x19, 0x0a,
	0x15, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x47, 0x49, 0x47, 0x41, 0x42, 0x49, 0x54, 0x45, 0x54,
	0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x5b, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x58, 0x5f, 0x32, 0x30, 0x30, 0x47, 0x45, 0x10, 0x5c, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x58, 0x5f, 0x4f, 0x44, 0x55, 0x4b,
	0x10, 0x5e, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x4c, 0x45, 0x58, 0x45,
	0x10, 0x5f, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x4c, 0x45, 0x58, 0x45,
	0x58, 0x5f, 0x32, 0x30, 0x30, 0x47, 0x45, 0x10, 0x60, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x58, 0x5f, 0x35, 0x30, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x45, 0x10, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x35, 0x30, 0x47, 0x45, 0x10, 0x66,
	0x12, 0x13, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x4c, 0x45, 0x58, 0x45, 0x58, 0x5f,
	0x35, 0x30, 0x47, 0x10, 0x67, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x4c,
	0x45, 0x58, 0x45, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x10, 0x68, 0x12, 0x18, 0x0a, 0x14, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x46, 0x4c, 0x45, 0x58, 0x45, 0x58, 0x5f, 0x35, 0x30, 0x58, 0x5f, 0x31,
	0x30, 0x30, 0x47, 0x10, 0x69, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x49,
	0x52, 0x54, 0x55, 0x41, 0x4c, 0x58, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x6b, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x58, 0x5f, 0x34, 0x30, 0x30, 0x47, 0x45, 0x10,
	0x6c, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x50, 0x47, 0x45, 0x10, 0x72,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c,
	0x58, 0x5f, 0x49, 0x46, 0x10, 0x74, 0x1a, 0x84, 0x01, 0x0a, 0x12, 0x49, 0x70, 0x76, 0x34, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a,
	0x11, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x1b, 0x0a, 0x13, 0x70, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x19, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x12, 0x1b, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x1a, 0xb6, 0x04,
	0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68,
	0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xd5,
	0x03, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x12, 0x0d, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12,
	0x67, 0x0a, 0x17, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x46, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66,
	0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xbb, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x19, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x13, 0x0a,
	0x0b, 0x69, 0x6e, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x12, 0x16, 0x0a, 0x0e, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x12, 0x18, 0x0a, 0x10, 0x69, 0x6e,
	0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x12, 0x24, 0x0a, 0x1c, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f,
	0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x12, 0x14, 0x0a, 0x0c, 0x6f, 0x75,
	0x74, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x12, 0x17, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x12, 0x19, 0x0a, 0x11, 0x6f, 0x75, 0x74,
	0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x12, 0x25, 0x0a, 0x1d, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x65, 0x61, 0x6b,
	0x5f, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x12, 0x13, 0x0a, 0x0b, 0x69,
	0x6e, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x12, 0x14, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x1a, 0xfb, 0x09, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x6f, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x12,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65,
	0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x95, 0x09, 0x0a,
	0x10, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x59, 0x0a, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x5f, 0x69, 0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x22, 0x91, 0x08, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x42, 0x50, 0x44, 0x55, 0x58, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x58, 0x5f, 0x44, 0x45,
	0x46, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x58,
	0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x45, 0x43,
	0x58, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x58, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x10, 0x41, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x4d, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x10, 0x42, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x58, 0x5f,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x10, 0x43, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x55, 0x41, 0x4c, 0x58, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x41, 0x43, 0x58, 0x5f, 0x41,
	0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x58, 0x5f, 0x46, 0x4c, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47,
	0x10, 0x45, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4e, 0x4f, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x58, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x10, 0x46, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f,
	0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x52, 0x43, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x49, 0x53, 0x54, 0x49, 0x43, 0x53, 0x10, 0x47, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43,
	0x45, 0x49, 0x56, 0x45, 0x52, 0x58, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x58, 0x5f, 0x4c, 0x4f,
	0x57, 0x10, 0x48, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x58, 0x5f, 0x46, 0x4c, 0x41, 0x50, 0x10,
	0x49, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4c, 0x32, 0x58, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x58, 0x5f, 0x4f, 0x43, 0x43,
	0x55, 0x52, 0x45, 0x44, 0x10, 0x4a, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x58, 0x5f, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x58, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x58, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x10, 0x4b, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x45, 0x58, 0x5f, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x58, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x58, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x10, 0x4c, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x58, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x4d, 0x12, 0x1c, 0x0a, 0x18,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x45,
	0x41, 0x46, 0x58, 0x5f, 0x4d, 0x53, 0x54, 0x50, 0x10, 0x4e, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x58, 0x5f, 0x4c,
	0x41, 0x47, 0x10, 0x4f, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x58, 0x5f, 0x55, 0x50,
	0x4c, 0x49, 0x4e, 0x4b, 0x58, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10,
	0x50, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x10, 0x51, 0x12, 0x2a, 0x0a, 0x26,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x50,
	0x49, 0x4e, 0x45, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x58, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x52, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x58,
	0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x58, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x53, 0x49,
	0x56, 0x45, 0x10, 0x53, 0x12, 0x31, 0x0a, 0x2d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x58, 0x5f, 0x45,
	0x4e, 0x47, 0x49, 0x4e, 0x45, 0x58, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x58, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x55, 0x12, 0x34, 0x0a, 0x30, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44,
	0x58, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x58, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x58, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x56, 0x12, 0x27, 0x0a,
	0x23, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46,
	0x41, 0x42, 0x52, 0x49, 0x43, 0x58, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x58, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x57, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x58, 0x5f, 0x4c, 0x41, 0x47, 0x58, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x58, 0x5f, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x10, 0x58, 0x1a, 0x8a, 0x02, 0x0a, 0x08, 0x48, 0x64, 0x6c, 0x63, 0x44, 0x61, 0x6d,
	0x70, 0x12, 0x0e, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x12, 0x36, 0x0a, 0x0a, 0x64, 0x61, 0x6d, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x5f, 0x69,
	0x66, 0x6d, 0x2e, 0x49, 0x66, 0x6d, 0x2e, 0x48, 0x64, 0x6c, 0x63, 0x44, 0x61, 0x6d, 0x70, 0x2e,
	0x44, 0x61, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x08, 0x73, 0x75, 0x70,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x0d, 0x0a, 0x05, 0x72,
	0x65, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x19, 0x0a, 0x11, 0x6d, 0x61,
	0x78, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x17, 0x0a, 0x0f, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x6c, 0x69,
	0x66, 0x65, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x22, 0x61,
	0x0a, 0x09, 0x44, 0x61, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x13, 0x0a, 0x0f, 0x44,
	0x61, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x44, 0x61, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x4d, 0x49,
	0x44, 0x44, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x61, 0x6d, 0x70, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x48, 0x45, 0x41, 0x56, 0x59, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x44,
	0x61, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10,
	0x03,
}

var (
	file_huawei_ifm_proto_rawDescOnce sync.Once
	file_huawei_ifm_proto_rawDescData = file_huawei_ifm_proto_rawDesc
)

func file_huawei_ifm_proto_rawDescGZIP() []byte {
	file_huawei_ifm_proto_rawDescOnce.Do(func() {
		file_huawei_ifm_proto_rawDescData = protoimpl.X.CompressGZIP(file_huawei_ifm_proto_rawDescData)
	})
	return file_huawei_ifm_proto_rawDescData
}

var file_huawei_ifm_proto_enumTypes = make([]protoimpl.EnumInfo, 158)
var file_huawei_ifm_proto_msgTypes = make([]protoimpl.MessageInfo, 279)
var file_huawei_ifm_proto_goTypes = []interface{}{
	(Ifm_Interfaces_Interface_Class1)(0),                                                                           // 0: huawei_ifm.Ifm.Interfaces.Interface.Class1
	(Ifm_Interfaces_Interface_Type)(0),                                                                             // 1: huawei_ifm.Ifm.Interfaces.Interface.Type
	(Ifm_Interfaces_Interface_AdminStatus)(0),                                                                      // 2: huawei_ifm.Ifm.Interfaces.Interface.AdminStatus
	(Ifm_Interfaces_Interface_LinkProtocol)(0),                                                                     // 3: huawei_ifm.Ifm.Interfaces.Interface.LinkProtocol
	(Ifm_Interfaces_Interface_RouterType)(0),                                                                       // 4: huawei_ifm.Ifm.Interfaces.Interface.RouterType
	(Ifm_Interfaces_Interface_StatisticMode)(0),                                                                    // 5: huawei_ifm.Ifm.Interfaces.Interface.StatisticMode
	(Ifm_Interfaces_Interface_ServiceType)(0),                                                                      // 6: huawei_ifm.Ifm.Interfaces.Interface.ServiceType
	(Ifm_Interfaces_Interface_EncapsulationType)(0),                                                                // 7: huawei_ifm.Ifm.Interfaces.Interface.EncapsulationType
	(Ifm_Interfaces_Interface_NetworkLayerStatus)(0),                                                               // 8: huawei_ifm.Ifm.Interfaces.Interface.NetworkLayerStatus
	(Ifm_Interfaces_Interface_Dynamic_OperStatus)(0),                                                               // 9: huawei_ifm.Ifm.Interfaces.Interface.Dynamic.OperStatus
	(Ifm_Interfaces_Interface_Dynamic_PhysicalStatus)(0),                                                           // 10: huawei_ifm.Ifm.Interfaces.Interface.Dynamic.PhysicalStatus
	(Ifm_Interfaces_Interface_Dynamic_LinkStatus)(0),                                                               // 11: huawei_ifm.Ifm.Interfaces.Interface.Dynamic.LinkStatus
	(Ifm_Interfaces_Interface_Dynamic_Ipv4Status)(0),                                                               // 12: huawei_ifm.Ifm.Interfaces.Interface.Dynamic.Ipv4Status
	(Ifm_Interfaces_Interface_Dynamic_Ipv6Status)(0),                                                               // 13: huawei_ifm.Ifm.Interfaces.Interface.Dynamic.Ipv6Status
	(Ifm_Interfaces_Interface_Dynamic_LinkQualityGrade)(0),                                                         // 14: huawei_ifm.Ifm.Interfaces.Interface.Dynamic.LinkQualityGrade
	(Ifm_Interfaces_Interface_Trunk_Type)(0),                                                                       // 15: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Type
	(Ifm_Interfaces_Interface_Trunk_WorkMode)(0),                                                                   // 16: huawei_ifm.Ifm.Interfaces.Interface.Trunk.WorkMode
	(Ifm_Interfaces_Interface_Trunk_HashType)(0),                                                                   // 17: huawei_ifm.Ifm.Interfaces.Interface.Trunk.HashType
	(Ifm_Interfaces_Interface_Trunk_Members_Member_MemberState)(0),                                                 // 18: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.MemberState
	(Ifm_Interfaces_Interface_Trunk_Members_Member_Status)(0),                                                      // 19: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Status
	(Ifm_Interfaces_Interface_Trunk_Members_Member_Role)(0),                                                        // 20: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Role
	(Ifm_Interfaces_Interface_Trunk_Members_Member_LacpNegotiationMode)(0),                                         // 21: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.LacpNegotiationMode
	(Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes_Role)(0),                                    // 22: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PortAttributes.Role
	(Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_Status)(0),                          // 23: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PortNegotiateParameter.Status
	(Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter_PortType)(0),                        // 24: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PortNegotiateParameter.PortType
	(Ifm_Interfaces_Interface_Trunk_Lacp_ReceiveTimeoutType)(0),                                                    // 25: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.ReceiveTimeoutType
	(Ifm_Interfaces_Interface_Trunk_Lacp_SelectPortStd)(0),                                                         // 26: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.SelectPortStd
	(Ifm_Interfaces_Interface_Trunk_Lacp_SysmacSource)(0),                                                          // 27: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.SysmacSource
	(Ifm_Interfaces_Interface_Ethernet_MainInterface_VlanSwap)(0),                                                  // 28: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.VlanSwap
	(Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_LinkType)(0),                                      // 29: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.LinkType
	(Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup_Mode)(0),                                // 30: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.VlanGroups.VlanGroup.Mode
	(Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Action)(0),               // 31: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceMacLimit.LimitType.LimitParameters.Action
	(Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters_Alarm)(0),                // 32: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceMacLimit.LimitType.LimitParameters.Alarm
	(Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Type)(0),               // 33: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceSuppressions.SubInterfaceSuppression.Type
	(Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression_Direction)(0),          // 34: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceSuppressions.SubInterfaceSuppression.Direction
	(Ifm_Interfaces_Interface_Ethernet_L2SubInterface_LocalSwitch)(0),                                              // 35: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.LocalSwitch
	(Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction_ActionType)(0),                                    // 36: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowAction.ActionType
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes_SignalProtocol)(0),              // 37: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.CommonAttributes.SignalProtocol
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_ReserveStyle)(0),                          // 38: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.ReserveStyle
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_RecordRoute)(0),                           // 39: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.RecordRoute
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_TieBreaking)(0),                           // 40: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.TieBreaking
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PathMetricType)(0),                        // 41: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.PathMetricType
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_PceDelegate)(0),                           // 42: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.PceDelegate
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_EntropyLabel)(0),                          // 43: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.EntropyLabel
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_Mode)(0),                      // 44: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.FastReroute.Mode
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby_RevertiveMode)(0),              // 45: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.Hotstandby.RevertiveMode
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_PathType)(0),             // 46: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.LspPaths.LspPath.PathType
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath_LspState)(0),             // 47: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.LspPaths.LspPath.LspState
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchResult)(0),          // 48: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.HotstandbyState.SwitchResult
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchState)(0),           // 49: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.HotstandbyState.SwitchState
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_UsingOverlap)(0),          // 50: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.HotstandbyState.UsingOverlap
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState_SwitchReason)(0),          // 51: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.HotstandbyState.SwitchReason
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_Mode)(0),                   // 52: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.AutoBandwidths.Mode
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths_ThresholdLogic)(0),         // 53: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.AutoBandwidths.ThresholdLogic
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Ability)(0),                     // 54: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.BfdForLsp.Ability
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp_Mode)(0),                        // 55: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.BfdForLsp.Mode
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PceDelegate)(0),                             // 56: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.PceDelegate
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_PathVerification)(0),                        // 57: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.PathVerification
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby_RevertiveMode)(0),                // 58: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.Hotstandby.RevertiveMode
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath_LspState)(0),               // 59: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.LspPaths.LspPath.LspState
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchResult)(0),            // 60: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.HotstandbyState.SwitchResult
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchState)(0),             // 61: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.HotstandbyState.SwitchState
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_UsingOverlap)(0),            // 62: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.HotstandbyState.UsingOverlap
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState_SwitchReason)(0),            // 63: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.HotstandbyState.SwitchReason
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop_LabelType)(0),           // 64: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.Lsps.Lsp.CHops.CHop.LabelType
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Mode)(0),                          // 65: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.BfdForLsp.Mode
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp_Ability)(0),                       // 66: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.BfdForLsp.Ability
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Mode)(0),                       // 67: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.BfdForTunnel.Mode
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel_Ability)(0),                    // 68: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.BfdForTunnel.Ability
	(Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_ShortcutType)(0),                         // 69: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.IgpAttr.ShortcutType
	(Ifm_Interfaces_Interface_ArpSending_Type)(0),                                                                  // 70: huawei_ifm.Ifm.Interfaces.Interface.ArpSending.Type
	(Ifm_Interfaces_Interface_NdSending_Type)(0),                                                                   // 71: huawei_ifm.Ifm.Interfaces.Interface.NdSending.Type
	(Ifm_Interfaces_Interface_ArpEntry_ArpLearnStrict)(0),                                                          // 72: huawei_ifm.Ifm.Interfaces.Interface.ArpEntry.ArpLearnStrict
	(Ifm_Interfaces_Interface_ArpEntry_Gratuitous)(0),                                                              // 73: huawei_ifm.Ifm.Interfaces.Interface.ArpEntry.Gratuitous
	(Ifm_Interfaces_Interface_ArpEntry_GratuitousSend)(0),                                                          // 74: huawei_ifm.Ifm.Interfaces.Interface.ArpEntry.GratuitousSend
	(Ifm_Interfaces_Interface_Efm_Session_State)(0),                                                                // 75: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.State
	(Ifm_Interfaces_Interface_Efm_Session_Mode)(0),                                                                 // 76: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.Mode
	(Ifm_Interfaces_Interface_Efm_Session_LinkEvent)(0),                                                            // 77: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.LinkEvent
	(Ifm_Interfaces_Interface_Efm_Session_IgnoreLoopbackRequest)(0),                                                // 78: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.IgnoreLoopbackRequest
	(Ifm_Interfaces_Interface_Efm_Session_TriggerIfDown)(0),                                                        // 79: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.TriggerIfDown
	(Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_Notification)(0),                                              // 80: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFrame.Notification
	(Ifm_Interfaces_Interface_Efm_Session_ErrorFrame_PeriodUnit)(0),                                                // 81: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFrame.PeriodUnit
	(Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond_Notification)(0),                                        // 82: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFrameSecond.Notification
	(Ifm_Interfaces_Interface_Efm_Session_ErrorCode_Notification)(0),                                               // 83: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorCode.Notification
	(Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod_Notification)(0),                                        // 84: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFramePeriod.Notification
	(Ifm_Interfaces_Interface_Lldp_Session_AdminStatus)(0),                                                         // 85: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.AdminStatus
	(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ChassisIdSubType)(0),                                 // 86: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ChassisIdSubType
	(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_PortIdSubType)(0),                                    // 87: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.PortIdSubType
	(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationSupported)(0),                         // 88: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.AutoNegotiationSupported
	(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_AutoNegotiationEnabled)(0),                           // 89: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.AutoNegotiationEnabled
	(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_OperMauType)(0),                                      // 90: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.OperMauType
	(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationSupported)(0),                         // 91: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.LinkAggregationSupported
	(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_LinkAggregationEnabled)(0),                           // 92: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.LinkAggregationEnabled
	(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_Status)(0),                                           // 93: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.Status
	(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_Type)(0),        // 94: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ManagementAddresss.ManagementAddress.Type
	(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress_IfSubType)(0),   // 95: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ManagementAddresss.ManagementAddress.IfSubType
	(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Supported)(0),             // 96: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ProtocolVlans.ProtocolVlan.Supported
	(Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan_Enabled)(0),               // 97: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ProtocolVlans.ProtocolVlan.Enabled
	(Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress_NegotiationType)(0),                 // 98: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Address.NegotiateAddress.NegotiationAddress.NegotiationType
	(Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address_Type)(0),                                                // 99: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.State.Addresses.Address.Type
	(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_AuthenticationMode)(0),                                        // 100: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.AuthenticationMode
	(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_V3Sendmode)(0),                                                // 101: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.V3Sendmode
	(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Type)(0),                                                      // 102: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.Type
	(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_State)(0),                                                     // 103: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.State
	(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface_TrackMode)(0),                  // 104: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackInterfaces.TrackInterface.TrackMode
	(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionType)(0),                            // 105: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds.TrackBfd.SessionType
	(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_TrackMode)(0),                              // 106: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds.TrackBfd.TrackMode
	(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd_SessionState)(0),                           // 107: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds.TrackBfd.SessionState
	(Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp_TrackMode)(0),                          // 108: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackMtgrps.TrackMtgrp.TrackMode
	(Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Type)(0),                                                // 109: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses.Address.Type
	(Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_AlgorithmType)(0),                                       // 110: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses.Address.AlgorithmType
	(Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address_Status)(0),                                              // 111: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses.Address.Status
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NsMcastFlag)(0),                                         // 112: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.NsMcastFlag
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_NaGlean)(0),                                             // 113: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.NaGlean
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_MaFlag)(0),                                              // 114: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.MaFlag
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_OFlag)(0),                                               // 115: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.OFlag
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaHaltFlag)(0),                                          // 116: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.RaHaltFlag
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPreference)(0),                                        // 117: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.RaPreference
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaPrefixFlag)(0),                                        // 118: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.RaPrefixFlag
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_RaMtuFlag)(0),                                           // 119: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.RaMtuFlag
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_CollectHostFlag)(0),                                     // 120: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.CollectHostFlag
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty_GenerateRdEnable)(0),                                    // 121: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.GenerateRdEnable
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_RouteProxy)(0),                                              // 122: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys.RouteProxy
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InnerVlanProxy)(0),                                          // 123: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys.InnerVlanProxy
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_InterVlanProxy)(0),                                          // 124: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys.InterVlanProxy
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys_AnywayProxy)(0),                                             // 125: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys.AnywayProxy
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit_Type)(0),             // 126: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.ReceiveRateLimits.ReceiveRateLimit.Type
	(Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit_PacketType)(0), // 127: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.SourceIpReceive.IpRateLimits.IpRateLimit.PacketType
	(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_AllOptions)(0),                             // 128: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch.AllOptions
	(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option_FilterRule)(0),              // 129: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch.Options.Option.FilterRule
	(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_AllOptions)(0),                              // 130: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch.AllOptions
	(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option_FilterRule)(0),               // 131: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch.Options.Option.FilterRule
	(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_AllOptions)(0),                          // 132: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch.AllOptions
	(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option_FilterRule)(0),           // 133: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch.Options.Option.FilterRule
	(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_ExhType)(0),          // 134: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.NoOptionExhSwitchs.NoOptionExhSwitch.ExhType
	(Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch_FilterRule)(0),       // 135: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.NoOptionExhSwitchs.NoOptionExhSwitch.FilterRule
	(Ifm_Interfaces_Interface_DampState_SuppressStatus)(0),                                                         // 136: huawei_ifm.Ifm.Interfaces.Interface.DampState.SuppressStatus
	(Ifm_Interfaces_Interface_ErrorDown_Cause)(0),                                                                  // 137: huawei_ifm.Ifm.Interfaces.Interface.ErrorDown.Cause
	(Ifm_Interfaces_Interface_ArpStatusDetect_Mode)(0),                                                             // 138: huawei_ifm.Ifm.Interfaces.Interface.ArpStatusDetect.Mode
	(Ifm_Interfaces_Interface_DhcpRelayAttribute_ReplyPacketPolicy)(0),                                             // 139: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.ReplyPacketPolicy
	(Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82_SubscriberIdMode)(0),                                     // 140: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.Option82.SubscriberIdMode
	(Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific_SubOptionFormat)(0),      // 141: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.Opt82VendorSpecifics.Opt82VendorSpecific.SubOptionFormat
	(Ifm_Interfaces_Interface_DhcpRelayIf_ReplyPacketPolicy)(0),                                                    // 142: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayIf.ReplyPacketPolicy
	(Ifm_Interfaces_Interface_DhcpRelayIf_Option82_SubscriberIdMode)(0),                                            // 143: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayIf.Option82.SubscriberIdMode
	(Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting_ServerEnable)(0),                                            // 144: huawei_ifm.Ifm.Interfaces.Interface.DhcpIf.DhcpPacketSetting.ServerEnable
	(Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format_SubOptionType)(0),                              // 145: huawei_ifm.Ifm.Interfaces.Interface.DhcpIf.Option82Formats.Option82Format.SubOptionType
	(Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus_FsmState)(0),                                               // 146: huawei_ifm.Ifm.Interfaces.Interface.DhcpClientIf.ClientStatus.FsmState
	(Ifm_Interfaces_Interface_FrEncapsulation_Encapsulation)(0),                                                    // 147: huawei_ifm.Ifm.Interfaces.Interface.FrEncapsulation.Encapsulation
	(Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Mode)(0),                                        // 148: huawei_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic.Mode
	(Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Direction)(0),                                   // 149: huawei_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic.Direction
	(Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_Action)(0),                                            // 150: huawei_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys.IfIcmpSecurity.Action
	(Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_IcmpName)(0),                                          // 151: huawei_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys.IfIcmpSecurity.IcmpName
	(Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity_SwitchOperation)(0),                                   // 152: huawei_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys.IfIcmpSecurity.SwitchOperation
	(Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_OptionType)(0),                                      // 153: huawei_ifm.Ifm.Interfaces.Interface.IfIpOptSecuritys.IfIpOptSecurity.OptionType
	(Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity_Switch)(0),                                          // 154: huawei_ifm.Ifm.Interfaces.Interface.IfIpOptSecuritys.IfIpOptSecurity.Switch
	(Ifm_StaticDimensionRanges_StaticDimensionRange_Type)(0),                                                       // 155: huawei_ifm.Ifm.StaticDimensionRanges.StaticDimensionRange.Type
	(Ifm_AutoRecoveryTimes_AutoRecoveryTime_ErrorDownType)(0),                                                      // 156: huawei_ifm.Ifm.AutoRecoveryTimes.AutoRecoveryTime.ErrorDownType
	(Ifm_HdlcDamp_DampLevel)(0),                                                                                                           // 157: huawei_ifm.Ifm.HdlcDamp.DampLevel
	(*Ifm)(nil),                                                                                                                           // 158: huawei_ifm.Ifm
	(*Ifm_GlobalConfig)(nil),                                                                                                              // 159: huawei_ifm.Ifm.GlobalConfig
	(*Ifm_Interfaces)(nil),                                                                                                                // 160: huawei_ifm.Ifm.Interfaces
	(*Ifm_Global)(nil),                                                                                                                    // 161: huawei_ifm.Ifm.Global
	(*Ifm_Damp)(nil),                                                                                                                      // 162: huawei_ifm.Ifm.Damp
	(*Ifm_StaticDimensionRanges)(nil),                                                                                                     // 163: huawei_ifm.Ifm.StaticDimensionRanges
	(*Ifm_Ipv4InterfaceCount)(nil),                                                                                                        // 164: huawei_ifm.Ifm.Ipv4InterfaceCount
	(*Ifm_RemoteInterfaces)(nil),                                                                                                          // 165: huawei_ifm.Ifm.RemoteInterfaces
	(*Ifm_AutoRecoveryTimes)(nil),                                                                                                         // 166: huawei_ifm.Ifm.AutoRecoveryTimes
	(*Ifm_HdlcDamp)(nil),                                                                                                                  // 167: huawei_ifm.Ifm.HdlcDamp
	(*Ifm_Interfaces_Interface)(nil),                                                                                                      // 168: huawei_ifm.Ifm.Interfaces.Interface
	(*Ifm_Interfaces_Interface_Dynamic)(nil),                                                                                              // 169: huawei_ifm.Ifm.Interfaces.Interface.Dynamic
	(*Ifm_Interfaces_Interface_MibStatistics)(nil),                                                                                        // 170: huawei_ifm.Ifm.Interfaces.Interface.MibStatistics
	(*Ifm_Interfaces_Interface_CommonStatistics)(nil),                                                                                     // 171: huawei_ifm.Ifm.Interfaces.Interface.CommonStatistics
	(*Ifm_Interfaces_Interface_Trunk)(nil),                                                                                                // 172: huawei_ifm.Ifm.Interfaces.Interface.Trunk
	(*Ifm_Interfaces_Interface_Bas)(nil),                                                                                                  // 173: huawei_ifm.Ifm.Interfaces.Interface.Bas
	(*Ifm_Interfaces_Interface_MulticastBas)(nil),                                                                                         // 174: huawei_ifm.Ifm.Interfaces.Interface.MulticastBas
	(*Ifm_Interfaces_Interface_Vrrp)(nil),                                                                                                 // 175: huawei_ifm.Ifm.Interfaces.Interface.Vrrp
	(*Ifm_Interfaces_Interface_Rbs)(nil),                                                                                                  // 176: huawei_ifm.Ifm.Interfaces.Interface.Rbs
	(*Ifm_Interfaces_Interface_Ethernet)(nil),                                                                                             // 177: huawei_ifm.Ifm.Interfaces.Interface.Ethernet
	(*Ifm_Interfaces_Interface_TunnelProtocol)(nil),                                                                                       // 178: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol
	(*Ifm_Interfaces_Interface_BdifAttribute)(nil),                                                                                        // 179: huawei_ifm.Ifm.Interfaces.Interface.BdifAttribute
	(*Ifm_Interfaces_Interface_ArpSending)(nil),                                                                                           // 180: huawei_ifm.Ifm.Interfaces.Interface.ArpSending
	(*Ifm_Interfaces_Interface_NdSending)(nil),                                                                                            // 181: huawei_ifm.Ifm.Interfaces.Interface.NdSending
	(*Ifm_Interfaces_Interface_Bfd)(nil),                                                                                                  // 182: huawei_ifm.Ifm.Interfaces.Interface.Bfd
	(*Ifm_Interfaces_Interface_NveAttribute)(nil),                                                                                         // 183: huawei_ifm.Ifm.Interfaces.Interface.NveAttribute
	(*Ifm_Interfaces_Interface_Nvo3Gateway)(nil),                                                                                          // 184: huawei_ifm.Ifm.Interfaces.Interface.Nvo3Gateway
	(*Ifm_Interfaces_Interface_ArpEntry)(nil),                                                                                             // 185: huawei_ifm.Ifm.Interfaces.Interface.ArpEntry
	(*Ifm_Interfaces_Interface_Evpn)(nil),                                                                                                 // 186: huawei_ifm.Ifm.Interfaces.Interface.Evpn
	(*Ifm_Interfaces_Interface_Efm)(nil),                                                                                                  // 187: huawei_ifm.Ifm.Interfaces.Interface.Efm
	(*Ifm_Interfaces_Interface_VlanifAttribute)(nil),                                                                                      // 188: huawei_ifm.Ifm.Interfaces.Interface.VlanifAttribute
	(*Ifm_Interfaces_Interface_Lldp)(nil),                                                                                                 // 189: huawei_ifm.Ifm.Interfaces.Interface.Lldp
	(*Ifm_Interfaces_Interface_ControlFlap)(nil),                                                                                          // 190: huawei_ifm.Ifm.Interfaces.Interface.ControlFlap
	(*Ifm_Interfaces_Interface_TrapThreshold)(nil),                                                                                        // 191: huawei_ifm.Ifm.Interfaces.Interface.TrapThreshold
	(*Ifm_Interfaces_Interface_Damping)(nil),                                                                                              // 192: huawei_ifm.Ifm.Interfaces.Interface.Damping
	(*Ifm_Interfaces_Interface_Ipv4)(nil),                                                                                                 // 193: huawei_ifm.Ifm.Interfaces.Interface.Ipv4
	(*Ifm_Interfaces_Interface_Ipv6)(nil),                                                                                                 // 194: huawei_ifm.Ifm.Interfaces.Interface.Ipv6
	(*Ifm_Interfaces_Interface_Dhcpv6RelayIf)(nil),                                                                                        // 195: huawei_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayIf
	(*Ifm_Interfaces_Interface_DampState)(nil),                                                                                            // 196: huawei_ifm.Ifm.Interfaces.Interface.DampState
	(*Ifm_Interfaces_Interface_ErrorDown)(nil),                                                                                            // 197: huawei_ifm.Ifm.Interfaces.Interface.ErrorDown
	(*Ifm_Interfaces_Interface_ArpStatusDetect)(nil),                                                                                      // 198: huawei_ifm.Ifm.Interfaces.Interface.ArpStatusDetect
	(*Ifm_Interfaces_Interface_ArpPortSecurity)(nil),                                                                                      // 199: huawei_ifm.Ifm.Interfaces.Interface.ArpPortSecurity
	(*Ifm_Interfaces_Interface_Nve)(nil),                                                                                                  // 200: huawei_ifm.Ifm.Interfaces.Interface.Nve
	(*Ifm_Interfaces_Interface_DhcpRelayAttribute)(nil),                                                                                   // 201: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute
	(*Ifm_Interfaces_Interface_DhcpRelayIf)(nil),                                                                                          // 202: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayIf
	(*Ifm_Interfaces_Interface_DhcpIf)(nil),                                                                                               // 203: huawei_ifm.Ifm.Interfaces.Interface.DhcpIf
	(*Ifm_Interfaces_Interface_DhcpClientIf)(nil),                                                                                         // 204: huawei_ifm.Ifm.Interfaces.Interface.DhcpClientIf
	(*Ifm_Interfaces_Interface_DhcpSnoopingIf)(nil),                                                                                       // 205: huawei_ifm.Ifm.Interfaces.Interface.DhcpSnoopingIf
	(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute)(nil),                                                                                 // 206: huawei_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute
	(*Ifm_Interfaces_Interface_If8021PPriority)(nil),                                                                                      // 207: huawei_ifm.Ifm.Interfaces.Interface.If8021PPriority
	(*Ifm_Interfaces_Interface_ManagementPlaneDefendIf)(nil),                                                                              // 208: huawei_ifm.Ifm.Interfaces.Interface.ManagementPlaneDefendIf
	(*Ifm_Interfaces_Interface_FrEncapsulation)(nil),                                                                                      // 209: huawei_ifm.Ifm.Interfaces.Interface.FrEncapsulation
	(*Ifm_Interfaces_Interface_TrackMonitorGroup)(nil),                                                                                    // 210: huawei_ifm.Ifm.Interfaces.Interface.TrackMonitorGroup
	(*Ifm_Interfaces_Interface_Nvo3VtepStatistics)(nil),                                                                                   // 211: huawei_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics
	(*Ifm_Interfaces_Interface_IfIcmpSecuritys)(nil),                                                                                      // 212: huawei_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys
	(*Ifm_Interfaces_Interface_IfIpOptSecuritys)(nil),                                                                                     // 213: huawei_ifm.Ifm.Interfaces.Interface.IfIpOptSecuritys
	(*Ifm_Interfaces_Interface_IpVerifySrcAddr)(nil),                                                                                      // 214: huawei_ifm.Ifm.Interfaces.Interface.IpVerifySrcAddr
	(*Ifm_Interfaces_Interface_IpFwdBroadcast)(nil),                                                                                       // 215: huawei_ifm.Ifm.Interfaces.Interface.IpFwdBroadcast
	(*Ifm_Interfaces_Interface_Trunk_Members)(nil),                                                                                        // 216: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members
	(*Ifm_Interfaces_Interface_Trunk_Lacp)(nil),                                                                                           // 217: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Lacp
	(*Ifm_Interfaces_Interface_Trunk_Forwardings)(nil),                                                                                    // 218: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Forwardings
	(*Ifm_Interfaces_Interface_Trunk_Members_Member)(nil),                                                                                 // 219: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member
	(*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp)(nil),                                                                            // 220: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp
	(*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes)(nil),                                                             // 221: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PortAttributes
	(*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter)(nil),                                                     // 222: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PortNegotiateParameter
	(*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic)(nil),                                                               // 223: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PduStatistic
	(*Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp)(nil),                                                                                 // 224: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.TrackVrrp
	(*Ifm_Interfaces_Interface_Trunk_Lacp_MLag)(nil),                                                                                      // 225: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.MLag
	(*Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding)(nil),                                                                         // 226: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Forwardings.Forwarding
	(*Ifm_Interfaces_Interface_Bas_AccessType)(nil),                                                                                       // 227: huawei_ifm.Ifm.Interfaces.Interface.Bas.AccessType
	(*Ifm_Interfaces_Interface_Bas_AccessType_Layer2Subscriber)(nil),                                                                      // 228: huawei_ifm.Ifm.Interfaces.Interface.Bas.AccessType.Layer2Subscriber
	(*Ifm_Interfaces_Interface_MulticastBas_VlanType)(nil),                                                                                // 229: huawei_ifm.Ifm.Interfaces.Interface.MulticastBas.VlanType
	(*Ifm_Interfaces_Interface_MulticastBas_VlanType_Qinq)(nil),                                                                           // 230: huawei_ifm.Ifm.Interfaces.Interface.MulticastBas.VlanType.Qinq
	(*Ifm_Interfaces_Interface_MulticastBas_VlanType_Vlan)(nil),                                                                           // 231: huawei_ifm.Ifm.Interfaces.Interface.MulticastBas.VlanType.Vlan
	(*Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps)(nil),                                                                               // 232: huawei_ifm.Ifm.Interfaces.Interface.Vrrp.IfTrackAdminVrrps
	(*Ifm_Interfaces_Interface_Vrrp_BackupGroups)(nil),                                                                                    // 233: huawei_ifm.Ifm.Interfaces.Interface.Vrrp.BackupGroups
	(*Ifm_Interfaces_Interface_Vrrp_TrackAdmins)(nil),                                                                                     // 234: huawei_ifm.Ifm.Interfaces.Interface.Vrrp.TrackAdmins
	(*Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps_IfTrackAdminVrrp)(nil),                                                              // 235: huawei_ifm.Ifm.Interfaces.Interface.Vrrp.IfTrackAdminVrrps.IfTrackAdminVrrp
	(*Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode)(nil),                                                                  // 236: huawei_ifm.Ifm.Interfaces.Interface.Vrrp.BackupGroups.AdvertiseSendMode
	(*Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode_AllSubvlans)(nil),                                                      // 237: huawei_ifm.Ifm.Interfaces.Interface.Vrrp.BackupGroups.AdvertiseSendMode.AllSubvlans
	(*Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode_OneSubvlan)(nil),                                                       // 238: huawei_ifm.Ifm.Interfaces.Interface.Vrrp.BackupGroups.AdvertiseSendMode.OneSubvlan
	(*Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin)(nil),                                                                          // 239: huawei_ifm.Ifm.Interfaces.Interface.Vrrp.TrackAdmins.TrackAdmin
	(*Ifm_Interfaces_Interface_Rbs_BindRbp)(nil),                                                                                          // 240: huawei_ifm.Ifm.Interfaces.Interface.Rbs.BindRbp
	(*Ifm_Interfaces_Interface_Ethernet_MainInterface)(nil),                                                                               // 241: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface
	(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface)(nil),                                                                              // 242: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface
	(*Ifm_Interfaces_Interface_Ethernet_Mac)(nil),                                                                                         // 243: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac
	(*Ifm_Interfaces_Interface_Ethernet_L2SubInterface)(nil),                                                                              // 244: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface
	(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute)(nil),                                                                   // 245: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute
	(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings)(nil),                                                     // 246: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.VlanStackings
	(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_StatisticsEnableVlans)(nil),                                             // 247: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.StatisticsEnableVlans
	(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups)(nil),                                                 // 248: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.PortIsolateGroups
	(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking)(nil),                                        // 249: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.VlanStackings.VlanStacking
	(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups_PortIsolateGroup)(nil),                                // 250: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.PortIsolateGroups.PortIsolateGroup
	(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType)(nil),                                                                     // 251: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType
	(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups)(nil),                                                                   // 252: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.VlanGroups
	(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_VlanType)(nil),                                                            // 253: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.VlanType
	(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_QinqTermination)(nil),                                                     // 254: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.QinqTermination
	(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_QinqStacking)(nil),                                                        // 255: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.QinqStacking
	(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm)(nil),                                                        // 256: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.UserVlanComm
	(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_Dot1QTermination)(nil),                                                    // 257: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.Dot1QTermination
	(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanAny)(nil),                                                         // 258: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.UserVlanAny
	(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_VlanType_VlanTypeDot1Q)(nil),                                              // 259: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.VlanType.VlanTypeDot1Q
	(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon)(nil),                                         // 260: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.UserVlanComm.UserVlanCommon
	(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs)(nil),                           // 261: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.UserVlanComm.UserVlanCommon.UserVlanQinqs
	(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanDot1Q)(nil),                           // 262: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.UserVlanComm.UserVlanCommon.UserVlanDot1Q
	(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs_UserVlanQinq)(nil),              // 263: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.UserVlanComm.UserVlanCommon.UserVlanQinqs.UserVlanQinq
	(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup)(nil),                                                         // 264: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.VlanGroups.VlanGroup
	(*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit)(nil),                                                                    // 265: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceMacLimit
	(*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions)(nil),                                                                // 266: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceSuppressions
	(*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType)(nil),                                                          // 267: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceMacLimit.LimitType
	(*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters)(nil),                                          // 268: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceMacLimit.LimitType.LimitParameters
	(*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitRuleRef)(nil),                                             // 269: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceMacLimit.LimitType.LimitRuleRef
	(*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression)(nil),                                        // 270: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceSuppressions.SubInterfaceSuppression
	(*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction)(nil),                                                                   // 271: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowAction
	(*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType)(nil),                                                                     // 272: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowType
	(*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Default)(nil),                                                             // 273: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowType.Default
	(*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Untag)(nil),                                                               // 274: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowType.Untag
	(*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Dot1Q)(nil),                                                               // 275: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowType.Dot1Q
	(*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Qinq)(nil),                                                                // 276: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowType.Qinq
	(*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Qinq_Qinqs)(nil),                                                          // 277: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowType.Qinq.Qinqs
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type)(nil),                                                                                  // 278: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe)(nil),                                                                           // 279: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel)(nil),                                                                  // 280: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes)(nil),                                                 // 281: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.CommonAttributes
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe)(nil),                                                           // 282: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe)(nil),                                                             // 283: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr)(nil),                                                          // 284: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.IgpAttr
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute)(nil),                                               // 285: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.FastReroute
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby)(nil),                                                // 286: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.Hotstandby
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths)(nil),                                                  // 287: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.LspPaths
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Bypass)(nil),                                                    // 288: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.Bypass
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState)(nil),                                           // 289: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.HotstandbyState
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths)(nil),                                            // 290: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.AutoBandwidths
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp)(nil),                                                 // 291: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.BfdForLsp
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_BypassAttributes)(nil),                              // 292: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.FastReroute.BypassAttributes
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath)(nil),                                          // 293: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.LspPaths.LspPath
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Reoptimization)(nil),                                              // 294: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.Reoptimization
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby)(nil),                                                  // 295: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.Hotstandby
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths)(nil),                                                    // 296: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.LspPaths
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState)(nil),                                             // 297: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.HotstandbyState
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps)(nil),                                                        // 298: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.Lsps
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp)(nil),                                                   // 299: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.BfdForLsp
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel)(nil),                                                // 300: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.BfdForTunnel
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath)(nil),                                            // 301: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.LspPaths.LspPath
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp)(nil),                                                    // 302: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.Lsps.Lsp
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops)(nil),                                              // 303: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.Lsps.Lsp.CHops
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop)(nil),                                         // 304: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.Lsps.Lsp.CHops.CHop
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType)(nil),                                               // 305: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.IgpAttr.MetricType
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType_Relative)(nil),                                      // 306: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.IgpAttr.MetricType.Relative
	(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType_Absolute)(nil),                                      // 307: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.IgpAttr.MetricType.Absolute
	(*Ifm_Interfaces_Interface_NveAttribute_Vtep)(nil),                                                                                    // 308: huawei_ifm.Ifm.Interfaces.Interface.NveAttribute.Vtep
	(*Ifm_Interfaces_Interface_Efm_Session)(nil),                                                                                          // 309: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session
	(*Ifm_Interfaces_Interface_Efm_Session_ErrorFrame)(nil),                                                                               // 310: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFrame
	(*Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond)(nil),                                                                         // 311: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFrameSecond
	(*Ifm_Interfaces_Interface_Efm_Session_ErrorCode)(nil),                                                                                // 312: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorCode
	(*Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod)(nil),                                                                         // 313: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFramePeriod
	(*Ifm_Interfaces_Interface_Lldp_Session)(nil),                                                                                         // 314: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session
	(*Ifm_Interfaces_Interface_Lldp_Session_TlvEnable)(nil),                                                                               // 315: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.TlvEnable
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors)(nil),                                                                               // 316: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor)(nil),                                                                      // 317: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss)(nil),                                                   // 318: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ManagementAddresss
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans)(nil),                                                        // 319: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ProtocolVlans
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames)(nil),                                                            // 320: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.VlanNames
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs)(nil),                                                          // 321: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.UnknownTlvs
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs)(nil),                                   // 322: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.UnknownOrganizationallyDefinedTlvs
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv)(nil),                                                               // 323: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.DdpTlv
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_IdentityTlv)(nil),                                                          // 324: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.IdentityTlv
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress)(nil),                                 // 325: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ManagementAddresss.ManagementAddress
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan)(nil),                                           // 326: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ProtocolVlans.ProtocolVlan
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName)(nil),                                                   // 327: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.VlanNames.VlanName
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv)(nil),                                               // 328: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.UnknownTlvs.UnknownTlv
	(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv)(nil), // 329: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.UnknownOrganizationallyDefinedTlvs.UnknownOrganizationallyDefinedTlv
	(*Ifm_Interfaces_Interface_Damping_IgnoreDamp)(nil),                                                                                   // 330: huawei_ifm.Ifm.Interfaces.Interface.Damping.IgnoreDamp
	(*Ifm_Interfaces_Interface_Damping_Damp)(nil),                                                                                         // 331: huawei_ifm.Ifm.Interfaces.Interface.Damping.Damp
	(*Ifm_Interfaces_Interface_Ipv4_Address)(nil),                                                                                         // 332: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Address
	(*Ifm_Interfaces_Interface_Ipv4_State)(nil),                                                                                           // 333: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.State
	(*Ifm_Interfaces_Interface_Ipv4_StaticArps)(nil),                                                                                      // 334: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.StaticArps
	(*Ifm_Interfaces_Interface_Ipv4_Vrrp)(nil),                                                                                            // 335: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp
	(*Ifm_Interfaces_Interface_Ipv4_Rgm)(nil),                                                                                             // 336: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Rgm
	(*Ifm_Interfaces_Interface_Ipv4_Address_CommonAddress)(nil),                                                                           // 337: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Address.CommonAddress
	(*Ifm_Interfaces_Interface_Ipv4_Address_UnnumberedAddress)(nil),                                                                       // 338: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Address.UnnumberedAddress
	(*Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress)(nil),                                                                        // 339: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Address.NegotiateAddress
	(*Ifm_Interfaces_Interface_Ipv4_Address_CommonAddress_Addresses)(nil),                                                                 // 340: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Address.CommonAddress.Addresses
	(*Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress)(nil),                                                     // 341: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Address.NegotiateAddress.NegotiationAddress
	(*Ifm_Interfaces_Interface_Ipv4_State_Addresses)(nil),                                                                                 // 342: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.State.Addresses
	(*Ifm_Interfaces_Interface_Ipv4_State_Gateways)(nil),                                                                                  // 343: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.State.Gateways
	(*Ifm_Interfaces_Interface_Ipv4_State_Statistics)(nil),                                                                                // 344: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.State.Statistics
	(*Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address)(nil),                                                                         // 345: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.State.Addresses.Address
	(*Ifm_Interfaces_Interface_Ipv4_State_Gateways_Gateway)(nil),                                                                          // 346: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.State.Gateways.Gateway
	(*Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp)(nil),                                                                            // 347: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.StaticArps.StaticArp
	(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups)(nil),                                                                                     // 348: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups
	(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group)(nil),                                                                               // 349: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group
	(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt)(nil),                                                                       // 350: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.Preempt
	(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps)(nil),                                                                    // 351: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.VirtualIps
	(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces)(nil),                                                               // 352: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackInterfaces
	(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds)(nil),                                                                     // 353: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds
	(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps)(nil),                                                                   // 354: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackMtgrps
	(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps_VirtualIp)(nil),                                                          // 355: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.VirtualIps.VirtualIp
	(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface)(nil),                                                // 356: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackInterfaces.TrackInterface
	(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd)(nil),                                                            // 357: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds.TrackBfd
	(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp)(nil),                                                        // 358: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackMtgrps.TrackMtgrp
	(*Ifm_Interfaces_Interface_Ipv6_Address)(nil),                                                                                         // 359: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.Address
	(*Ifm_Interfaces_Interface_Ipv6_NdPrefixs)(nil),                                                                                       // 360: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdPrefixs
	(*Ifm_Interfaces_Interface_Ipv6_State)(nil),                                                                                           // 361: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.State
	(*Ifm_Interfaces_Interface_Ipv6_NdCollection)(nil),                                                                                    // 362: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection
	(*Ifm_Interfaces_Interface_Ipv6_Cgas)(nil),                                                                                            // 363: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.Cgas
	(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter)(nil),                                                                           // 364: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter
	(*Ifm_Interfaces_Interface_Ipv6_Pp6Collection)(nil),                                                                                   // 365: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.Pp6Collection
	(*Ifm_Interfaces_Interface_Ipv6_Address_CommonAddress)(nil),                                                                           // 366: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.Address.CommonAddress
	(*Ifm_Interfaces_Interface_Ipv6_Address_CommonAddress_Addresses)(nil),                                                                 // 367: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.Address.CommonAddress.Addresses
	(*Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix)(nil),                                                                              // 368: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdPrefixs.NdPrefix
	(*Ifm_Interfaces_Interface_Ipv6_State_Addresses)(nil),                                                                                 // 369: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses
	(*Ifm_Interfaces_Interface_Ipv6_State_Statistics)(nil),                                                                                // 370: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.State.Statistics
	(*Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address)(nil),                                                                         // 371: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses.Address
	(*Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty)(nil),                                                                         // 372: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty
	(*Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys)(nil),                                                                             // 373: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys
	(*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack)(nil),                                                                         // 374: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack
	(*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits)(nil),                                                       // 375: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.ReceiveRateLimits
	(*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive)(nil),                                                         // 376: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.SourceIpReceive
	(*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit)(nil),                                      // 377: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.ReceiveRateLimits.ReceiveRateLimit
	(*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits)(nil),                                            // 378: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.SourceIpReceive.IpRateLimits
	(*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit)(nil),                                // 379: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.SourceIpReceive.IpRateLimits.IpRateLimit
	(*Ifm_Interfaces_Interface_Ipv6_Cgas_Cga)(nil),                                                                                        // 380: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.Cgas.Cga
	(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch)(nil),                                                            // 381: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch
	(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch)(nil),                                                             // 382: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch
	(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch)(nil),                                                         // 383: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch
	(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs)(nil),                                                        // 384: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.NoOptionExhSwitchs
	(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options)(nil),                                                    // 385: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch.Options
	(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option)(nil),                                             // 386: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch.Options.Option
	(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options)(nil),                                                     // 387: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch.Options
	(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option)(nil),                                              // 388: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch.Options.Option
	(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options)(nil),                                                 // 389: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch.Options
	(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option)(nil),                                          // 390: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch.Options.Option
	(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch)(nil),                                      // 391: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.NoOptionExhSwitchs.NoOptionExhSwitch
	(*Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface)(nil),                                                                       // 392: huawei_ifm.Ifm.Interfaces.Interface.ArpPortSecurity.L2SubInterface
	(*Ifm_Interfaces_Interface_Nve_Attribute)(nil),                                                                                        // 393: huawei_ifm.Ifm.Interfaces.Interface.Nve.Attribute
	(*Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82)(nil),                                                                          // 394: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.Option82
	(*Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses)(nil),                                                                   // 395: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.ServerAddresses
	(*Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses)(nil),                                                                  // 396: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.GatewayAddresses
	(*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress)(nil),                                                                // 397: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.RelaySourceAddress
	(*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses)(nil),                                                        // 398: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.RelaySourceOptionAddresses
	(*Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics)(nil),                                                              // 399: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.Opt82VendorSpecifics
	(*Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress)(nil),                                                     // 400: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.ServerAddresses.ServerAddress
	(*Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress)(nil),                                                   // 401: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.GatewayAddresses.GatewayAddress
	(*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress)(nil),                               // 402: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.RelaySourceOptionAddresses.RelaySourceOptionAddress
	(*Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific)(nil),                                          // 403: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.Opt82VendorSpecifics.Opt82VendorSpecific
	(*Ifm_Interfaces_Interface_DhcpRelayIf_Option82)(nil),                                                                                 // 404: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayIf.Option82
	(*Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses)(nil),                                                                          // 405: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayIf.ServerAddresses
	(*Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses_ServerAddress)(nil),                                                            // 406: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayIf.ServerAddresses.ServerAddress
	(*Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting)(nil),                                                                             // 407: huawei_ifm.Ifm.Interfaces.Interface.DhcpIf.DhcpPacketSetting
	(*Ifm_Interfaces_Interface_DhcpIf_Option82Formats)(nil),                                                                               // 408: huawei_ifm.Ifm.Interfaces.Interface.DhcpIf.Option82Formats
	(*Ifm_Interfaces_Interface_DhcpIf_Option82InsertSetting)(nil),                                                                         // 409: huawei_ifm.Ifm.Interfaces.Interface.DhcpIf.Option82InsertSetting
	(*Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format)(nil),                                                                // 410: huawei_ifm.Ifm.Interfaces.Interface.DhcpIf.Option82Formats.Option82Format
	(*Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus)(nil),                                                                            // 411: huawei_ifm.Ifm.Interfaces.Interface.DhcpClientIf.ClientStatus
	(*Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics)(nil),                                                                        // 412: huawei_ifm.Ifm.Interfaces.Interface.DhcpClientIf.ClientStatistics
	(*Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute)(nil),                                                                        // 413: huawei_ifm.Ifm.Interfaces.Interface.DhcpSnoopingIf.BasicAttribute
	(*Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds)(nil),                                                                           // 414: huawei_ifm.Ifm.Interfaces.Interface.DhcpSnoopingIf.StaticBinds
	(*Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind)(nil),                                                                // 415: huawei_ifm.Ifm.Interfaces.Interface.DhcpSnoopingIf.StaticBinds.StaticBind
	(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses)(nil),                                                            // 416: huawei_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.DestinationAddresses
	(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs)(nil),                                                                  // 417: huawei_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.DestinationIfs
	(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption)(nil),                                                                   // 418: huawei_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.RebuildOption
	(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting)(nil),                                                              // 419: huawei_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.AccessLimitSetting
	(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_PdRouteTrackVrrp)(nil),                                                                // 420: huawei_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.PdRouteTrackVrrp
	(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses_DestinationAddress)(nil),                                         // 421: huawei_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.DestinationAddresses.DestinationAddress
	(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs_DestinationIf)(nil),                                                    // 422: huawei_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.DestinationIfs.DestinationIf
	(*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic)(nil),                                                                 // 423: huawei_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic
	(*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections)(nil),                                                     // 424: huawei_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic.Collections
	(*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection)(nil),                                          // 425: huawei_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic.Collections.Collection
	(*Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity)(nil),                                                                       // 426: huawei_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys.IfIcmpSecurity
	(*Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity)(nil),                                                                     // 427: huawei_ifm.Ifm.Interfaces.Interface.IfIpOptSecuritys.IfIpOptSecurity
	(*Ifm_Global_Ipv4ConflictEnable)(nil),                                                                                                 // 428: huawei_ifm.Ifm.Global.Ipv4ConflictEnable
	(*Ifm_Global_Ipv6ConflictEnable)(nil),                                                                                                 // 429: huawei_ifm.Ifm.Global.Ipv6ConflictEnable
	(*Ifm_Damp_Level)(nil),                                                                                                                // 430: huawei_ifm.Ifm.Damp.Level
	(*Ifm_Damp_Level_Auto)(nil),                                                                                                           // 431: huawei_ifm.Ifm.Damp.Level.Auto
	(*Ifm_Damp_Level_Manual)(nil),                                                                                                         // 432: huawei_ifm.Ifm.Damp.Level.Manual
	(*Ifm_StaticDimensionRanges_StaticDimensionRange)(nil),                                                                                // 433: huawei_ifm.Ifm.StaticDimensionRanges.StaticDimensionRange
	(*Ifm_RemoteInterfaces_RemoteInterface)(nil),                                                                                          // 434: huawei_ifm.Ifm.RemoteInterfaces.RemoteInterface
	(*Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState)(nil),                                                                    // 435: huawei_ifm.Ifm.RemoteInterfaces.RemoteInterface.RemoteStatisticsState
	(*Ifm_AutoRecoveryTimes_AutoRecoveryTime)(nil),                                                                                        // 436: huawei_ifm.Ifm.AutoRecoveryTimes.AutoRecoveryTime
}
var file_huawei_ifm_proto_depIdxs = []int32{
	159, // 0: huawei_ifm.Ifm.global_config:type_name -> huawei_ifm.Ifm.GlobalConfig
	160, // 1: huawei_ifm.Ifm.interfaces:type_name -> huawei_ifm.Ifm.Interfaces
	161, // 2: huawei_ifm.Ifm.global:type_name -> huawei_ifm.Ifm.Global
	162, // 3: huawei_ifm.Ifm.damp:type_name -> huawei_ifm.Ifm.Damp
	163, // 4: huawei_ifm.Ifm.static_dimension_ranges:type_name -> huawei_ifm.Ifm.StaticDimensionRanges
	164, // 5: huawei_ifm.Ifm.ipv4_interface_count:type_name -> huawei_ifm.Ifm.Ipv4InterfaceCount
	165, // 6: huawei_ifm.Ifm.remote_interfaces:type_name -> huawei_ifm.Ifm.RemoteInterfaces
	166, // 7: huawei_ifm.Ifm.auto_recovery_times:type_name -> huawei_ifm.Ifm.AutoRecoveryTimes
	167, // 8: huawei_ifm.Ifm.hdlc_damp:type_name -> huawei_ifm.Ifm.HdlcDamp
	168, // 9: huawei_ifm.Ifm.Interfaces.interface:type_name -> huawei_ifm.Ifm.Interfaces.Interface
	428, // 10: huawei_ifm.Ifm.Global.ipv4_conflict_enable:type_name -> huawei_ifm.Ifm.Global.Ipv4ConflictEnable
	429, // 11: huawei_ifm.Ifm.Global.ipv6_conflict_enable:type_name -> huawei_ifm.Ifm.Global.Ipv6ConflictEnable
	430, // 12: huawei_ifm.Ifm.Damp.level:type_name -> huawei_ifm.Ifm.Damp.Level
	433, // 13: huawei_ifm.Ifm.StaticDimensionRanges.static_dimension_range:type_name -> huawei_ifm.Ifm.StaticDimensionRanges.StaticDimensionRange
	434, // 14: huawei_ifm.Ifm.RemoteInterfaces.remote_interface:type_name -> huawei_ifm.Ifm.RemoteInterfaces.RemoteInterface
	436, // 15: huawei_ifm.Ifm.AutoRecoveryTimes.auto_recovery_time:type_name -> huawei_ifm.Ifm.AutoRecoveryTimes.AutoRecoveryTime
	157, // 16: huawei_ifm.Ifm.HdlcDamp.damp_level:type_name -> huawei_ifm.Ifm.HdlcDamp.DampLevel
	0,   // 17: huawei_ifm.Ifm.Interfaces.Interface.class1:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Class1
	1,   // 18: huawei_ifm.Ifm.Interfaces.Interface.type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Type
	2,   // 19: huawei_ifm.Ifm.Interfaces.Interface.admin_status:type_name -> huawei_ifm.Ifm.Interfaces.Interface.AdminStatus
	3,   // 20: huawei_ifm.Ifm.Interfaces.Interface.link_protocol:type_name -> huawei_ifm.Ifm.Interfaces.Interface.LinkProtocol
	169, // 21: huawei_ifm.Ifm.Interfaces.Interface.dynamic:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Dynamic
	170, // 22: huawei_ifm.Ifm.Interfaces.Interface.mib_statistics:type_name -> huawei_ifm.Ifm.Interfaces.Interface.MibStatistics
	171, // 23: huawei_ifm.Ifm.Interfaces.Interface.common_statistics:type_name -> huawei_ifm.Ifm.Interfaces.Interface.CommonStatistics
	172, // 24: huawei_ifm.Ifm.Interfaces.Interface.trunk:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Trunk
	173, // 25: huawei_ifm.Ifm.Interfaces.Interface.bas:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Bas
	174, // 26: huawei_ifm.Ifm.Interfaces.Interface.multicast_bas:type_name -> huawei_ifm.Ifm.Interfaces.Interface.MulticastBas
	175, // 27: huawei_ifm.Ifm.Interfaces.Interface.vrrp:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Vrrp
	176, // 28: huawei_ifm.Ifm.Interfaces.Interface.rbs:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Rbs
	177, // 29: huawei_ifm.Ifm.Interfaces.Interface.ethernet:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet
	4,   // 30: huawei_ifm.Ifm.Interfaces.Interface.router_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.RouterType
	5,   // 31: huawei_ifm.Ifm.Interfaces.Interface.statistic_mode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.StatisticMode
	178, // 32: huawei_ifm.Ifm.Interfaces.Interface.tunnel_protocol:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol
	179, // 33: huawei_ifm.Ifm.Interfaces.Interface.bdif_attribute:type_name -> huawei_ifm.Ifm.Interfaces.Interface.BdifAttribute
	180, // 34: huawei_ifm.Ifm.Interfaces.Interface.arp_sending:type_name -> huawei_ifm.Ifm.Interfaces.Interface.ArpSending
	181, // 35: huawei_ifm.Ifm.Interfaces.Interface.nd_sending:type_name -> huawei_ifm.Ifm.Interfaces.Interface.NdSending
	182, // 36: huawei_ifm.Ifm.Interfaces.Interface.bfd:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Bfd
	183, // 37: huawei_ifm.Ifm.Interfaces.Interface.nve_attribute:type_name -> huawei_ifm.Ifm.Interfaces.Interface.NveAttribute
	184, // 38: huawei_ifm.Ifm.Interfaces.Interface.nvo3_gateway:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Nvo3Gateway
	185, // 39: huawei_ifm.Ifm.Interfaces.Interface.arp_entry:type_name -> huawei_ifm.Ifm.Interfaces.Interface.ArpEntry
	186, // 40: huawei_ifm.Ifm.Interfaces.Interface.evpn:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Evpn
	187, // 41: huawei_ifm.Ifm.Interfaces.Interface.efm:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Efm
	188, // 42: huawei_ifm.Ifm.Interfaces.Interface.vlanif_attribute:type_name -> huawei_ifm.Ifm.Interfaces.Interface.VlanifAttribute
	189, // 43: huawei_ifm.Ifm.Interfaces.Interface.lldp:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp
	190, // 44: huawei_ifm.Ifm.Interfaces.Interface.control_flap:type_name -> huawei_ifm.Ifm.Interfaces.Interface.ControlFlap
	191, // 45: huawei_ifm.Ifm.Interfaces.Interface.trap_threshold:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TrapThreshold
	192, // 46: huawei_ifm.Ifm.Interfaces.Interface.damping:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Damping
	193, // 47: huawei_ifm.Ifm.Interfaces.Interface.ipv4:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4
	194, // 48: huawei_ifm.Ifm.Interfaces.Interface.ipv6:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6
	6,   // 49: huawei_ifm.Ifm.Interfaces.Interface.service_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.ServiceType
	7,   // 50: huawei_ifm.Ifm.Interfaces.Interface.encapsulation_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.EncapsulationType
	195, // 51: huawei_ifm.Ifm.Interfaces.Interface.dhcpv6_relay_if:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayIf
	8,   // 52: huawei_ifm.Ifm.Interfaces.Interface.network_layer_status:type_name -> huawei_ifm.Ifm.Interfaces.Interface.NetworkLayerStatus
	196, // 53: huawei_ifm.Ifm.Interfaces.Interface.damp_state:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DampState
	197, // 54: huawei_ifm.Ifm.Interfaces.Interface.error_down:type_name -> huawei_ifm.Ifm.Interfaces.Interface.ErrorDown
	198, // 55: huawei_ifm.Ifm.Interfaces.Interface.arp_status_detect:type_name -> huawei_ifm.Ifm.Interfaces.Interface.ArpStatusDetect
	199, // 56: huawei_ifm.Ifm.Interfaces.Interface.arp_port_security:type_name -> huawei_ifm.Ifm.Interfaces.Interface.ArpPortSecurity
	200, // 57: huawei_ifm.Ifm.Interfaces.Interface.nve:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Nve
	201, // 58: huawei_ifm.Ifm.Interfaces.Interface.dhcp_relay_attribute:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute
	202, // 59: huawei_ifm.Ifm.Interfaces.Interface.dhcp_relay_if:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayIf
	203, // 60: huawei_ifm.Ifm.Interfaces.Interface.dhcp_if:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpIf
	204, // 61: huawei_ifm.Ifm.Interfaces.Interface.dhcp_client_if:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpClientIf
	205, // 62: huawei_ifm.Ifm.Interfaces.Interface.dhcp_snooping_if:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpSnoopingIf
	206, // 63: huawei_ifm.Ifm.Interfaces.Interface.dhcpv6_relay_attribute:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute
	207, // 64: huawei_ifm.Ifm.Interfaces.Interface.if_8021p_priority:type_name -> huawei_ifm.Ifm.Interfaces.Interface.If8021PPriority
	208, // 65: huawei_ifm.Ifm.Interfaces.Interface.management_plane_defend_if:type_name -> huawei_ifm.Ifm.Interfaces.Interface.ManagementPlaneDefendIf
	209, // 66: huawei_ifm.Ifm.Interfaces.Interface.fr_encapsulation:type_name -> huawei_ifm.Ifm.Interfaces.Interface.FrEncapsulation
	210, // 67: huawei_ifm.Ifm.Interfaces.Interface.track_monitor_group:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TrackMonitorGroup
	211, // 68: huawei_ifm.Ifm.Interfaces.Interface.nvo3_vtep_statistics:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics
	212, // 69: huawei_ifm.Ifm.Interfaces.Interface.if_icmp_securitys:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys
	213, // 70: huawei_ifm.Ifm.Interfaces.Interface.if_ip_opt_securitys:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfIpOptSecuritys
	214, // 71: huawei_ifm.Ifm.Interfaces.Interface.ip_verify_src_addr:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IpVerifySrcAddr
	215, // 72: huawei_ifm.Ifm.Interfaces.Interface.ip_fwd_broadcast:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IpFwdBroadcast
	9,   // 73: huawei_ifm.Ifm.Interfaces.Interface.Dynamic.oper_status:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Dynamic.OperStatus
	10,  // 74: huawei_ifm.Ifm.Interfaces.Interface.Dynamic.physical_status:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Dynamic.PhysicalStatus
	11,  // 75: huawei_ifm.Ifm.Interfaces.Interface.Dynamic.link_status:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Dynamic.LinkStatus
	12,  // 76: huawei_ifm.Ifm.Interfaces.Interface.Dynamic.ipv4_status:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Dynamic.Ipv4Status
	13,  // 77: huawei_ifm.Ifm.Interfaces.Interface.Dynamic.ipv6_status:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Dynamic.Ipv6Status
	14,  // 78: huawei_ifm.Ifm.Interfaces.Interface.Dynamic.link_quality_grade:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Dynamic.LinkQualityGrade
	15,  // 79: huawei_ifm.Ifm.Interfaces.Interface.Trunk.type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Trunk.Type
	16,  // 80: huawei_ifm.Ifm.Interfaces.Interface.Trunk.work_mode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Trunk.WorkMode
	216, // 81: huawei_ifm.Ifm.Interfaces.Interface.Trunk.members:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members
	217, // 82: huawei_ifm.Ifm.Interfaces.Interface.Trunk.lacp:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Trunk.Lacp
	17,  // 83: huawei_ifm.Ifm.Interfaces.Interface.Trunk.hash_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Trunk.HashType
	218, // 84: huawei_ifm.Ifm.Interfaces.Interface.Trunk.forwardings:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Trunk.Forwardings
	227, // 85: huawei_ifm.Ifm.Interfaces.Interface.Bas.access_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Bas.AccessType
	229, // 86: huawei_ifm.Ifm.Interfaces.Interface.MulticastBas.vlan_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.MulticastBas.VlanType
	232, // 87: huawei_ifm.Ifm.Interfaces.Interface.Vrrp.if_track_admin_vrrps:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Vrrp.IfTrackAdminVrrps
	233, // 88: huawei_ifm.Ifm.Interfaces.Interface.Vrrp.backup_groups:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Vrrp.BackupGroups
	234, // 89: huawei_ifm.Ifm.Interfaces.Interface.Vrrp.track_admins:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Vrrp.TrackAdmins
	240, // 90: huawei_ifm.Ifm.Interfaces.Interface.Rbs.bind_rbp:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Rbs.BindRbp
	241, // 91: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.main_interface:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface
	242, // 92: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.l3_sub_interface:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface
	243, // 93: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.mac:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac
	244, // 94: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.l2_sub_interface:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface
	278, // 95: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type
	70,  // 96: huawei_ifm.Ifm.Interfaces.Interface.ArpSending.type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.ArpSending.Type
	71,  // 97: huawei_ifm.Ifm.Interfaces.Interface.NdSending.type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.NdSending.Type
	308, // 98: huawei_ifm.Ifm.Interfaces.Interface.NveAttribute.vtep:type_name -> huawei_ifm.Ifm.Interfaces.Interface.NveAttribute.Vtep
	72,  // 99: huawei_ifm.Ifm.Interfaces.Interface.ArpEntry.arp_learn_strict:type_name -> huawei_ifm.Ifm.Interfaces.Interface.ArpEntry.ArpLearnStrict
	73,  // 100: huawei_ifm.Ifm.Interfaces.Interface.ArpEntry.gratuitous:type_name -> huawei_ifm.Ifm.Interfaces.Interface.ArpEntry.Gratuitous
	74,  // 101: huawei_ifm.Ifm.Interfaces.Interface.ArpEntry.gratuitous_send:type_name -> huawei_ifm.Ifm.Interfaces.Interface.ArpEntry.GratuitousSend
	309, // 102: huawei_ifm.Ifm.Interfaces.Interface.Efm.session:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Efm.Session
	314, // 103: huawei_ifm.Ifm.Interfaces.Interface.Lldp.session:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session
	330, // 104: huawei_ifm.Ifm.Interfaces.Interface.Damping.ignore_damp:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Damping.IgnoreDamp
	331, // 105: huawei_ifm.Ifm.Interfaces.Interface.Damping.damp:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Damping.Damp
	332, // 106: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.address:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Address
	333, // 107: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.state:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.State
	334, // 108: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.static_arps:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.StaticArps
	335, // 109: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.vrrp:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp
	336, // 110: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.rgm:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Rgm
	359, // 111: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.address:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.Address
	360, // 112: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.nd_prefixs:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdPrefixs
	361, // 113: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.state:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.State
	362, // 114: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.nd_collection:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection
	363, // 115: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.cgas:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.Cgas
	364, // 116: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.extension_header_filter:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter
	365, // 117: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.pp6_collection:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.Pp6Collection
	136, // 118: huawei_ifm.Ifm.Interfaces.Interface.DampState.suppress_status:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DampState.SuppressStatus
	137, // 119: huawei_ifm.Ifm.Interfaces.Interface.ErrorDown.cause:type_name -> huawei_ifm.Ifm.Interfaces.Interface.ErrorDown.Cause
	138, // 120: huawei_ifm.Ifm.Interfaces.Interface.ArpStatusDetect.mode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.ArpStatusDetect.Mode
	392, // 121: huawei_ifm.Ifm.Interfaces.Interface.ArpPortSecurity.l2_sub_interface:type_name -> huawei_ifm.Ifm.Interfaces.Interface.ArpPortSecurity.L2SubInterface
	393, // 122: huawei_ifm.Ifm.Interfaces.Interface.Nve.attribute:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Nve.Attribute
	139, // 123: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.reply_packet_policy:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.ReplyPacketPolicy
	394, // 124: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.option82:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.Option82
	395, // 125: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.server_addresses:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.ServerAddresses
	396, // 126: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.gateway_addresses:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.GatewayAddresses
	397, // 127: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.relay_source_address:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.RelaySourceAddress
	398, // 128: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.relay_source_option_addresses:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.RelaySourceOptionAddresses
	399, // 129: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.opt82_vendor_specifics:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.Opt82VendorSpecifics
	142, // 130: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayIf.reply_packet_policy:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayIf.ReplyPacketPolicy
	404, // 131: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayIf.option82:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayIf.Option82
	405, // 132: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayIf.server_addresses:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayIf.ServerAddresses
	407, // 133: huawei_ifm.Ifm.Interfaces.Interface.DhcpIf.dhcp_packet_setting:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpIf.DhcpPacketSetting
	408, // 134: huawei_ifm.Ifm.Interfaces.Interface.DhcpIf.option82_formats:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpIf.Option82Formats
	409, // 135: huawei_ifm.Ifm.Interfaces.Interface.DhcpIf.option82_insert_setting:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpIf.Option82InsertSetting
	411, // 136: huawei_ifm.Ifm.Interfaces.Interface.DhcpClientIf.client_status:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpClientIf.ClientStatus
	412, // 137: huawei_ifm.Ifm.Interfaces.Interface.DhcpClientIf.client_statistics:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpClientIf.ClientStatistics
	413, // 138: huawei_ifm.Ifm.Interfaces.Interface.DhcpSnoopingIf.basic_attribute:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpSnoopingIf.BasicAttribute
	414, // 139: huawei_ifm.Ifm.Interfaces.Interface.DhcpSnoopingIf.static_binds:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpSnoopingIf.StaticBinds
	416, // 140: huawei_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.destination_addresses:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.DestinationAddresses
	417, // 141: huawei_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.destination_ifs:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.DestinationIfs
	418, // 142: huawei_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.rebuild_option:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.RebuildOption
	419, // 143: huawei_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.access_limit_setting:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.AccessLimitSetting
	420, // 144: huawei_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.pd_route_track_vrrp:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.PdRouteTrackVrrp
	147, // 145: huawei_ifm.Ifm.Interfaces.Interface.FrEncapsulation.encapsulation:type_name -> huawei_ifm.Ifm.Interfaces.Interface.FrEncapsulation.Encapsulation
	423, // 146: huawei_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.nvo3_vtep_statistic:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic
	426, // 147: huawei_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys.if_icmp_security:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys.IfIcmpSecurity
	427, // 148: huawei_ifm.Ifm.Interfaces.Interface.IfIpOptSecuritys.if_ip_opt_security:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfIpOptSecuritys.IfIpOptSecurity
	219, // 149: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.member:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member
	25,  // 150: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.receive_timeout_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.ReceiveTimeoutType
	26,  // 151: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.select_port_std:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.SelectPortStd
	224, // 152: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.track_vrrp:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.TrackVrrp
	27,  // 153: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.sysmac_source:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.SysmacSource
	225, // 154: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.m_lag:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Trunk.Lacp.MLag
	226, // 155: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Forwardings.forwarding:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Trunk.Forwardings.Forwarding
	18,  // 156: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.member_state:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.MemberState
	19,  // 157: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.status:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Status
	20,  // 158: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.role:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Role
	21,  // 159: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.lacp_negotiation_mode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.LacpNegotiationMode
	220, // 160: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.lacp:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp
	221, // 161: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.port_attributes:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PortAttributes
	222, // 162: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.port_negotiate_parameter:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PortNegotiateParameter
	223, // 163: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.pdu_statistic:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PduStatistic
	22,  // 164: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PortAttributes.role:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PortAttributes.Role
	23,  // 165: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PortNegotiateParameter.status:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PortNegotiateParameter.Status
	24,  // 166: huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PortNegotiateParameter.port_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Trunk.Members.Member.Lacp.PortNegotiateParameter.PortType
	228, // 167: huawei_ifm.Ifm.Interfaces.Interface.Bas.AccessType.layer2_subscriber:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Bas.AccessType.Layer2Subscriber
	230, // 168: huawei_ifm.Ifm.Interfaces.Interface.MulticastBas.VlanType.qinq:type_name -> huawei_ifm.Ifm.Interfaces.Interface.MulticastBas.VlanType.Qinq
	231, // 169: huawei_ifm.Ifm.Interfaces.Interface.MulticastBas.VlanType.vlan:type_name -> huawei_ifm.Ifm.Interfaces.Interface.MulticastBas.VlanType.Vlan
	235, // 170: huawei_ifm.Ifm.Interfaces.Interface.Vrrp.IfTrackAdminVrrps.if_track_admin_vrrp:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Vrrp.IfTrackAdminVrrps.IfTrackAdminVrrp
	236, // 171: huawei_ifm.Ifm.Interfaces.Interface.Vrrp.BackupGroups.advertise_send_mode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Vrrp.BackupGroups.AdvertiseSendMode
	239, // 172: huawei_ifm.Ifm.Interfaces.Interface.Vrrp.TrackAdmins.track_admin:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Vrrp.TrackAdmins.TrackAdmin
	237, // 173: huawei_ifm.Ifm.Interfaces.Interface.Vrrp.BackupGroups.AdvertiseSendMode.all_subvlans:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Vrrp.BackupGroups.AdvertiseSendMode.AllSubvlans
	238, // 174: huawei_ifm.Ifm.Interfaces.Interface.Vrrp.BackupGroups.AdvertiseSendMode.one_subvlan:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Vrrp.BackupGroups.AdvertiseSendMode.OneSubvlan
	245, // 175: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.l2_attribute:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute
	28,  // 176: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.vlan_swap:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.VlanSwap
	251, // 177: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.flow_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType
	252, // 178: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.vlan_groups:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.VlanGroups
	265, // 179: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.sub_interface_mac_limit:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceMacLimit
	266, // 180: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.sub_interface_suppressions:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceSuppressions
	35,  // 181: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.local_switch:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.LocalSwitch
	271, // 182: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.flow_action:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowAction
	272, // 183: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.flow_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowType
	29,  // 184: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.link_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.LinkType
	246, // 185: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.vlan_stackings:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.VlanStackings
	247, // 186: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.statistics_enable_vlans:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.StatisticsEnableVlans
	248, // 187: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.port_isolate_groups:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.PortIsolateGroups
	249, // 188: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.VlanStackings.vlan_stacking:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.VlanStackings.VlanStacking
	250, // 189: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.PortIsolateGroups.port_isolate_group:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.MainInterface.L2Attribute.PortIsolateGroups.PortIsolateGroup
	253, // 190: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.vlan_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.VlanType
	254, // 191: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.qinq_termination:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.QinqTermination
	255, // 192: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.qinq_stacking:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.QinqStacking
	256, // 193: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.user_vlan_comm:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.UserVlanComm
	257, // 194: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.dot1q_termination:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.Dot1QTermination
	258, // 195: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.user_vlan_any:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.UserVlanAny
	264, // 196: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.VlanGroups.vlan_group:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.VlanGroups.VlanGroup
	259, // 197: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.VlanType.vlan_type_dot1q:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.VlanType.VlanTypeDot1Q
	260, // 198: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.UserVlanComm.user_vlan_common:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.UserVlanComm.UserVlanCommon
	261, // 199: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.UserVlanComm.UserVlanCommon.user_vlan_qinqs:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.UserVlanComm.UserVlanCommon.UserVlanQinqs
	262, // 200: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.UserVlanComm.UserVlanCommon.user_vlan_dot1q:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.UserVlanComm.UserVlanCommon.UserVlanDot1Q
	263, // 201: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.UserVlanComm.UserVlanCommon.UserVlanQinqs.user_vlan_qinq:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.FlowType.UserVlanComm.UserVlanCommon.UserVlanQinqs.UserVlanQinq
	30,  // 202: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.VlanGroups.VlanGroup.mode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L3SubInterface.VlanGroups.VlanGroup.Mode
	267, // 203: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceMacLimit.limit_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceMacLimit.LimitType
	270, // 204: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceSuppressions.sub_interface_suppression:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceSuppressions.SubInterfaceSuppression
	268, // 205: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceMacLimit.LimitType.limit_parameters:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceMacLimit.LimitType.LimitParameters
	269, // 206: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceMacLimit.LimitType.limit_rule_ref:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceMacLimit.LimitType.LimitRuleRef
	31,  // 207: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceMacLimit.LimitType.LimitParameters.action:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceMacLimit.LimitType.LimitParameters.Action
	32,  // 208: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceMacLimit.LimitType.LimitParameters.alarm:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceMacLimit.LimitType.LimitParameters.Alarm
	33,  // 209: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceSuppressions.SubInterfaceSuppression.type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceSuppressions.SubInterfaceSuppression.Type
	34,  // 210: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceSuppressions.SubInterfaceSuppression.direction:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.Mac.SubInterfaceSuppressions.SubInterfaceSuppression.Direction
	36,  // 211: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowAction.action_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowAction.ActionType
	273, // 212: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowType.default:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowType.Default
	274, // 213: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowType.untag:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowType.Untag
	275, // 214: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowType.dot1q:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowType.Dot1Q
	276, // 215: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowType.qinq:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowType.Qinq
	277, // 216: huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowType.Qinq.qinqs:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ethernet.L2SubInterface.FlowType.Qinq.Qinqs
	279, // 217: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.mpls_te:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe
	280, // 218: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.te_tunnel:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel
	281, // 219: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.common_attributes:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.CommonAttributes
	282, // 220: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.rsvp_te:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe
	283, // 221: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.sr_te:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe
	284, // 222: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.igp_attr:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.IgpAttr
	37,  // 223: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.CommonAttributes.signal_protocol:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.CommonAttributes.SignalProtocol
	38,  // 224: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.reserve_style:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.ReserveStyle
	39,  // 225: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.record_route:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.RecordRoute
	40,  // 226: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.tie_breaking:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.TieBreaking
	41,  // 227: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.path_metric_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.PathMetricType
	42,  // 228: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.pce_delegate:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.PceDelegate
	43,  // 229: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.entropy_label:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.EntropyLabel
	285, // 230: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.fast_reroute:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.FastReroute
	286, // 231: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.hotstandby:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.Hotstandby
	287, // 232: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.lsp_paths:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.LspPaths
	288, // 233: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.bypass:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.Bypass
	289, // 234: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.hotstandby_state:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.HotstandbyState
	290, // 235: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.auto_bandwidths:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.AutoBandwidths
	291, // 236: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.bfd_for_lsp:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.BfdForLsp
	56,  // 237: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.pce_delegate:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.PceDelegate
	57,  // 238: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.path_verification:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.PathVerification
	294, // 239: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.reoptimization:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.Reoptimization
	295, // 240: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.hotstandby:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.Hotstandby
	296, // 241: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.lsp_paths:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.LspPaths
	297, // 242: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.hotstandby_state:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.HotstandbyState
	298, // 243: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.lsps:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.Lsps
	299, // 244: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.bfd_for_lsp:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.BfdForLsp
	300, // 245: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.bfd_for_tunnel:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.BfdForTunnel
	69,  // 246: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.IgpAttr.shortcut_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.IgpAttr.ShortcutType
	305, // 247: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.IgpAttr.metric_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.IgpAttr.MetricType
	44,  // 248: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.FastReroute.mode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.FastReroute.Mode
	292, // 249: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.FastReroute.bypass_attributes:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.FastReroute.BypassAttributes
	45,  // 250: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.Hotstandby.revertive_mode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.Hotstandby.RevertiveMode
	293, // 251: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.LspPaths.lsp_path:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.LspPaths.LspPath
	48,  // 252: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.HotstandbyState.switch_result:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.HotstandbyState.SwitchResult
	49,  // 253: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.HotstandbyState.switch_state:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.HotstandbyState.SwitchState
	50,  // 254: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.HotstandbyState.using_overlap:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.HotstandbyState.UsingOverlap
	51,  // 255: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.HotstandbyState.switch_reason:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.HotstandbyState.SwitchReason
	52,  // 256: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.AutoBandwidths.mode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.AutoBandwidths.Mode
	53,  // 257: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.AutoBandwidths.threshold_logic:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.AutoBandwidths.ThresholdLogic
	54,  // 258: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.BfdForLsp.ability:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.BfdForLsp.Ability
	55,  // 259: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.BfdForLsp.mode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.BfdForLsp.Mode
	46,  // 260: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.LspPaths.LspPath.path_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.LspPaths.LspPath.PathType
	47,  // 261: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.LspPaths.LspPath.lsp_state:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.RsvpTe.LspPaths.LspPath.LspState
	58,  // 262: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.Hotstandby.revertive_mode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.Hotstandby.RevertiveMode
	301, // 263: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.LspPaths.lsp_path:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.LspPaths.LspPath
	60,  // 264: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.HotstandbyState.switch_result:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.HotstandbyState.SwitchResult
	61,  // 265: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.HotstandbyState.switch_state:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.HotstandbyState.SwitchState
	62,  // 266: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.HotstandbyState.using_overlap:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.HotstandbyState.UsingOverlap
	63,  // 267: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.HotstandbyState.switch_reason:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.HotstandbyState.SwitchReason
	302, // 268: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.Lsps.lsp:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.Lsps.Lsp
	65,  // 269: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.BfdForLsp.mode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.BfdForLsp.Mode
	66,  // 270: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.BfdForLsp.ability:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.BfdForLsp.Ability
	67,  // 271: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.BfdForTunnel.mode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.BfdForTunnel.Mode
	68,  // 272: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.BfdForTunnel.ability:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.BfdForTunnel.Ability
	59,  // 273: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.LspPaths.LspPath.lsp_state:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.LspPaths.LspPath.LspState
	303, // 274: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.Lsps.Lsp.c_hops:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.Lsps.Lsp.CHops
	304, // 275: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.Lsps.Lsp.CHops.c_hop:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.Lsps.Lsp.CHops.CHop
	64,  // 276: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.Lsps.Lsp.CHops.CHop.label_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.SrTe.Lsps.Lsp.CHops.CHop.LabelType
	306, // 277: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.IgpAttr.MetricType.relative:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.IgpAttr.MetricType.Relative
	307, // 278: huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.IgpAttr.MetricType.absolute:type_name -> huawei_ifm.Ifm.Interfaces.Interface.TunnelProtocol.Type.MplsTe.TeTunnel.IgpAttr.MetricType.Absolute
	75,  // 279: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.state:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.State
	76,  // 280: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.mode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.Mode
	77,  // 281: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.link_event:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.LinkEvent
	78,  // 282: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.ignore_loopback_request:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.IgnoreLoopbackRequest
	79,  // 283: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.trigger_if_down:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.TriggerIfDown
	310, // 284: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.error_frame:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFrame
	311, // 285: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.error_frame_second:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFrameSecond
	312, // 286: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.error_code:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorCode
	313, // 287: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.error_frame_period:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFramePeriod
	80,  // 288: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFrame.notification:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFrame.Notification
	81,  // 289: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFrame.period_unit:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFrame.PeriodUnit
	82,  // 290: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFrameSecond.notification:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFrameSecond.Notification
	83,  // 291: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorCode.notification:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorCode.Notification
	84,  // 292: huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFramePeriod.notification:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Efm.Session.ErrorFramePeriod.Notification
	85,  // 293: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.admin_status:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.AdminStatus
	315, // 294: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.tlv_enable:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.TlvEnable
	316, // 295: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.neighbors:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors
	317, // 296: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.neighbor:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor
	86,  // 297: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.chassis_id_sub_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ChassisIdSubType
	87,  // 298: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.port_id_sub_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.PortIdSubType
	88,  // 299: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.auto_negotiation_supported:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.AutoNegotiationSupported
	89,  // 300: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.auto_negotiation_enabled:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.AutoNegotiationEnabled
	90,  // 301: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.oper_mau_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.OperMauType
	91,  // 302: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.link_aggregation_supported:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.LinkAggregationSupported
	92,  // 303: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.link_aggregation_enabled:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.LinkAggregationEnabled
	93,  // 304: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.status:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.Status
	318, // 305: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.management_addresss:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ManagementAddresss
	319, // 306: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.protocol_vlans:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ProtocolVlans
	320, // 307: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.vlan_names:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.VlanNames
	321, // 308: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.unknown_tlvs:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.UnknownTlvs
	322, // 309: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.unknown_organizationally_defined_tlvs:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.UnknownOrganizationallyDefinedTlvs
	323, // 310: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ddp_tlv:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.DdpTlv
	324, // 311: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.identity_tlv:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.IdentityTlv
	325, // 312: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ManagementAddresss.management_address:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ManagementAddresss.ManagementAddress
	326, // 313: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ProtocolVlans.protocol_vlan:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ProtocolVlans.ProtocolVlan
	327, // 314: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.VlanNames.vlan_name:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.VlanNames.VlanName
	328, // 315: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.UnknownTlvs.unknown_tlv:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.UnknownTlvs.UnknownTlv
	329, // 316: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.UnknownOrganizationallyDefinedTlvs.unknown_organizationally_defined_tlv:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.UnknownOrganizationallyDefinedTlvs.UnknownOrganizationallyDefinedTlv
	94,  // 317: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ManagementAddresss.ManagementAddress.type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ManagementAddresss.ManagementAddress.Type
	95,  // 318: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ManagementAddresss.ManagementAddress.if_sub_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ManagementAddresss.ManagementAddress.IfSubType
	96,  // 319: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ProtocolVlans.ProtocolVlan.supported:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ProtocolVlans.ProtocolVlan.Supported
	97,  // 320: huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ProtocolVlans.ProtocolVlan.enabled:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Lldp.Session.Neighbors.Neighbor.ProtocolVlans.ProtocolVlan.Enabled
	337, // 321: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Address.common_address:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Address.CommonAddress
	338, // 322: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Address.unnumbered_address:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Address.UnnumberedAddress
	339, // 323: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Address.negotiate_address:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Address.NegotiateAddress
	342, // 324: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.State.addresses:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.State.Addresses
	343, // 325: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.State.gateways:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.State.Gateways
	344, // 326: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.State.statistics:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.State.Statistics
	347, // 327: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.StaticArps.static_arp:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.StaticArps.StaticArp
	348, // 328: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.groups:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups
	340, // 329: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Address.CommonAddress.addresses:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Address.CommonAddress.Addresses
	341, // 330: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Address.NegotiateAddress.negotiation_address:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Address.NegotiateAddress.NegotiationAddress
	98,  // 331: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Address.NegotiateAddress.NegotiationAddress.negotiation_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Address.NegotiateAddress.NegotiationAddress.NegotiationType
	345, // 332: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.State.Addresses.address:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.State.Addresses.Address
	346, // 333: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.State.Gateways.gateway:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.State.Gateways.Gateway
	99,  // 334: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.State.Addresses.Address.type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.State.Addresses.Address.Type
	349, // 335: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.group:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group
	350, // 336: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.preempt:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.Preempt
	100, // 337: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.authentication_mode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.AuthenticationMode
	101, // 338: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.v3_sendmode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.V3Sendmode
	102, // 339: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.Type
	103, // 340: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.state:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.State
	351, // 341: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.virtual_ips:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.VirtualIps
	352, // 342: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.track_interfaces:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackInterfaces
	353, // 343: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.track_bfds:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds
	354, // 344: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.track_mtgrps:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackMtgrps
	355, // 345: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.VirtualIps.virtual_ip:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.VirtualIps.VirtualIp
	356, // 346: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackInterfaces.track_interface:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackInterfaces.TrackInterface
	357, // 347: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds.track_bfd:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds.TrackBfd
	358, // 348: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackMtgrps.track_mtgrp:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackMtgrps.TrackMtgrp
	104, // 349: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackInterfaces.TrackInterface.track_mode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackInterfaces.TrackInterface.TrackMode
	105, // 350: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds.TrackBfd.session_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds.TrackBfd.SessionType
	106, // 351: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds.TrackBfd.track_mode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds.TrackBfd.TrackMode
	107, // 352: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds.TrackBfd.session_state:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackBfds.TrackBfd.SessionState
	108, // 353: huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackMtgrps.TrackMtgrp.track_mode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv4.Vrrp.Groups.Group.TrackMtgrps.TrackMtgrp.TrackMode
	366, // 354: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.Address.common_address:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.Address.CommonAddress
	368, // 355: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdPrefixs.nd_prefix:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdPrefixs.NdPrefix
	369, // 356: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.State.addresses:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses
	370, // 357: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.State.statistics:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.State.Statistics
	372, // 358: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.if_property:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty
	373, // 359: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.proxys:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys
	374, // 360: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.anti_attack:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack
	380, // 361: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.Cgas.cga:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.Cgas.Cga
	381, // 362: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.hop_by_hop_switch:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch
	382, // 363: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.routing_switch:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch
	383, // 364: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.destination_switch:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch
	384, // 365: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.no_option_exh_switchs:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.NoOptionExhSwitchs
	367, // 366: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.Address.CommonAddress.addresses:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.Address.CommonAddress.Addresses
	371, // 367: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses.address:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses.Address
	109, // 368: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses.Address.type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses.Address.Type
	110, // 369: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses.Address.algorithm_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses.Address.AlgorithmType
	111, // 370: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses.Address.status:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.State.Addresses.Address.Status
	112, // 371: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.ns_mcast_flag:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.NsMcastFlag
	113, // 372: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.na_glean:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.NaGlean
	114, // 373: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.ma_flag:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.MaFlag
	115, // 374: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.o_flag:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.OFlag
	116, // 375: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.ra_halt_flag:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.RaHaltFlag
	117, // 376: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.ra_preference:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.RaPreference
	118, // 377: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.ra_prefix_flag:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.RaPrefixFlag
	119, // 378: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.ra_mtu_flag:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.RaMtuFlag
	120, // 379: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.collect_host_flag:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.CollectHostFlag
	121, // 380: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.generate_rd_enable:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.IfProperty.GenerateRdEnable
	122, // 381: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys.route_proxy:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys.RouteProxy
	123, // 382: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys.inner_vlan_proxy:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys.InnerVlanProxy
	124, // 383: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys.inter_vlan_proxy:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys.InterVlanProxy
	125, // 384: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys.anyway_proxy:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.Proxys.AnywayProxy
	375, // 385: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.receive_rate_limits:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.ReceiveRateLimits
	376, // 386: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.source_ip_receive:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.SourceIpReceive
	377, // 387: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.ReceiveRateLimits.receive_rate_limit:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.ReceiveRateLimits.ReceiveRateLimit
	378, // 388: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.SourceIpReceive.ip_rate_limits:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.SourceIpReceive.IpRateLimits
	126, // 389: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.ReceiveRateLimits.ReceiveRateLimit.type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.ReceiveRateLimits.ReceiveRateLimit.Type
	379, // 390: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.SourceIpReceive.IpRateLimits.ip_rate_limit:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.SourceIpReceive.IpRateLimits.IpRateLimit
	127, // 391: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.SourceIpReceive.IpRateLimits.IpRateLimit.packet_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.NdCollection.AntiAttack.SourceIpReceive.IpRateLimits.IpRateLimit.PacketType
	128, // 392: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch.all_options:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch.AllOptions
	385, // 393: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch.options:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch.Options
	130, // 394: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch.all_options:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch.AllOptions
	387, // 395: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch.options:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch.Options
	132, // 396: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch.all_options:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch.AllOptions
	389, // 397: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch.options:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch.Options
	391, // 398: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.NoOptionExhSwitchs.no_option_exh_switch:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.NoOptionExhSwitchs.NoOptionExhSwitch
	386, // 399: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch.Options.option:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch.Options.Option
	129, // 400: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch.Options.Option.filter_rule:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.HopByHopSwitch.Options.Option.FilterRule
	388, // 401: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch.Options.option:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch.Options.Option
	131, // 402: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch.Options.Option.filter_rule:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.RoutingSwitch.Options.Option.FilterRule
	390, // 403: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch.Options.option:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch.Options.Option
	133, // 404: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch.Options.Option.filter_rule:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.DestinationSwitch.Options.Option.FilterRule
	134, // 405: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.NoOptionExhSwitchs.NoOptionExhSwitch.exh_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.NoOptionExhSwitchs.NoOptionExhSwitch.ExhType
	135, // 406: huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.NoOptionExhSwitchs.NoOptionExhSwitch.filter_rule:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Ipv6.ExtensionHeaderFilter.NoOptionExhSwitchs.NoOptionExhSwitch.FilterRule
	140, // 407: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.Option82.subscriber_id_mode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.Option82.SubscriberIdMode
	400, // 408: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.ServerAddresses.server_address:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.ServerAddresses.ServerAddress
	401, // 409: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.GatewayAddresses.gateway_address:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.GatewayAddresses.GatewayAddress
	402, // 410: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.RelaySourceOptionAddresses.relay_source_option_address:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.RelaySourceOptionAddresses.RelaySourceOptionAddress
	403, // 411: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.Opt82VendorSpecifics.opt82_vendor_specific:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.Opt82VendorSpecifics.Opt82VendorSpecific
	141, // 412: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.Opt82VendorSpecifics.Opt82VendorSpecific.sub_option_format:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayAttribute.Opt82VendorSpecifics.Opt82VendorSpecific.SubOptionFormat
	143, // 413: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayIf.Option82.subscriber_id_mode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayIf.Option82.SubscriberIdMode
	406, // 414: huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayIf.ServerAddresses.server_address:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpRelayIf.ServerAddresses.ServerAddress
	144, // 415: huawei_ifm.Ifm.Interfaces.Interface.DhcpIf.DhcpPacketSetting.server_enable:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpIf.DhcpPacketSetting.ServerEnable
	410, // 416: huawei_ifm.Ifm.Interfaces.Interface.DhcpIf.Option82Formats.option82_format:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpIf.Option82Formats.Option82Format
	145, // 417: huawei_ifm.Ifm.Interfaces.Interface.DhcpIf.Option82Formats.Option82Format.sub_option_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpIf.Option82Formats.Option82Format.SubOptionType
	146, // 418: huawei_ifm.Ifm.Interfaces.Interface.DhcpClientIf.ClientStatus.fsm_state:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpClientIf.ClientStatus.FsmState
	415, // 419: huawei_ifm.Ifm.Interfaces.Interface.DhcpSnoopingIf.StaticBinds.static_bind:type_name -> huawei_ifm.Ifm.Interfaces.Interface.DhcpSnoopingIf.StaticBinds.StaticBind
	421, // 420: huawei_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.DestinationAddresses.destination_address:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.DestinationAddresses.DestinationAddress
	422, // 421: huawei_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.DestinationIfs.destination_if:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Dhcpv6RelayAttribute.DestinationIfs.DestinationIf
	148, // 422: huawei_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic.mode:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic.Mode
	149, // 423: huawei_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic.direction:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic.Direction
	424, // 424: huawei_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic.collections:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic.Collections
	425, // 425: huawei_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic.Collections.collection:type_name -> huawei_ifm.Ifm.Interfaces.Interface.Nvo3VtepStatistics.Nvo3VtepStatistic.Collections.Collection
	150, // 426: huawei_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys.IfIcmpSecurity.action:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys.IfIcmpSecurity.Action
	151, // 427: huawei_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys.IfIcmpSecurity.icmp_name:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys.IfIcmpSecurity.IcmpName
	152, // 428: huawei_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys.IfIcmpSecurity.switch_operation:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfIcmpSecuritys.IfIcmpSecurity.SwitchOperation
	153, // 429: huawei_ifm.Ifm.Interfaces.Interface.IfIpOptSecuritys.IfIpOptSecurity.option_type:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfIpOptSecuritys.IfIpOptSecurity.OptionType
	154, // 430: huawei_ifm.Ifm.Interfaces.Interface.IfIpOptSecuritys.IfIpOptSecurity.switch:type_name -> huawei_ifm.Ifm.Interfaces.Interface.IfIpOptSecuritys.IfIpOptSecurity.Switch
	431, // 431: huawei_ifm.Ifm.Damp.Level.auto:type_name -> huawei_ifm.Ifm.Damp.Level.Auto
	432, // 432: huawei_ifm.Ifm.Damp.Level.manual:type_name -> huawei_ifm.Ifm.Damp.Level.Manual
	155, // 433: huawei_ifm.Ifm.StaticDimensionRanges.StaticDimensionRange.type:type_name -> huawei_ifm.Ifm.StaticDimensionRanges.StaticDimensionRange.Type
	435, // 434: huawei_ifm.Ifm.RemoteInterfaces.RemoteInterface.remote_statistics_state:type_name -> huawei_ifm.Ifm.RemoteInterfaces.RemoteInterface.RemoteStatisticsState
	156, // 435: huawei_ifm.Ifm.AutoRecoveryTimes.AutoRecoveryTime.error_down_type:type_name -> huawei_ifm.Ifm.AutoRecoveryTimes.AutoRecoveryTime.ErrorDownType
	436, // [436:436] is the sub-list for method output_type
	436, // [436:436] is the sub-list for method input_type
	436, // [436:436] is the sub-list for extension type_name
	436, // [436:436] is the sub-list for extension extendee
	0,   // [0:436] is the sub-list for field type_name
}

func init() { file_huawei_ifm_proto_init() }
func file_huawei_ifm_proto_init() {
	if File_huawei_ifm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_huawei_ifm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_GlobalConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Global); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Damp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_StaticDimensionRanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Ipv4InterfaceCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_RemoteInterfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_AutoRecoveryTimes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_HdlcDamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Dynamic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_MibStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_CommonStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Trunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Bas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_MulticastBas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Vrrp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Rbs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_BdifAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_ArpSending); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_NdSending); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Bfd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_NveAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Nvo3Gateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_ArpEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Evpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Efm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_VlanifAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_ControlFlap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TrapThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Damping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Dhcpv6RelayIf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DampState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_ErrorDown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_ArpStatusDetect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_ArpPortSecurity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Nve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpRelayAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpRelayIf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpIf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpClientIf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpSnoopingIf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_If8021PPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_ManagementPlaneDefendIf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_FrEncapsulation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TrackMonitorGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Nvo3VtepStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_IfIcmpSecuritys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_IfIpOptSecuritys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_IpVerifySrcAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_IpFwdBroadcast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Trunk_Members); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Trunk_Lacp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Trunk_Forwardings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Trunk_Members_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PortNegotiateParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Trunk_Members_Member_Lacp_PduStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Trunk_Lacp_TrackVrrp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Trunk_Lacp_MLag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Trunk_Forwardings_Forwarding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Bas_AccessType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Bas_AccessType_Layer2Subscriber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_MulticastBas_VlanType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_MulticastBas_VlanType_Qinq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_MulticastBas_VlanType_Vlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Vrrp_BackupGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Vrrp_TrackAdmins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Vrrp_IfTrackAdminVrrps_IfTrackAdminVrrp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode_AllSubvlans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Vrrp_BackupGroups_AdvertiseSendMode_OneSubvlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Vrrp_TrackAdmins_TrackAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Rbs_BindRbp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_MainInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_Mac); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L2SubInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_StatisticsEnableVlans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_VlanStackings_VlanStacking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_MainInterface_L2Attribute_PortIsolateGroups_PortIsolateGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_VlanType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_QinqTermination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_QinqStacking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_Dot1QTermination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanAny); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_VlanType_VlanTypeDot1Q); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanDot1Q); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_FlowType_UserVlanComm_UserVlanCommon_UserVlanQinqs_UserVlanQinq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L3SubInterface_VlanGroups_VlanGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceMacLimit_LimitType_LimitRuleRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_Mac_SubInterfaceSuppressions_SubInterfaceSuppression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Default); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Untag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Dot1Q); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Qinq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ethernet_L2SubInterface_FlowType_Qinq_Qinqs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_CommonAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Hotstandby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_Bypass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_HotstandbyState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_AutoBandwidths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_BfdForLsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_FastReroute_BypassAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_RsvpTe_LspPaths_LspPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Reoptimization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Hotstandby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_HotstandbyState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForLsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_BfdForTunnel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_LspPaths_LspPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_SrTe_Lsps_Lsp_CHops_CHop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType_Relative); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_TunnelProtocol_Type_MplsTe_TeTunnel_IgpAttr_MetricType_Absolute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_NveAttribute_Vtep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Efm_Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Efm_Session_ErrorFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Efm_Session_ErrorFrameSecond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Efm_Session_ErrorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Efm_Session_ErrorFramePeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_TlvEnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_DdpTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_IdentityTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ManagementAddresss_ManagementAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_ProtocolVlans_ProtocolVlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_VlanNames_VlanName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownTlvs_UnknownTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Lldp_Session_Neighbors_Neighbor_UnknownOrganizationallyDefinedTlvs_UnknownOrganizationallyDefinedTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Damping_IgnoreDamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Damping_Damp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_StaticArps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Vrrp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Rgm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Address_CommonAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Address_UnnumberedAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Address_CommonAddress_Addresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Address_NegotiateAddress_NegotiationAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_State_Addresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_State_Gateways); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_State_Statistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_State_Addresses_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_State_Gateways_Gateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_StaticArps_StaticArp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_Preempt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_VirtualIps_VirtualIp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackInterfaces_TrackInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackBfds_TrackBfd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv4_Vrrp_Groups_Group_TrackMtgrps_TrackMtgrp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_NdPrefixs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_NdCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_Cgas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_Pp6Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_Address_CommonAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_Address_CommonAddress_Addresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_NdPrefixs_NdPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_State_Addresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_State_Statistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_State_Addresses_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_NdCollection_IfProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_NdCollection_Proxys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_ReceiveRateLimits_ReceiveRateLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_NdCollection_AntiAttack_SourceIpReceive_IpRateLimits_IpRateLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_Cgas_Cga); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_HopByHopSwitch_Options_Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_RoutingSwitch_Options_Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_DestinationSwitch_Options_Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Ipv6_ExtensionHeaderFilter_NoOptionExhSwitchs_NoOptionExhSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_ArpPortSecurity_L2SubInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Nve_Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpRelayAttribute_Option82); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpRelayAttribute_ServerAddresses_ServerAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpRelayAttribute_GatewayAddresses_GatewayAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpRelayAttribute_RelaySourceOptionAddresses_RelaySourceOptionAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpRelayAttribute_Opt82VendorSpecifics_Opt82VendorSpecific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpRelayIf_Option82); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpRelayIf_ServerAddresses_ServerAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpIf_DhcpPacketSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpIf_Option82Formats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpIf_Option82InsertSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpIf_Option82Formats_Option82Format); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpClientIf_ClientStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpClientIf_ClientStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpSnoopingIf_BasicAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_DhcpSnoopingIf_StaticBinds_StaticBind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_RebuildOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_AccessLimitSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_PdRouteTrackVrrp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationAddresses_DestinationAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Dhcpv6RelayAttribute_DestinationIfs_DestinationIf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_Nvo3VtepStatistics_Nvo3VtepStatistic_Collections_Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_IfIcmpSecuritys_IfIcmpSecurity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Interfaces_Interface_IfIpOptSecuritys_IfIpOptSecurity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Global_Ipv4ConflictEnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Global_Ipv6ConflictEnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Damp_Level); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Damp_Level_Auto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_Damp_Level_Manual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_StaticDimensionRanges_StaticDimensionRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_RemoteInterfaces_RemoteInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_RemoteInterfaces_RemoteInterface_RemoteStatisticsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_huawei_ifm_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ifm_AutoRecoveryTimes_AutoRecoveryTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_huawei_ifm_proto_rawDesc,
			NumEnums:      158,
			NumMessages:   279,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_huawei_ifm_proto_goTypes,
		DependencyIndexes: file_huawei_ifm_proto_depIdxs,
		EnumInfos:         file_huawei_ifm_proto_enumTypes,
		MessageInfos:      file_huawei_ifm_proto_msgTypes,
	}.Build()
	File_huawei_ifm_proto = out.File
	file_huawei_ifm_proto_rawDesc = nil
	file_huawei_ifm_proto_goTypes = nil
	file_huawei_ifm_proto_depIdxs = nil
}
