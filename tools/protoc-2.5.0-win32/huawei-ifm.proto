syntax = "proto2";
// Automatically generated by ProtoYang
// ProtoYang-version 1
// module huawei-ifm
// revision 2020-02-15
// revision 2020-01-20
// revision 2020-01-15
// revision 2020-01-10
// revision 2019-09-29
// revision 2019-08-22
// revision 2019-04-15
// revision 2019-04-10
// namespace urn:huawei:yang:huawei-ifm

package huawei_ifm;

message Ifm {
   message GlobalConfig {
      optional uint32 statistic_interval = 1;
   }
   optional GlobalConfig global_config = 1;
   message Interfaces {
      message Interface {
         optional string name = 1;
         optional uint32 index = 2;
         enum Class1 {
            Class_MAINX_INTERFACE = 0;
            Class_SUBX_INTERFACE = 1;
         };
         optional Class1 class1 = 3;
         enum Type {
            Type_ETHERNET = 0;
            Type_GIGABITETHERNET = 2;
            Type_ETHX_TRUNK = 4;
            Type_IPX_TRUNK = 5;
            Type_VIRTUALX_ETHERNET = 6;
            Type_SERIAL = 8;
            Type_POS = 9;
            Type_CPOS = 10;
            Type_ATM = 11;
            Type_TUNNEL = 14;
            Type_VLANIF = 15;
            Type_NULL = 18;
            Type_LOOPBACK = 19;
            Type_X_100GE = 20;
            Type_LMPIF = 21;
            Type_MTUNNEL = 22;
            Type_X_40GE = 23;
            Type_X_10GE = 24;
            Type_GEBRIEF = 25;
            Type_METH = 26;
            Type_STACKX_PORT = 27;
            Type_SIP = 28;
            Type_E1 = 30;
            Type_MPX_GROUP = 31;
            Type_IMAX_GROUP = 32;
            Type_VMETH = 33;
            Type_REMOTEX_AP = 35;
            Type_VBRIDGE = 36;
            Type_ATMX_BUNDLE = 37;
            Type_FIBERX_CHANNEL = 38;
            Type_INFINIBAND = 39;
            Type_VBDIF = 40;
            Type_T1 = 41;
            Type_T3 = 42;
            Type_VC4 = 43;
            Type_VC12 = 44;
            Type_GLOBALX_VE = 45;
            Type_FABRICX_PORT = 46;
            Type_E3 = 48;
            Type_VP = 49;
            Type_DCNINTERFACE = 50;
            Type_CPOSX_TRUNK = 51;
            Type_TRUNKX_SERIAL = 52;
            Type_GLOBALX_MPX_GROUP = 53;
            Type_OTN = 55;
            Type_GLOBALX_IMAX_GROUP = 57;
            Type_POSX_TRUNK = 59;
            Type_GMPLSX_UNI = 63;
            Type_WDM = 64;
            Type_NVE = 65;
            Type_FCOEX_PORT = 67;
            Type_VIRTUALX_TEMPLATE = 68;
            Type_FC = 70;
            Type_X_4X10GE = 71;
            Type_X_10X10GE = 72;
            Type_X_3X40GE = 73;
            Type_X_4X25GE = 74;
            Type_X_25GE = 75;
            Type_IMETH = 79;
            Type_PWX_VE = 88;
            Type_VXX_TUNNEL = 89;
            Type_SERVICEIF = 90;
            Type_XGIGABITETHERNET = 91;
            Type_X_200GE = 92;
            Type_VIRTUALX_ODUK = 94;
            Type_FLEXE = 95;
            Type_FLEXEX_200GE = 96;
            Type_X_50X_100GE = 101;
            Type_X_50GE = 102;
            Type_FLEXEX_50G = 103;
            Type_FLEXEX_100G = 104;
            Type_FLEXEX_50X_100G = 105;
            Type_VIRTUALX_SERIAL = 107;
            Type_X_400GE = 108;
            Type_HPGE = 114;
            Type_VIRTUALX_IF = 116;
         };
         optional Type type = 4;
         optional string position = 5;
         optional string parent_name = 6;
         optional string number = 7;
         optional string description = 8;
         optional string aggregation_name = 9;
         enum AdminStatus {
            AdminStatus_DOWN = 0;
            AdminStatus_UP = 1;
         };
         optional AdminStatus admin_status = 10;
         enum LinkProtocol {
            LinkProtocol_ETHERNET = 0;
            LinkProtocol_PPP = 1;
            LinkProtocol_HDLC = 2;
            LinkProtocol_FR = 3;
            LinkProtocol_ATM = 6;
            LinkProtocol_TDM = 7;
            LinkProtocol_INVALID = 255;
         };
         optional LinkProtocol link_protocol = 11;
         optional bool statistic_enable = 12;
         optional uint32 bandwidth = 13;
         optional uint32 mtu = 14;
         optional bool spread_mtu_flag = 15;
         optional uint32 statistic_interval = 16;
         optional string vrf_name = 17;
         optional string mac_address = 18;
         message Dynamic {
            enum OperStatus {
               OperStatus_DOWN = 0;
               OperStatus_UP = 1;
            };
            optional OperStatus oper_status = 1;
            enum PhysicalStatus {
               PhysicalStatus_DOWN = 0;
               PhysicalStatus_UP = 1;
            };
            optional PhysicalStatus physical_status = 2;
            enum LinkStatus {
               LinkStatus_DOWN = 0;
               LinkStatus_UP = 1;
            };
            optional LinkStatus link_status = 3;
            optional uint32 mtu = 4;
            optional uint64 bandwidth = 5;
            enum Ipv4Status {
               Ipv4Status_DOWN = 0;
               Ipv4Status_UP = 1;
            };
            optional Ipv4Status ipv4_status = 6;
            enum Ipv6Status {
               Ipv6Status_DOWN = 0;
               Ipv6Status_UP = 1;
            };
            optional Ipv6Status ipv6_status = 7;
            optional bool is_control_flap_damp = 8;
            optional string mac_address = 9;
            optional string line_protocol_up_time = 10;
            optional bool is_offline = 11;
            enum LinkQualityGrade {
               LinkQualityGrade_GOOD = 0;
               LinkQualityGrade_HIGH = 1;
               LinkQualityGrade_MIDDLE = 2;
               LinkQualityGrade_LOW = 4;
            };
            optional LinkQualityGrade link_quality_grade = 12;
            optional uint32 sub_if_counts = 13;
         }
         optional Dynamic dynamic = 19;
         message MibStatistics {
            optional uint64 receive_byte = 1;
            optional uint64 send_byte = 2;
            optional uint64 receive_packet = 3;
            optional uint64 send_packet = 4;
            optional uint64 receive_unicast_packet = 5;
            optional uint64 receive_multicast_packet = 6;
            optional uint64 receive_broad_packet = 7;
            optional uint64 send_unicast_packet = 8;
            optional uint64 send_multicast_packet = 9;
            optional uint64 send_broad_packet = 10;
            optional uint64 receive_error_packet = 11;
            optional uint64 receive_drop_packet = 12;
            optional uint64 send_error_packet = 13;
            optional uint64 send_drop_packet = 14;
         }
         optional MibStatistics mib_statistics = 20;
         message CommonStatistics {
            optional uint32 stati_interval = 1;
            optional uint64 in_byte_rate = 2;
            optional uint64 in_bit_rate = 3;
            optional uint64 in_packet_rate = 4;
            optional string in_use_rate = 5;
            optional uint64 out_byte_rate = 6;
            optional uint64 out_bit_rate = 7;
            optional uint64 out_packet_rate = 8;
            optional string out_use_rate = 9;
            optional uint64 receive_byte = 10;
            optional uint64 send_byte = 11;
            optional uint64 receive_packet = 12;
            optional uint64 send_packet = 13;
            optional uint64 receive_unicast_packet = 14;
            optional uint64 receive_multicast_packet = 15;
            optional uint64 receive_broad_packet = 16;
            optional uint64 send_unicast_packet = 17;
            optional uint64 send_multicast_packet = 18;
            optional uint64 send_broad_packet = 19;
            optional uint64 receive_error_packet = 20;
            optional uint64 receive_drop_packet = 21;
            optional uint64 send_error_packet = 22;
            optional uint64 send_drop_packet = 23;
            optional uint64 send_unicast_bit = 24;
            optional uint64 receive_unicast_bit = 25;
            optional uint64 send_multicast_bit = 26;
            optional uint64 receive_multicast_bit = 27;
            optional uint64 send_broad_bit = 28;
            optional uint64 receive_broad_bit = 29;
            optional uint64 send_unicast_bit_rate = 30;
            optional uint64 receive_unicast_bit_rate = 31;
            optional uint64 send_multicast_bit_rate = 32;
            optional uint64 receive_multicast_bit_rate = 33;
            optional uint64 send_broad_bit_rate = 34;
            optional uint64 receive_broad_bit_rate = 35;
            optional uint64 send_unicast_packet_rate = 36;
            optional uint64 receive_unicast_packet_rate = 37;
            optional uint64 send_multicast_packet_rate = 38;
            optional uint64 receive_multicast_packet_rate = 39;
            optional uint64 send_broadcast_packet_rate = 40;
            optional uint64 receive_broadcast_packet_rate = 41;
         }
         optional CommonStatistics common_statistics = 21;
         message Trunk {
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_ETHX_TRUNK = 1;
               Type_IPX_TRUNK = 2;
            };
            optional Type type = 1;
            enum WorkMode {
               INVALID_ENUM_VALUE_WorkMode = 0;
               WorkMode_MANUAL = 1;
               WorkMode_DYNAMIC = 2;
               WorkMode_STATIC = 3;
               WorkMode_BACKUP = 4;
               WorkMode_INVALID = 5;
            };
            optional WorkMode work_mode = 2;
            message Members {
               message Member {
                  optional string name = 1;
                  optional uint32 weight = 2;
                  enum MemberState {
                     MemberState_DOWN = 0;
                     MemberState_UP = 1;
                  };
                  optional MemberState member_state = 3;
                  enum Status {
                     Status_DOWN = 0;
                     Status_UP = 1;
                  };
                  optional Status status = 4;
                  optional bool is_master = 5;
                  enum Role {
                     Role_SLAVE = 0;
                     Role_MASTER = 1;
                     Role_COMMON = 2;
                  };
                  optional Role role = 6;
                  enum LacpNegotiationMode {
                     INVALID_ENUM_VALUE_LacpNegotiationMode = 0;
                     LacpNegotiationMode_ACTIVE = 1;
                     LacpNegotiationMode_PASSIVE = 2;
                  };
                  optional LacpNegotiationMode lacp_negotiation_mode = 7;
                  message Lacp {
                     message PortAttributes {
                        optional uint32 priority = 1;
                        enum Role {
                           Role_NONE = 0;
                           Role_MASTER = 1;
                           Role_SLAVE = 2;
                        };
                        optional Role role = 2;
                     }
                     optional PortAttributes port_attributes = 1;
                     message PortNegotiateParameter {
                        enum Status {
                           Status_UNSELECTED = 0;
                           Status_SELECTED = 1;
                           Status_INDEP = 2;
                           Status_FORCEX_UP = 3;
                        };
                        optional Status status = 1;
                        enum PortType {
                           PortType_NULL = 0;
                           PortType_X_10M = 1;
                           PortType_X_100M = 2;
                           PortType_X_1GE = 3;
                           PortType_X_10GE = 4;
                           PortType_X_100GE = 5;
                           PortType_X_1TE = 6;
                           PortType_X_10TE = 7;
                           PortType_X_100TE = 8;
                           PortType_X_1000TE = 9;
                           PortType_X_40GE = 10;
                           PortType_X_400GE = 11;
                           PortType_X_25GE = 12;
                        };
                        optional PortType port_type = 2;
                        optional string actor_state = 3;
                        optional uint32 actor_portkey = 4;
                        optional string actor_sysid = 5;
                        optional uint32 actor_portno = 6;
                        optional string partner_sysprimac = 7;
                        optional uint32 partner_syspri = 8;
                        optional string partner_sysid = 9;
                        optional uint32 partner_portpri = 10;
                        optional uint32 partner_id = 11;
                        optional uint32 partner_portkey = 12;
                        optional string partner_state = 13;
                        optional bool reference_port = 14;
                     }
                     optional PortNegotiateParameter port_negotiate_parameter = 2;
                     message PduStatistic {
                        optional uint32 recv_pdunum = 1;
                        optional uint32 recv_err_pdunum = 2;
                        optional uint32 send_pdunum = 3;
                        optional uint32 recv_marker_pdunum = 4;
                        optional uint32 recv_err_makernum = 5;
                        optional uint32 send_makernum = 6;
                     }
                     optional PduStatistic pdu_statistic = 3;
                  }
                  optional Lacp lacp = 8;
               }
               repeated Member member = 1;
            }
            optional Members members = 3;
            message Lacp {
               enum ReceiveTimeoutType {
                  ReceiveTimeoutType_SLOW = 0;
                  ReceiveTimeoutType_FAST = 1;
               };
               optional ReceiveTimeoutType receive_timeout_type = 1;
               optional uint32 fast_timeout_value = 2;
               optional bool support_preempt = 3;
               enum SelectPortStd {
                  INVALID_ENUM_VALUE_SelectPortStd = 0;
                  SelectPortStd_SPEED = 1;
                  SelectPortStd_PRIORITY = 3;
               };
               optional SelectPortStd select_port_std = 4;
               optional uint32 preempt_delay = 5;
               optional uint32 max_active_num = 6;
               optional uint32 collect_max_delay = 7;
               optional bool mix_rate_enable = 8;
               optional bool backup_enable = 9;
               optional bool damp_state_enable = 10;
               optional bool damp_mac_enable = 11;
               optional string sys_mac = 12;
               message TrackVrrp {
                  optional uint32 vrrp_id = 1;
                  optional string if_name = 2;
                  optional uint32 sys_priority = 3;
                  optional bool id_ext = 4;
               }
               optional TrackVrrp track_vrrp = 13;
               optional uint32 portup_num = 14;
               optional uint32 oper_syspri = 15;
               optional string oper_sysmac = 16;
               enum SysmacSource {
                  INVALID_ENUM_VALUE_SysmacSource = 0;
                  SysmacSource_LOCAL = 1;
                  SysmacSource_REMOTE = 2;
               };
               optional SysmacSource sysmac_source = 17;
               optional uint32 sys_priority = 18;
               message MLag {
                  optional uint32 sys_priority = 1;
                  optional string sys_mac = 2;
               }
               optional MLag m_lag = 19;
               optional uint32 portkey = 20;
            }
            optional Lacp lacp = 4;
            optional uint32 min_up_num = 5;
            optional uint32 min_up_bandwidth = 6;
            optional uint32 max_up_num = 7;
            enum HashType {
               INVALID_ENUM_VALUE_HashType = 0;
               HashType_IP = 1;
               HashType_MAC = 2;
               HashType_PACKETX_ALL = 3;
               HashType_DESX_IP = 4;
               HashType_DESX_MAC = 5;
               HashType_SRCX_IP = 6;
               HashType_SRCX_MAC = 7;
               HashType_ENHANCED = 8;
               HashType_RESILIENT = 9;
               HashType_INVALID = 10;
               HashType_L4 = 11;
               HashType_RANDOM = 12;
               HashType_ROUNDX_ROBIN = 13;
               HashType_SYMMETRIC = 14;
               HashType_SYMMETRICX_COMPLEMENT = 15;
            };
            optional HashType hash_type = 8;
            optional uint32 up_member_num = 9;
            optional uint32 online_member_num = 10;
            optional uint32 member_num = 11;
            optional uint64 max_bandwidth = 12;
            optional uint32 smart_link_flush_vlan = 13;
            optional bool inactive_port_shutdown = 14;
            optional bool preempt_enable = 15;
            optional uint32 preempt_delay_minutes = 16;
            optional uint32 preempt_delay_seconds = 17;
            optional uint32 preempt_delay_milliseconds = 18;
            message Forwardings {
               message Forwarding {
                  optional uint32 id = 1;
                  optional string master_port = 2;
                  optional string slave_port = 3;
               }
               repeated Forwarding forwarding = 1;
            }
            optional Forwardings forwardings = 19;
         }
         optional Trunk trunk = 22;
         message Bas {
            message AccessType {
               message Layer2Subscriber {
               }
               optional Layer2Subscriber layer2_subscriber = 1;
            }
            optional AccessType access_type = 1;
         }
         optional Bas bas = 23;
         message MulticastBas {
            optional uint32 user_aggregation_pevlan = 1;
            optional uint32 user_aggregation_cevlan = 2;
            optional bool copy_by_session_enable = 3;
            optional bool copy_by_vlan_enable = 4;
            optional bool authorization_enable = 5;
            optional bool igmp_query_auto_send_enable = 6;
            message VlanType {
               message Qinq {
                  optional uint32 user_aggregation_pevlan = 1;
                  optional uint32 user_aggregation_cevlan = 2;
               }
               optional Qinq qinq = 1;
               message Vlan {
                  optional uint32 user_aggregation_vlan = 1;
               }
               optional Vlan vlan = 2;
            }
            optional VlanType vlan_type = 7;
         }
         optional MulticastBas multicast_bas = 24;
         message Vrrp {
            message IfTrackAdminVrrps {
               message IfTrackAdminVrrp {
                  optional uint32 id = 1;
                  optional string vrrp_if_name = 2;
               }
               repeated IfTrackAdminVrrp if_track_admin_vrrp = 1;
            }
            optional IfTrackAdminVrrps if_track_admin_vrrps = 1;
            message BackupGroups {
               optional bool ttlcheck_flag = 1;
               optional uint32 recover_delay = 2;
               optional bool arpsend_simple = 3;
               message AdvertiseSendMode {
                  message AllSubvlans {
                     optional bool sendmode_all = 1;
                  }
                  optional AllSubvlans all_subvlans = 1;
                  message OneSubvlan {
                     optional uint32 send_subvlanid = 1;
                  }
                  optional OneSubvlan one_subvlan = 2;
               }
               optional AdvertiseSendMode advertise_send_mode = 4;
            }
            optional BackupGroups backup_groups = 2;
            message TrackAdmins {
               message TrackAdmin {
                  optional uint32 id = 1;
                  optional string if_name = 2;
               }
               repeated TrackAdmin track_admin = 1;
            }
            optional TrackAdmins track_admins = 3;
         }
         optional Vrrp vrrp = 25;
         message Rbs {
            message BindRbp {
               optional string name = 1;
            }
            optional BindRbp bind_rbp = 1;
         }
         optional Rbs rbs = 26;
         message Ethernet {
            message MainInterface {
               message L2Attribute {
                  enum LinkType {
                     INVALID_ENUM_VALUE_LinkType = 0;
                     LinkType_ACCESS = 1;
                     LinkType_TRUNK = 2;
                     LinkType_HYBRID = 3;
                     LinkType_DOT1QTUNNEL = 4;
                  };
                  optional LinkType link_type = 1;
                  optional uint32 pvid = 2;
                  optional string trunk_vlans = 3;
                  optional bool untag_discarding = 4;
                  message VlanStackings {
                     message VlanStacking {
                        optional uint32 stacking_vlan = 1;
                        optional bool ce_default = 2;
                        optional string trans_vlans = 3;
                     }
                     repeated VlanStacking vlan_stacking = 1;
                  }
                  optional VlanStackings vlan_stackings = 5;
                  message StatisticsEnableVlans {
                     optional string vlans = 1;
                  }
                  optional StatisticsEnableVlans statistics_enable_vlans = 6;
                  message PortIsolateGroups {
                     message PortIsolateGroup {
                        optional int32 group_id = 1;
                     }
                     repeated PortIsolateGroup port_isolate_group = 1;
                  }
                  optional PortIsolateGroups port_isolate_groups = 7;
               }
               optional L2Attribute l2_attribute = 1;
               enum VlanSwap {
                  VlanSwap_DISABLE = 0;
                  VlanSwap_ENABLE = 1;
               };
               optional VlanSwap vlan_swap = 2;
               optional string qinq_protocol = 3;
            }
            optional MainInterface main_interface = 1;
            message L3SubInterface {
               message FlowType {
                  message VlanType {
                     message VlanTypeDot1Q {
                        optional uint32 vlan_type_vid = 1;
                     }
                     optional VlanTypeDot1Q vlan_type_dot1q = 1;
                  }
                  optional VlanType vlan_type = 1;
                  message QinqTermination {
                  }
                  optional QinqTermination qinq_termination = 2;
                  message QinqStacking {
                  }
                  optional QinqStacking qinq_stacking = 3;
                  message UserVlanComm {
                     message UserVlanCommon {
                        message UserVlanQinqs {
                           message UserVlanQinq {
                              optional uint32 pe_vlan_begin = 1;
                              optional uint32 pe_vlan_end = 2;
                              optional uint32 ce_vlan_begin = 3;
                              optional uint32 ce_vlan_end = 4;
                           }
                           repeated UserVlanQinq user_vlan_qinq = 1;
                        }
                        optional UserVlanQinqs user_vlan_qinqs = 1;
                        message UserVlanDot1Q {
                           optional string vlan_list = 1;
                        }
                        optional UserVlanDot1Q user_vlan_dot1q = 2;
                     }
                     optional UserVlanCommon user_vlan_common = 1;
                  }
                  optional UserVlanComm user_vlan_comm = 4;
                  message Dot1QTermination {
                  }
                  optional Dot1QTermination dot1q_termination = 5;
                  message UserVlanAny {
                  }
                  optional UserVlanAny user_vlan_any = 6;
               }
               optional FlowType flow_type = 1;
               message VlanGroups {
                  message VlanGroup {
                     optional uint32 id = 1;
                     enum Mode {
                        INVALID_ENUM_VALUE_Mode = 0;
                        Mode_MULTIPLE = 1;
                        Mode_SINGLE = 2;
                     };
                     optional Mode mode = 2;
                     optional bool statistic_enable = 3;
                     optional string description = 4;
                  }
                  repeated VlanGroup vlan_group = 1;
               }
               optional VlanGroups vlan_groups = 2;
            }
            optional L3SubInterface l3_sub_interface = 2;
            message Mac {
               message SubInterfaceMacLimit {
                  message LimitType {
                     message LimitParameters {
                        optional uint32 maximum = 1;
                        optional uint32 rate = 2;
                        enum Action {
                           Action_DISCARD = 0;
                           Action_FORWARD = 1;
                        };
                        optional Action action = 3;
                        enum Alarm {
                           Alarm_DISABLE = 0;
                           Alarm_ENABLE = 1;
                        };
                        optional Alarm alarm = 4;
                     }
                     optional LimitParameters limit_parameters = 1;
                     message LimitRuleRef {
                        optional string rule_name = 1;
                     }
                     optional LimitRuleRef limit_rule_ref = 2;
                  }
                  optional LimitType limit_type = 1;
               }
               optional SubInterfaceMacLimit sub_interface_mac_limit = 1;
               message SubInterfaceSuppressions {
                  message SubInterfaceSuppression {
                     enum Type {
                        Type_BROADCAST = 0;
                        Type_MULTICAST = 1;
                        Type_UNKNOWNX_UNICAST = 2;
                     };
                     optional Type type = 1;
                     enum Direction {
                        Direction_INBOUND = 0;
                        Direction_OUTBOUND = 1;
                     };
                     optional Direction direction = 2;
                     optional uint64 cir = 3;
                     optional uint64 cbs = 4;
                  }
                  repeated SubInterfaceSuppression sub_interface_suppression = 1;
               }
               optional SubInterfaceSuppressions sub_interface_suppressions = 2;
            }
            optional Mac mac = 3;
            message L2SubInterface {
               enum LocalSwitch {
                  LocalSwitch_DISABLE = 0;
                  LocalSwitch_ENABLE = 1;
               };
               optional LocalSwitch local_switch = 1;
               message FlowAction {
                  enum ActionType {
                     ActionType_POPX_OUTER = 0;
                     ActionType_PUSH1X_LAYER = 1;
                     ActionType_SWAP = 2;
                     ActionType_MAPX_OFFSETX_INCREASE = 3;
                     ActionType_MAPX_1X_TOX_1 = 4;
                     ActionType_MAPX_2X_TOX_1 = 5;
                     ActionType_MAPX_1X_TOX_2 = 6;
                     ActionType_MAPX_2X_TOX_2 = 7;
                     ActionType_POPX_DOUBLE = 8;
                     ActionType_PUSH2X_LAYER = 9;
                     ActionType_MAPX_OFFSETX_DECREASE = 10;
                  };
                  optional ActionType action_type = 1;
                  optional uint32 out_vlan_id = 2;
                  optional uint32 inner_vlan_id = 3;
                  optional uint32 outer_8021p = 4;
                  optional uint32 inner_8021p = 5;
                  optional uint32 offset_value = 6;
               }
               optional FlowAction flow_action = 2;
               message FlowType {
                  message Default {
                  }
                  optional Default default = 1;
                  message Untag {
                  }
                  optional Untag untag = 2;
                  message Dot1Q {
                  }
                  optional Dot1Q dot1q = 3;
                  message Qinq {
                     message Qinqs {
                     }
                     optional Qinqs qinqs = 1;
                  }
                  optional Qinq qinq = 4;
               }
               optional FlowType flow_type = 3;
            }
            optional L2SubInterface l2_sub_interface = 4;
         }
         optional Ethernet ethernet = 27;
         optional bool is_l2_switch = 28;
         enum RouterType {
            RouterType_PTOP = 0;
            RouterType_PTOMP = 1;
            RouterType_BROADCAST = 2;
            RouterType_NBMA = 3;
            RouterType_INVALID = 255;
         };
         optional RouterType router_type = 29;
         optional bool clear_ip_df = 30;
         optional bool link_up_down_trap_enable = 31;
         enum StatisticMode {
            INVALID_ENUM_VALUE_StatisticMode = 0;
            StatisticMode_INTERFACEX_BASED = 1;
            StatisticMode_VLANX_GROUPX_BASED = 2;
         };
         optional StatisticMode statistic_mode = 32;
         optional bool l2_mode_enable = 33;
         optional uint32 down_delay_time = 34;
         message TunnelProtocol {
            message Type {
               message MplsTe {
                  message TeTunnel {
                     message CommonAttributes {
                        enum SignalProtocol {
                           INVALID_ENUM_VALUE_SignalProtocol = 0;
                           SignalProtocol_RSVPX_TE = 2;
                           SignalProtocol_CRX_STATIC = 4;
                           SignalProtocol_SEGMENTX_ROUTING = 6;
                        };
                        optional SignalProtocol signal_protocol = 1;
                        optional uint32 tunnel_id = 2;
                        optional string egress_lsr_id = 3;
                        optional bool reserved_for_binding = 4;
                        optional bool lsp_tp_outbound = 5;
                        optional bool statistic_enable = 6;
                        optional bool lock_flag = 7;
                     }
                     optional CommonAttributes common_attributes = 1;
                     message RsvpTe {
                        optional string signalled_tunnel_name = 1;
                        optional bool traffic_enable = 2;
                        optional uint32 bandwidth = 3;
                        optional uint32 setup_priority = 4;
                        optional uint32 hold_priority = 5;
                        optional bool ordinary_enable = 6;
                        optional bool best_effort_enable = 7;
                        optional bool backup_frr_inuse = 8;
                        optional bool path_disjoint_calculate = 9;
                        optional bool soft_preempt_enable = 10;
                        optional bool disable_cspf = 11;
                        enum ReserveStyle {
                           INVALID_ENUM_VALUE_ReserveStyle = 0;
                           ReserveStyle_SE = 1;
                           ReserveStyle_FF = 2;
                        };
                        optional ReserveStyle reserve_style = 12;
                        enum RecordRoute {
                           INVALID_ENUM_VALUE_RecordRoute = 0;
                           RecordRoute_DISABLE = 1;
                           RecordRoute_RECORDX_ROUTEX_ONLY = 2;
                           RecordRoute_RECORDX_LABEL = 3;
                        };
                        optional RecordRoute record_route = 13;
                        optional bool reoptimization = 14;
                        optional int32 reoptimization_frequency = 15;
                        optional bool inter_area_reoptimization = 16;
                        enum TieBreaking {
                           INVALID_ENUM_VALUE_TieBreaking = 0;
                           TieBreaking_LEASTX_FILL = 1;
                           TieBreaking_MOSTX_FILL = 2;
                           TieBreaking_RANDOM = 3;
                           TieBreaking_DEFAULT = 4;
                        };
                        optional TieBreaking tie_breaking = 17;
                        enum PathMetricType {
                           INVALID_ENUM_VALUE_PathMetricType = 0;
                           PathMetricType_NONE = 1;
                           PathMetricType_IGP = 2;
                           PathMetricType_TE = 3;
                        };
                        optional PathMetricType path_metric_type = 18;
                        optional bool metric_inherit_igp = 19;
                        enum PceDelegate {
                           PceDelegate_NO = 0;
                           PceDelegate_ACTIVE = 1;
                           PceDelegate_ONLYX_STATUSX_REPORT = 2;
                        };
                        optional PceDelegate pce_delegate = 20;
                        enum EntropyLabel {
                           EntropyLabel_DEFAULT = 0;
                           EntropyLabel_ENABLE = 1;
                           EntropyLabel_BLOCK = 2;
                        };
                        optional EntropyLabel entropy_label = 21;
                        optional bool split_tunnel = 22;
                        optional bool soft_preempt_block = 23;
                        message FastReroute {
                           optional bool enable = 1;
                           enum Mode {
                              INVALID_ENUM_VALUE_Mode = 0;
                              Mode_FACILITYX_BACKUP = 1;
                              Mode_DETOURX_BACKUP = 2;
                           };
                           optional Mode mode = 2;
                           optional bool bandwidth_protection_enable = 3;
                           optional uint32 frr_bandwidth = 4;
                           optional uint32 setup_priority = 5;
                           optional uint32 hold_priority = 6;
                           optional string include_any = 7;
                           optional string exclude_any = 8;
                           optional string include_all = 9;
                           repeated string include_any_affinity_name = 10;
                           repeated string include_all_affinity_name = 11;
                           repeated string exclude_affinity_name = 12;
                           message BypassAttributes {
                              optional uint32 frr_bandwidth = 1;
                              optional uint32 setup_priority = 2;
                              optional uint32 hold_priority = 3;
                              optional string include_any = 4;
                              optional string exclude_any = 5;
                              optional string include_all = 6;
                              repeated string include_any_affinity_name = 7;
                              repeated string include_all_affinity_name = 8;
                              repeated string exclude_affinity_name = 9;
                           }
                           optional BypassAttributes bypass_attributes = 13;
                        }
                        optional FastReroute fast_reroute = 24;
                        message Hotstandby {
                           optional int32 wtr = 1;
                           enum RevertiveMode {
                              RevertiveMode_NONX_REVERTIVE = 0;
                              RevertiveMode_REVERTIVE = 1;
                           };
                           optional RevertiveMode revertive_mode = 2;
                           optional bool path_overlap = 3;
                           optional bool dynamic_bandwidth = 4;
                        }
                        optional Hotstandby hotstandby = 25;
                        message LspPaths {
                           message LspPath {
                              enum PathType {
                                 PathType_PRIMARY = 0;
                                 PathType_HOTX_STANDBY = 1;
                                 PathType_ORDINARY = 2;
                                 PathType_BESTX_EFFORT = 3;
                              };
                              optional PathType path_type = 1;
                              optional string explicit_path_name = 2;
                              optional uint32 hop_limit = 3;
                              optional uint32 lsp_id = 4;
                              enum LspState {
                                 LspState_DOWN = 0;
                                 LspState_UP = 1;
                                 LspState_X_ = 2;
                                 LspState_NONE = 3;
                              };
                              optional LspState lsp_state = 5;
                              optional uint32 modify_lsp_id = 6;
                              optional string include_all = 7;
                              optional string include_any = 8;
                              optional string exclude_any = 9;
                              repeated string include_any_affinity_name = 10;
                              repeated string include_all_affinity_name = 11;
                              repeated string exclude_affinity_name = 12;
                           }
                           repeated LspPath lsp_path = 1;
                        }
                        optional LspPaths lsp_paths = 26;
                        message Bypass {
                           optional bool enable = 1;
                           repeated string protection_interfaces = 2;
                        }
                        optional Bypass bypass = 27;
                        message HotstandbyState {
                           enum SwitchResult {
                              SwitchResult_MAINX_LSP = 0;
                              SwitchResult_HSBX_LSP = 1;
                              SwitchResult_BESTX_EFFORTX_LSP = 2;
                           };
                           optional SwitchResult switch_result = 1;
                           optional bool wtr_state = 2;
                           optional int32 wtr_remaining_time = 3;
                           enum SwitchState {
                              SwitchState_NONE = 0;
                              SwitchState_WAITX_TOX_RESTORE = 1;
                           };
                           optional SwitchState switch_state = 4;
                           enum UsingOverlap {
                              UsingOverlap_DIFFERENTX_PATH = 0;
                              UsingOverlap_PARTIALX_LINKX_SAME = 1;
                              UsingOverlap_NOTX_COMPARE = 2;
                              UsingOverlap_EXACTLYX_SAMEX_PATH = 3;
                           };
                           optional UsingOverlap using_overlap = 5;
                           enum SwitchReason {
                              SwitchReason_NONE = 0;
                              SwitchReason_FORCE = 1;
                              SwitchReason_SIGNALX_FAIL = 2;
                              SwitchReason_DOX_NOTX_REVERT = 3;
                              SwitchReason_WAITX_TOX_RESTORE = 4;
                              SwitchReason_BFDX_DOWN = 5;
                              SwitchReason_SIGNALX_DEGRADE = 6;
                              SwitchReason_FRRX_INUSE = 7;
                           };
                           optional SwitchReason switch_reason = 6;
                        }
                        optional HotstandbyState hotstandby_state = 28;
                        message AutoBandwidths {
                           enum Mode {
                              INVALID_ENUM_VALUE_Mode = 0;
                              Mode_COLLECTX_BW = 1;
                              Mode_ADJUSTMENT = 2;
                              Mode_NONE = 3;
                           };
                           optional Mode mode = 1;
                           optional int32 threshold_percent = 2;
                           optional uint64 threshold_absolute = 3;
                           optional int32 frequency = 4;
                           optional uint64 max_bandwidth = 5;
                           optional uint64 min_bandwidth = 6;
                           optional uint32 overflow_limit = 7;
                           optional uint32 underflow_limit = 8;
                           enum ThresholdLogic {
                              ThresholdLogic_AND = 0;
                              ThresholdLogic_OR = 1;
                           };
                           optional ThresholdLogic threshold_logic = 9;
                        }
                        optional AutoBandwidths auto_bandwidths = 29;
                        message BfdForLsp {
                           enum Ability {
                              INVALID_ENUM_VALUE_Ability = 0;
                              Ability_ENABLE = 1;
                              Ability_BLOCK = 2;
                           };
                           optional Ability ability = 1;
                           enum Mode {
                              INVALID_ENUM_VALUE_Mode = 0;
                              Mode_ONEX_ARMX_ECHO = 1;
                              Mode_OPTIONX_TLV = 3;
                           };
                           optional Mode mode = 2;
                           optional uint32 min_tx_interval = 3;
                           optional uint32 min_rx_interval = 4;
                           optional uint32 detect_multiplier = 5;
                        }
                        optional BfdForLsp bfd_for_lsp = 30;
                     }
                     optional RsvpTe rsvp_te = 2;
                     message SrTe {
                        optional uint32 bandwidth = 1;
                        optional uint32 setup_priority = 2;
                        optional uint32 hold_priority = 3;
                        enum PceDelegate {
                           PceDelegate_NO = 0;
                           PceDelegate_ACTIVE = 1;
                           PceDelegate_ONLYX_STATUSX_REPORT = 2;
                        };
                        optional PceDelegate pce_delegate = 4;
                        optional bool split_tunnel = 5;
                        optional uint32 binding_sid = 6;
                        optional uint32 reverse_binding_sid = 7;
                        enum PathVerification {
                           PathVerification_INHERIT = 0;
                           PathVerification_ENABLE = 1;
                           PathVerification_DISABLE = 2;
                        };
                        optional PathVerification path_verification = 8;
                        optional bool adjacency_sid = 9;
                        message Reoptimization {
                           optional int32 frequency = 1;
                        }
                        optional Reoptimization reoptimization = 10;
                        message Hotstandby {
                           enum RevertiveMode {
                              RevertiveMode_NONX_REVERTIVE = 0;
                              RevertiveMode_REVERTIVE = 1;
                           };
                           optional RevertiveMode revertive_mode = 1;
                           optional int32 wtr_time = 2;
                           optional bool path_overlap = 3;
                        }
                        optional Hotstandby hotstandby = 11;
                        message LspPaths {
                           message LspPath {
                              optional string explicit_path_name = 2;
                              optional uint32 hop_limit = 3;
                              enum LspState {
                                 LspState_DOWN = 0;
                                 LspState_UP = 1;
                                 LspState_X_ = 2;
                                 LspState_NONE = 3;
                              };
                              optional LspState lsp_state = 4;
                              optional uint32 lsp_id = 5;
                              optional uint32 modify_lsp_id = 6;
                              optional string include_all = 7;
                              optional string include_any = 8;
                              optional string exclude_any = 9;
                              repeated string include_all_affinity_name = 10;
                              repeated string include_any_affinity_name = 11;
                              repeated string exclude_any_affinity_name = 12;
                              repeated string exclude_affinity_name = 13;
                           }
                           repeated LspPath lsp_path = 1;
                        }
                        optional LspPaths lsp_paths = 12;
                        message HotstandbyState {
                           enum SwitchResult {
                              SwitchResult_MAINX_LSP = 0;
                              SwitchResult_HSBX_LSP = 1;
                              SwitchResult_BESTX_EFFORTX_LSP = 2;
                           };
                           optional SwitchResult switch_result = 1;
                           optional bool wtr_state = 2;
                           optional int32 wtr_remaining_time = 3;
                           enum SwitchState {
                              SwitchState_NONE = 0;
                              SwitchState_WAITX_TOX_RESTORE = 1;
                           };
                           optional SwitchState switch_state = 4;
                           enum UsingOverlap {
                              UsingOverlap_DIFFERENTX_PATH = 0;
                              UsingOverlap_PARTIALX_LINKX_SAME = 1;
                              UsingOverlap_NOTX_COMPARE = 2;
                              UsingOverlap_EXACTLYX_SAMEX_PATH = 3;
                           };
                           optional UsingOverlap using_overlap = 5;
                           enum SwitchReason {
                              SwitchReason_NONE = 0;
                              SwitchReason_WAITX_TOX_RESTORE = 1;
                              SwitchReason_FORCE = 2;
                              SwitchReason_SIGNALX_FAIL = 3;
                              SwitchReason_DOX_NOTX_REVERT = 4;
                              SwitchReason_BFDX_DOWN = 5;
                              SwitchReason_SIGNALX_DEGRADE = 6;
                              SwitchReason_FRRX_INUSE = 7;
                           };
                           optional SwitchReason switch_reason = 6;
                        }
                        optional HotstandbyState hotstandby_state = 13;
                        message Lsps {
                           message Lsp {
                              optional string ingress_lsr_id = 1;
                              optional string egress_lsr_id = 2;
                              optional uint32 session_id = 3;
                              optional uint32 lsp_id = 4;
                              message CHops {
                                 message CHop {
                                    optional uint32 index = 1;
                                    enum LabelType {
                                       LabelType_LINK = 0;
                                       LabelType_NODE = 1;
                                       LabelType_BINDING = 2;
                                    };
                                    optional LabelType label_type = 3;
                                    optional uint32 label = 4;
                                    optional string nai = 5;
                                 }
                                 repeated CHop c_hop = 1;
                              }
                              optional CHops c_hops = 5;
                           }
                           repeated Lsp lsp = 1;
                        }
                        optional Lsps lsps = 14;
                        message BfdForLsp {
                           optional bool enable = 1;
                           enum Mode {
                              INVALID_ENUM_VALUE_Mode = 0;
                              Mode_ONEX_ARMX_ECHO = 1;
                              Mode_SEAMLESS = 2;
                              Mode_OPTIONX_TLV = 3;
                           };
                           optional Mode mode = 2;
                           optional uint32 min_tx_interval = 3;
                           optional uint32 min_rx_interval = 4;
                           optional uint32 detect_multiplier = 5;
                           optional bool block = 6;
                           optional bool only_detection_primary = 7;
                           enum Ability {
                              INVALID_ENUM_VALUE_Ability = 0;
                              Ability_ENABLE = 1;
                              Ability_BLOCK = 2;
                           };
                           optional Ability ability = 8;
                        }
                        optional BfdForLsp bfd_for_lsp = 15;
                        message BfdForTunnel {
                           optional bool enable = 1;
                           enum Mode {
                              INVALID_ENUM_VALUE_Mode = 0;
                              Mode_ONEX_ARMX_ECHO = 1;
                              Mode_SEAMLESS = 3;
                           };
                           optional Mode mode = 2;
                           optional uint32 min_tx_interval = 3;
                           optional uint32 min_rx_interval = 4;
                           optional uint32 detect_multiplier = 5;
                           optional bool block = 6;
                           enum Ability {
                              INVALID_ENUM_VALUE_Ability = 0;
                              Ability_ENABLE = 1;
                              Ability_BLOCK = 2;
                           };
                           optional Ability ability = 7;
                        }
                        optional BfdForTunnel bfd_for_tunnel = 16;
                     }
                     optional SrTe sr_te = 3;
                     message IgpAttr {
                        optional bool adv_enable = 1;
                        optional bool adv_ipv6_enable = 2;
                        optional uint32 hold_time = 3;
                        enum ShortcutType {
                           ShortcutType_DISABLE = 0;
                           ShortcutType_ISIS = 1;
                           ShortcutType_OSPF = 2;
                        };
                        optional ShortcutType shortcut_type = 4;
                        message MetricType {
                           message Relative {
                              optional int32 relative = 1;
                           }
                           optional Relative relative = 1;
                           message Absolute {
                              optional int32 absolute = 1;
                           }
                           optional Absolute absolute = 2;
                        }
                        optional MetricType metric_type = 5;
                     }
                     optional IgpAttr igp_attr = 4;
                  }
                  optional TeTunnel te_tunnel = 1;
               }
               optional MplsTe mpls_te = 1;
            }
            optional Type type = 1;
         }
         optional TunnelProtocol tunnel_protocol = 35;
         message BdifAttribute {
            optional uint32 band_width = 1;
            optional uint32 damping_time = 2;
         }
         optional BdifAttribute bdif_attribute = 36;
         message ArpSending {
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_DUALX_SEND = 1;
               Type_SINGLEX_SEND = 2;
            };
            optional Type type = 1;
            optional uint32 expire_time = 2;
         }
         optional ArpSending arp_sending = 37;
         message NdSending {
            enum Type {
               INVALID_ENUM_VALUE_Type = 0;
               Type_DUALX_SEND = 1;
            };
            optional Type type = 1;
            optional uint32 expire_time = 2;
         }
         optional NdSending nd_sending = 38;
         message Bfd {
            optional bool enable_trunk_crc_bit_error = 1;
            optional bool enable_trigger_if_down = 2;
         }
         optional Bfd bfd = 39;
         message NveAttribute {
            message Vtep {
               optional string source_vtep_ip = 1;
               optional string phys_address = 2;
               optional string bypass_vtep_ip = 3;
            }
            optional Vtep vtep = 1;
         }
         optional NveAttribute nve_attribute = 40;
         message Nvo3Gateway {
            optional bool vxlan_anycast_gateway = 1;
            optional bool common_anycast_gateway = 2;
         }
         optional Nvo3Gateway nvo3_gateway = 41;
         message ArpEntry {
            optional uint32 expire_time = 1;
            optional uint32 probe_interval = 2;
            optional uint32 probe_times = 3;
            optional bool arp_learn_disable = 4;
            enum ArpLearnStrict {
               INVALID_ENUM_VALUE_ArpLearnStrict = 0;
               ArpLearnStrict_FORCEX_DISABLE = 1;
               ArpLearnStrict_FORCEX_ENABLE = 2;
               ArpLearnStrict_TRUST = 3;
            };
            optional ArpLearnStrict arp_learn_strict = 5;
            optional bool route_proxy_enable = 6;
            optional bool inner_proxy_enable = 7;
            optional bool inter_proxy_enable = 8;
            optional bool local_proxy_enable = 9;
            optional uint32 fake_expire_time = 10;
            optional bool probe_unicast = 11;
            optional bool dest_mac_check = 12;
            optional bool src_mac_check = 13;
            optional bool distribute_enable = 14;
            enum Gratuitous {
               INVALID_ENUM_VALUE_Gratuitous = 0;
               Gratuitous_ENABLE = 1;
               Gratuitous_ACCORDINGX_GLOBAL = 2;
               Gratuitous_DISABLE = 3;
            };
            optional Gratuitous gratuitous = 15;
            optional bool host_collect_enable = 16;
            optional bool generate_rdtbl_enable = 17;
            optional uint32 broadcast_detect_interval = 18;
            optional uint32 broadcast_detect_times = 19;
            optional bool broadcast_detect_enable = 20;
            optional uint32 fake_penalty_time = 21;
            optional bool gratuitous_arp_drop = 22;
            enum GratuitousSend {
               INVALID_ENUM_VALUE_GratuitousSend = 0;
               GratuitousSend_ENABLE = 2;
               GratuitousSend_DISABLE = 3;
            };
            optional GratuitousSend gratuitous_send = 23;
            optional uint32 broadcast_max_num = 24;
         }
         optional ArpEntry arp_entry = 42;
         message Evpn {
            optional string name = 1;
            optional string pbb_source_mac = 2;
            optional string esi = 3;
            optional string esi_name = 4;
            optional uint32 es_recovery_timer = 5;
            optional string track_bfd_name = 6;
            optional bool e_tree_leaf = 7;
         }
         optional Evpn evpn = 43;
         message Efm {
            message Session {
               enum State {
                  State_DISABLE = 0;
                  State_ENABLE = 1;
               };
               optional State state = 1;
               enum Mode {
                  Mode_PASSIVE = 0;
                  Mode_ACTIVE = 1;
               };
               optional Mode mode = 2;
               optional uint32 packet_max_size = 3;
               optional uint32 interval = 4;
               optional uint32 timeout = 5;
               enum LinkEvent {
                  LinkEvent_DISABLE = 0;
                  LinkEvent_ENABLE = 1;
               };
               optional LinkEvent link_event = 6;
               enum IgnoreLoopbackRequest {
                  IgnoreLoopbackRequest_DISABLE = 0;
                  IgnoreLoopbackRequest_ENABLE = 1;
               };
               optional IgnoreLoopbackRequest ignore_loopback_request = 7;
               enum TriggerIfDown {
                  TriggerIfDown_DISABLE = 0;
                  TriggerIfDown_ENABLE = 1;
               };
               optional TriggerIfDown trigger_if_down = 8;
               optional uint32 hold_up_time = 9;
               optional bool trigger_mac_renew = 10;
               message ErrorFrame {
                  enum Notification {
                     Notification_DISABLE = 0;
                     Notification_ENABLE = 1;
                  };
                  optional Notification notification = 1;
                  optional uint32 period = 2;
                  optional uint32 threshold = 3;
                  enum PeriodUnit {
                     PeriodUnit_SECOND = 0;
                     PeriodUnit_MILLISECOND = 1;
                  };
                  optional PeriodUnit period_unit = 4;
               }
               optional ErrorFrame error_frame = 11;
               message ErrorFrameSecond {
                  enum Notification {
                     Notification_DISABLE = 0;
                     Notification_ENABLE = 1;
                  };
                  optional Notification notification = 1;
                  optional uint32 period = 2;
                  optional uint32 threshold = 3;
               }
               optional ErrorFrameSecond error_frame_second = 12;
               message ErrorCode {
                  enum Notification {
                     Notification_DISABLE = 0;
                     Notification_ENABLE = 1;
                  };
                  optional Notification notification = 1;
                  optional uint32 period = 2;
                  optional uint32 threshold = 3;
               }
               optional ErrorCode error_code = 13;
               message ErrorFramePeriod {
                  enum Notification {
                     Notification_DISABLE = 0;
                     Notification_ENABLE = 1;
                  };
                  optional Notification notification = 1;
                  optional uint32 period = 2;
                  optional uint32 threshold = 3;
               }
               optional ErrorFramePeriod error_frame_period = 14;
            }
            optional Session session = 1;
         }
         optional Efm efm = 44;
         message VlanifAttribute {
            optional uint32 band_width = 1;
            optional uint32 damping_time = 2;
         }
         optional VlanifAttribute vlanif_attribute = 45;
         message Lldp {
            message Session {
               enum AdminStatus {
                  INVALID_ENUM_VALUE_AdminStatus = 0;
                  AdminStatus_TXX_ONLY = 1;
                  AdminStatus_RXX_ONLY = 2;
                  AdminStatus_TXX_RX = 3;
                  AdminStatus_DISABLED = 4;
               };
               optional AdminStatus admin_status = 1;
               message TlvEnable {
                  optional bool management_address = 1;
                  optional bool port_description = 2;
                  optional bool system_capability = 3;
                  optional bool system_description = 4;
                  optional bool system_name = 5;
                  optional bool port_vlan_id = 6;
                  optional bool protocol_vlan_id_enable = 7;
                  optional int32 protocol_vlan_id = 8;
                  optional bool vlan_name_enable = 9;
                  optional int32 vlan_name_id = 10;
                  optional bool protocol_identity = 11;
                  optional bool mac_physic = 12;
                  optional bool link_aggregation = 13;
                  optional bool max_frame_size = 14;
                  optional bool ddp = 15;
                  optional bool identity = 16;
               }
               optional TlvEnable tlv_enable = 2;
               message Neighbors {
                  message Neighbor {
                     optional uint32 index = 1;
                     enum ChassisIdSubType {
                        ChassisIdSubType_OTHER = 0;
                        ChassisIdSubType_CHASSISX_COMPONENT = 1;
                        ChassisIdSubType_INTERFACEX_ALIAS = 2;
                        ChassisIdSubType_PORTX_COMPONENT = 3;
                        ChassisIdSubType_MACX_ADDRESS = 4;
                        ChassisIdSubType_NETWORKX_ADDRESS = 5;
                        ChassisIdSubType_INTERFACEX_NAME = 6;
                        ChassisIdSubType_LOCAL = 7;
                     };
                     optional ChassisIdSubType chassis_id_sub_type = 2;
                     optional string chassis_id = 3;
                     enum PortIdSubType {
                        PortIdSubType_OTHER = 0;
                        PortIdSubType_INTERFACEX_ALIAS = 1;
                        PortIdSubType_PORTX_COMPONENT = 2;
                        PortIdSubType_MACX_ADDRESS = 3;
                        PortIdSubType_NETWORKX_ADDRESS = 4;
                        PortIdSubType_INTERFACEX_NAME = 5;
                        PortIdSubType_AGENTX_CIRCUITX_ID = 6;
                        PortIdSubType_LOCAL = 7;
                     };
                     optional PortIdSubType port_id_sub_type = 4;
                     optional string port_id = 5;
                     optional string port_description = 6;
                     optional string system_name = 7;
                     optional string system_description = 8;
                     optional string system_capabilities_enabled = 9;
                     optional string system_capabilities_supported = 10;
                     optional int32 expired_time = 11;
                     optional int32 port_vlan_id = 12;
                     optional string protocol_identity = 13;
                     enum AutoNegotiationSupported {
                        AutoNegotiationSupported_NO = 0;
                        AutoNegotiationSupported_YES = 1;
                     };
                     optional AutoNegotiationSupported auto_negotiation_supported = 14;
                     enum AutoNegotiationEnabled {
                        AutoNegotiationEnabled_NO = 0;
                        AutoNegotiationEnabled_YES = 1;
                     };
                     optional AutoNegotiationEnabled auto_negotiation_enabled = 15;
                     optional string auto_negotiation_capability = 16;
                     enum OperMauType {
                        OperMauType_UNKNOWN = 0;
                        OperMauType_DOT3X_MAUX_TYPEX_AUI = 1;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_5 = 2;
                        OperMauType_DOT3X_MAUX_TYPEX_FOIRL = 3;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_2 = 4;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_T = 5;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FP = 6;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FB = 7;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FL = 8;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_36 = 9;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_THD = 10;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_TFD = 11;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FLHD = 12;
                        OperMauType_DOT3X_MAUX_TYPEX_10X_BASEX_FLFD = 13;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T4 = 14;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_TXHD = 15;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_TXFD = 16;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_FXHD = 17;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_FXFD = 18;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T2HD = 19;
                        OperMauType_DOT3X_MAUX_TYPEX_100X_BASEX_T2FD = 20;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_XHD = 21;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_XFD = 22;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_LXHD = 23;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_LXFD = 24;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_SXHD = 25;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_SXFD = 26;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_CXHD = 27;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_CXFD = 28;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_THD = 29;
                        OperMauType_DOT3X_MAUX_TYPEX_1000X_BASEX_TFD = 30;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_X = 31;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LX4 = 32;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_R = 33;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_ER = 34;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LR = 35;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_SR = 36;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_W = 37;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_EW = 38;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_LW = 39;
                        OperMauType_DOT3X_MAUX_TYPEX_10GIGX_BASEX_SW = 40;
                        OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_KR4 = 70;
                        OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_CR4 = 71;
                        OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_SR4 = 72;
                        OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_FR = 73;
                        OperMauType_DOT3X_MAUX_TYPEX_40GIGX_BASEX_LR4 = 74;
                        OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_CR10 = 75;
                        OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_SR10 = 76;
                        OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_LR4 = 77;
                        OperMauType_DOT3X_MAUX_TYPEX_100GIGX_BASEX_ER4 = 78;
                     };
                     optional OperMauType oper_mau_type = 17;
                     enum LinkAggregationSupported {
                        LinkAggregationSupported_NO = 0;
                        LinkAggregationSupported_YES = 1;
                     };
                     optional LinkAggregationSupported link_aggregation_supported = 18;
                     enum LinkAggregationEnabled {
                        LinkAggregationEnabled_NO = 0;
                        LinkAggregationEnabled_YES = 1;
                     };
                     optional LinkAggregationEnabled link_aggregation_enabled = 19;
                     optional int32 aggregation_port_id = 20;
                     optional int32 maximum_frame_size = 21;
                     optional string discovered_time = 22;
                     enum Status {
                        Status_ONLINE = 0;
                        Status_OFFLINE = 1;
                     };
                     optional Status status = 23;
                     optional string net_card_id = 24;
                     message ManagementAddresss {
                        message ManagementAddress {
                           enum Type {
                              Type_OTHER = 0;
                              Type_IPV4 = 1;
                              Type_IPV6 = 2;
                              Type_NSAP = 3;
                              Type_HDLC = 4;
                              Type_BBN1822 = 5;
                              Type_MAC = 6;
                              Type_E163 = 7;
                              Type_E164 = 8;
                              Type_F69 = 9;
                              Type_X121 = 10;
                              Type_IPX = 11;
                              Type_APPLEX_TALK = 12;
                              Type_DECNETX_IV = 13;
                              Type_BANYANX_VINES = 14;
                              Type_E164X_WITHX_NSAP = 15;
                              Type_DNS = 16;
                              Type_DISTINGUISHEDX_NAME = 17;
                              Type_ASX_NUMBER = 18;
                              Type_XTPX_OVERX_IPV4 = 19;
                              Type_XTPX_OVERX_IPV6 = 20;
                              Type_XTPX_NATIVEX_MODEX_XTP = 21;
                              Type_FIBREX_CHANNELX_WWPN = 22;
                              Type_FIBREX_CHANNELX_WWN = 23;
                              Type_GWID = 24;
                           };
                           optional Type type = 1;
                           optional string value = 2;
                           optional int32 length = 3;
                           enum IfSubType {
                              IfSubType_OTHER = 0;
                              IfSubType_UNKNOWN = 1;
                              IfSubType_IFX_INDEX = 2;
                              IfSubType_SYSTEMX_PORTX_NUMBER = 3;
                           };
                           optional IfSubType if_sub_type = 4;
                           optional int32 if_id = 5;
                           optional string oid = 6;
                        }
                        repeated ManagementAddress management_address = 1;
                     }
                     optional ManagementAddresss management_addresss = 25;
                     message ProtocolVlans {
                        message ProtocolVlan {
                           optional int32 id = 1;
                           enum Supported {
                              Supported_NO = 0;
                              Supported_YES = 1;
                           };
                           optional Supported supported = 2;
                           enum Enabled {
                              Enabled_NO = 0;
                              Enabled_YES = 1;
                           };
                           optional Enabled enabled = 3;
                        }
                        repeated ProtocolVlan protocol_vlan = 1;
                     }
                     optional ProtocolVlans protocol_vlans = 26;
                     message VlanNames {
                        message VlanName {
                           optional int32 id = 1;
                           optional string value = 2;
                        }
                        repeated VlanName vlan_name = 1;
                     }
                     optional VlanNames vlan_names = 27;
                     message UnknownTlvs {
                        message UnknownTlv {
                           optional int32 type = 1;
                           optional string info = 2;
                        }
                        repeated UnknownTlv unknown_tlv = 1;
                     }
                     optional UnknownTlvs unknown_tlvs = 28;
                     message UnknownOrganizationallyDefinedTlvs {
                        message UnknownOrganizationallyDefinedTlv {
                           optional string oui = 1;
                           optional int32 sub_type = 2;
                           optional int32 index = 3;
                           optional string info = 4;
                        }
                        repeated UnknownOrganizationallyDefinedTlv unknown_organizationally_defined_tlv = 1;
                     }
                     optional UnknownOrganizationallyDefinedTlvs unknown_organizationally_defined_tlvs = 29;
                     message DdpTlv {
                        optional string serial_number = 1;
                        optional uint32 if_index = 2;
                        optional string ipv4_address = 3;
                        optional string mac_address = 4;
                     }
                     optional DdpTlv ddp_tlv = 30;
                     message IdentityTlv {
                        optional string identity = 1;
                     }
                     optional IdentityTlv identity_tlv = 31;
                  }
                  repeated Neighbor neighbor = 1;
               }
               optional Neighbors neighbors = 3;
            }
            optional Session session = 1;
         }
         optional Lldp lldp = 47;
         message ControlFlap {
            optional uint32 suppress = 1;
            optional uint32 reuse = 2;
            optional uint32 ceiling = 3;
            optional uint32 decay_ok = 4;
            optional uint32 decay_ng = 5;
            optional uint32 control_flap_count = 6;
         }
         optional ControlFlap control_flap = 48;
         message TrapThreshold {
            optional uint32 input_rising_rate = 1;
            optional uint32 input_resume_rate = 2;
            optional uint32 output_rising_rate = 3;
            optional uint32 output_resume_rate = 4;
         }
         optional TrapThreshold trap_threshold = 49;
         message Damping {
            message IgnoreDamp {
            }
            optional IgnoreDamp ignore_damp = 1;
            message Damp {
            }
            optional Damp damp = 2;
         }
         optional Damping damping = 50;
         message Ipv4 {
            message Address {
               message CommonAddress {
                  message Addresses {
                  }
                  optional Addresses addresses = 1;
               }
               optional CommonAddress common_address = 1;
               message UnnumberedAddress {
               }
               optional UnnumberedAddress unnumbered_address = 2;
               message NegotiateAddress {
                  message NegotiationAddress {
                     enum NegotiationType {
                        NegotiationType_PPPX_NEGOTIATE = 0;
                     };
                     optional NegotiationType negotiation_type = 1;
                  }
                  optional NegotiationAddress negotiation_address = 1;
               }
               optional NegotiateAddress negotiate_address = 3;
            }
            optional Address address = 1;
            message State {
               message Addresses {
                  message Address {
                     optional string ip = 1;
                     optional string mask = 2;
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_MAIN = 1;
                        Type_UNNUMBER = 2;
                        Type_NEG = 4;
                        Type_SUB = 32;
                        Type_DHCP = 256;
                     };
                     optional Type type = 3;
                     optional bool is_block = 4;
                  }
                  repeated Address address = 1;
               }
               optional Addresses addresses = 1;
               message Gateways {
                  message Gateway {
                     optional string gateway = 1;
                  }
                  repeated Gateway gateway = 1;
               }
               optional Gateways gateways = 2;
               message Statistics {
                  optional uint64 in_receives = 1;
                  optional uint64 in_octets = 2;
                  optional uint64 in_rate_pkts = 3;
                  optional uint64 in_rate_bits = 4;
                  optional string in_rate_byte_bandwidth_usage = 5;
                  optional uint64 in_ucast_pkts = 6;
                  optional uint64 in_ucast_octets = 7;
                  optional uint64 in_mcast_pkts = 8;
                  optional uint64 in_mcast_octets = 9;
                  optional uint64 in_bcast_pkts = 10;
                  optional uint64 in_bcast_octets = 11;
                  optional uint64 out_ucast_pkts = 12;
                  optional uint64 out_ucast_octets = 13;
                  optional uint64 out_mcast_pkts = 14;
                  optional uint64 out_mcast_octets = 15;
                  optional uint64 out_bcast_pkts = 16;
                  optional uint64 out_bcast_octets = 17;
                  optional uint64 out_rate_pkts = 18;
                  optional uint64 out_rate_bits = 19;
                  optional string out_rate_byte_bandwidth_usage = 20;
                  optional uint64 out_transmits = 21;
                  optional uint64 out_octets = 22;
                  optional uint64 out_frag_requires = 23;
                  optional uint32 out_frag_fails = 24;
                  optional uint64 out_frag_oks = 25;
                  optional uint64 out_frag_creates = 26;
               }
               optional Statistics statistics = 3;
            }
            optional State state = 2;
            message StaticArps {
               message StaticArp {
                  optional string ip_addr = 1;
                  optional string mac_addr = 2;
                  optional uint32 pevid = 3;
                  optional uint32 cevid = 4;
               }
               repeated StaticArp static_arp = 1;
            }
            optional StaticArps static_arps = 3;
            message Vrrp {
               message Groups {
                  message Group {
                     optional uint32 id = 1;
                     optional uint32 priority = 2;
                     message Preempt {
                        optional bool preempt_enable = 1;
                        optional uint32 delay_time = 2;
                     }
                     optional Preempt preempt = 3;
                     optional uint32 adver_interval = 4;
                     enum AuthenticationMode {
                        AuthenticationMode_NONE = 0;
                        AuthenticationMode_SIMPLE = 1;
                        AuthenticationMode_MD5 = 2;
                        AuthenticationMode_HMACX_SHA256 = 3;
                     };
                     optional AuthenticationMode authentication_mode = 5;
                     optional bool isplain = 6;
                     optional string authentication_key = 7;
                     optional uint32 link_bfddown_num = 8;
                     optional uint32 hold_multiper = 9;
                     optional bool backup_forward = 10;
                     optional bool fast_resume = 11;
                     enum V3Sendmode {
                        V3Sendmode_V3X_ONLY = 0;
                        V3Sendmode_V2V3X_BOTH = 1;
                        V3Sendmode_V2X_ONLY = 2;
                     };
                     optional V3Sendmode v3_sendmode = 12;
                     enum Type {
                        Type_NORMAL = 0;
                        Type_ADMIN = 1;
                        Type_MEMBER = 2;
                        Type_LBRG = 3;
                        Type_LBRGX_MEM = 4;
                        Type_MEMX_LBRG = 5;
                        Type_MEMX_LBRGX_MEM = 6;
                        Type_UNICAST = 7;
                     };
                     optional Type type = 13;
                     enum State {
                        State_INITIALIZE = 0;
                        State_BACKUP = 1;
                        State_MASTER = 2;
                     };
                     optional State state = 14;
                     optional string create_time = 15;
                     optional string last_change_time = 16;
                     message VirtualIps {
                        message VirtualIp {
                           optional string address = 1;
                        }
                        repeated VirtualIp virtual_ip = 1;
                     }
                     optional VirtualIps virtual_ips = 17;
                     message TrackInterfaces {
                        message TrackInterface {
                           optional string if_name = 1;
                           optional uint32 priority_change = 2;
                           enum TrackMode {
                              TrackMode_INCREASE = 0;
                              TrackMode_REDUCE = 1;
                           };
                           optional TrackMode track_mode = 3;
                        }
                        repeated TrackInterface track_interface = 1;
                     }
                     optional TrackInterfaces track_interfaces = 18;
                     message TrackBfds {
                        message TrackBfd {
                           optional string session_name = 1;
                           enum SessionType {
                              SessionType_NORMAL = 0;
                              SessionType_LINK = 1;
                              SessionType_PEER = 2;
                           };
                           optional SessionType session_type = 2;
                           optional uint32 priority_change = 3;
                           enum TrackMode {
                              TrackMode_INCREASE = 0;
                              TrackMode_REDUCE = 1;
                           };
                           optional TrackMode track_mode = 4;
                           optional uint32 session_id = 5;
                           enum SessionState {
                              SessionState_DOWN = 0;
                              SessionState_UP = 1;
                              SessionState_ADMINX_DOWN = 2;
                              SessionState_UNKNOW = 3;
                           };
                           optional SessionState session_state = 6;
                        }
                        repeated TrackBfd track_bfd = 1;
                     }
                     optional TrackBfds track_bfds = 19;
                     message TrackMtgrps {
                        message TrackMtgrp {
                           optional string monitor_group_name = 1;
                           optional uint32 failure_ratio = 2;
                           optional uint32 priority_change = 3;
                           enum TrackMode {
                              TrackMode_LINK = 0;
                              TrackMode_REDUCE = 1;
                           };
                           optional TrackMode track_mode = 4;
                        }
                        repeated TrackMtgrp track_mtgrp = 1;
                     }
                     optional TrackMtgrps track_mtgrps = 20;
                  }
                  repeated Group group = 1;
               }
               optional Groups groups = 1;
            }
            optional Vrrp vrrp = 4;
            message Rgm {
            }
            optional Rgm rgm = 5;
         }
         optional Ipv4 ipv4 = 51;
         message Ipv6 {
            optional uint32 mtu6 = 1;
            optional bool spread_mtu_flag = 2;
            optional bool auto_link_local = 3;
            message Address {
               message CommonAddress {
                  message Addresses {
                  }
                  optional Addresses addresses = 1;
               }
               optional CommonAddress common_address = 1;
            }
            optional Address address = 4;
            message NdPrefixs {
               message NdPrefix {
                  optional string prefix = 1;
                  optional int32 prefix_len = 2;
                  optional uint32 valid_lifetime = 3;
                  optional uint32 preferred_lifetime = 4;
                  optional bool auto_flag = 5;
                  optional bool on_link_flag = 6;
               }
               repeated NdPrefix nd_prefix = 1;
            }
            optional NdPrefixs nd_prefixs = 5;
            message State {
               optional uint32 mtu6 = 1;
               message Addresses {
                  message Address {
                     optional string ip = 1;
                     optional uint32 prefix_length = 2;
                     enum Type {
                        INVALID_ENUM_VALUE_Type = 0;
                        Type_GLOBAL = 1;
                        Type_LINKX_LOCAL = 2;
                        Type_AUTOX_LINKX_LOCAL = 3;
                        Type_ANYCAST = 6;
                     };
                     optional Type type = 3;
                     enum AlgorithmType {
                        AlgorithmType_NONE = 0;
                        AlgorithmType_CGA = 1;
                        AlgorithmType_EUI64 = 2;
                     };
                     optional AlgorithmType algorithm_type = 4;
                     optional uint32 collision_count = 5;
                     optional bool is_block = 6;
                     enum Status {
                        INVALID_ENUM_VALUE_Status = 0;
                        Status_PREFERRED = 1;
                        Status_INACCESSIBLE = 4;
                        Status_UNKNOWN = 5;
                        Status_TENTATIVE = 6;
                        Status_DUPLICATE = 7;
                     };
                     optional Status status = 7;
                  }
                  repeated Address address = 1;
               }
               optional Addresses addresses = 2;
               message Statistics {
                  optional uint64 in_receives = 1;
                  optional uint64 in_octets = 2;
                  optional uint64 in_rate_pkts = 3;
                  optional uint64 in_rate_bits = 4;
                  optional string in_rate_byte_bandwidth_usage = 5;
                  optional uint64 in_ucast_pkts = 6;
                  optional uint64 in_ucast_octets = 7;
                  optional uint64 in_mcast_pkts = 8;
                  optional uint64 in_mcast_octets = 9;
                  optional uint64 out_ucast_pkts = 10;
                  optional uint64 out_ucast_octets = 11;
                  optional uint64 out_mcast_pkts = 12;
                  optional uint64 out_mcast_octets = 13;
                  optional uint64 out_rate_pkts = 14;
                  optional uint64 out_rate_bits = 15;
                  optional string out_rate_byte_bandwidth_usage = 16;
                  optional uint64 out_transmits = 17;
                  optional uint64 out_octets = 18;
               }
               optional Statistics statistics = 3;
            }
            optional State state = 6;
            message NdCollection {
               message IfProperty {
                  optional uint32 retrans_timer = 1;
                  optional uint32 nud_reach_time = 2;
                  optional uint32 attempts_value = 3;
                  enum NsMcastFlag {
                     NsMcastFlag_OFF = 0;
                     NsMcastFlag_ON = 1;
                  };
                  optional NsMcastFlag ns_mcast_flag = 4;
                  optional uint64 max_dyn_nb_num = 5;
                  optional uint32 dad_timeout = 6;
                  optional uint32 nud_attempts = 7;
                  enum NaGlean {
                     NaGlean_OFF = 0;
                     NaGlean_ON = 1;
                  };
                  optional NaGlean na_glean = 8;
                  enum MaFlag {
                     MaFlag_OFF = 0;
                     MaFlag_ON = 1;
                  };
                  optional MaFlag ma_flag = 9;
                  enum OFlag {
                     OFlag_OFF = 0;
                     OFlag_ON = 1;
                  };
                  optional OFlag o_flag = 10;
                  enum RaHaltFlag {
                     RaHaltFlag_OFF = 0;
                     RaHaltFlag_ON = 1;
                  };
                  optional RaHaltFlag ra_halt_flag = 11;
                  optional uint32 max_interval = 12;
                  optional uint32 ra_lifetime = 13;
                  enum RaPreference {
                     RaPreference_MEDIUM = 0;
                     RaPreference_HIGH = 1;
                     RaPreference_LOW = 3;
                  };
                  optional RaPreference ra_preference = 14;
                  enum RaPrefixFlag {
                     RaPrefixFlag_OFF = 0;
                     RaPrefixFlag_ON = 1;
                  };
                  optional RaPrefixFlag ra_prefix_flag = 15;
                  enum RaMtuFlag {
                     RaMtuFlag_OFF = 0;
                     RaMtuFlag_ON = 1;
                  };
                  optional RaMtuFlag ra_mtu_flag = 16;
                  optional bool strict_flag = 17;
                  optional uint32 ts_fuzz_factor = 18;
                  optional uint32 ts_clock_drift = 19;
                  optional uint32 ts_delta = 20;
                  optional uint32 rsa_min_key_len = 21;
                  optional uint32 rsa_max_key_len = 22;
                  optional uint32 stale_time = 23;
                  enum CollectHostFlag {
                     CollectHostFlag_OFF = 0;
                     CollectHostFlag_ON = 1;
                  };
                  optional CollectHostFlag collect_host_flag = 24;
                  enum GenerateRdEnable {
                     GenerateRdEnable_OFF = 0;
                     GenerateRdEnable_ON = 1;
                  };
                  optional GenerateRdEnable generate_rd_enable = 25;
                  optional uint32 nud_interval = 26;
               }
               optional IfProperty if_property = 1;
               message Proxys {
                  enum RouteProxy {
                     RouteProxy_OFF = 0;
                     RouteProxy_ON = 1;
                  };
                  optional RouteProxy route_proxy = 1;
                  enum InnerVlanProxy {
                     InnerVlanProxy_OFF = 0;
                     InnerVlanProxy_ON = 1;
                  };
                  optional InnerVlanProxy inner_vlan_proxy = 2;
                  enum InterVlanProxy {
                     InterVlanProxy_OFF = 0;
                     InterVlanProxy_ON = 1;
                  };
                  optional InterVlanProxy inter_vlan_proxy = 3;
                  enum AnywayProxy {
                     AnywayProxy_OFF = 0;
                     AnywayProxy_ON = 1;
                  };
                  optional AnywayProxy anyway_proxy = 4;
               }
               optional Proxys proxys = 2;
               message AntiAttack {
                  message ReceiveRateLimits {
                     message ReceiveRateLimit {
                        enum Type {
                           Type_RS = 0;
                           Type_RA = 1;
                           Type_NS = 2;
                           Type_NA = 3;
                           Type_NDMISS = 4;
                        };
                        optional Type type = 1;
                        optional uint32 value = 2;
                     }
                     repeated ReceiveRateLimit receive_rate_limit = 1;
                  }
                  optional ReceiveRateLimits receive_rate_limits = 1;
                  message SourceIpReceive {
                     message IpRateLimits {
                        message IpRateLimit {
                           enum PacketType {
                              PacketType_RS = 0;
                              PacketType_RA = 1;
                              PacketType_NS = 2;
                              PacketType_NA = 3;
                           };
                           optional PacketType packet_type = 1;
                           optional string ipv6_addr = 2;
                           optional uint32 value = 3;
                        }
                        repeated IpRateLimit ip_rate_limit = 1;
                     }
                     optional IpRateLimits ip_rate_limits = 1;
                  }
                  optional SourceIpReceive source_ip_receive = 2;
               }
               optional AntiAttack anti_attack = 3;
            }
            optional NdCollection nd_collection = 7;
            message Cgas {
               message Cga {
                  optional string rsakey_pair = 1;
                  optional uint32 sec_level = 2;
                  optional string modifier = 3;
               }
               repeated Cga cga = 1;
            }
            optional Cgas cgas = 8;
            message ExtensionHeaderFilter {
               message HopByHopSwitch {
                  enum AllOptions {
                     AllOptions_DENY = 0;
                     AllOptions_PERMIT = 1;
                  };
                  optional AllOptions all_options = 1;
                  message Options {
                     message Option {
                        optional uint32 option_code = 1;
                        enum FilterRule {
                           FilterRule_DENY = 0;
                           FilterRule_PERMIT = 1;
                        };
                        optional FilterRule filter_rule = 2;
                     }
                     repeated Option option = 1;
                  }
                  optional Options options = 2;
               }
               optional HopByHopSwitch hop_by_hop_switch = 1;
               message RoutingSwitch {
                  enum AllOptions {
                     AllOptions_DENY = 0;
                     AllOptions_PERMIT = 1;
                  };
                  optional AllOptions all_options = 1;
                  message Options {
                     message Option {
                        optional uint32 option_code = 1;
                        enum FilterRule {
                           FilterRule_DENY = 0;
                           FilterRule_PERMIT = 1;
                        };
                        optional FilterRule filter_rule = 2;
                     }
                     repeated Option option = 1;
                  }
                  optional Options options = 2;
               }
               optional RoutingSwitch routing_switch = 2;
               message DestinationSwitch {
                  enum AllOptions {
                     AllOptions_DENY = 0;
                     AllOptions_PERMIT = 1;
                  };
                  optional AllOptions all_options = 1;
                  message Options {
                     message Option {
                        optional uint32 option_code = 1;
                        enum FilterRule {
                           FilterRule_DENY = 0;
                           FilterRule_PERMIT = 1;
                        };
                        optional FilterRule filter_rule = 2;
                     }
                     repeated Option option = 1;
                  }
                  optional Options options = 2;
               }
               optional DestinationSwitch destination_switch = 3;
               message NoOptionExhSwitchs {
                  message NoOptionExhSwitch {
                     enum ExhType {
                        INVALID_ENUM_VALUE_ExhType = 0;
                        ExhType_FRAGMENT = 44;
                        ExhType_ESP = 50;
                        ExhType_AH = 51;
                     };
                     optional ExhType exh_type = 1;
                     enum FilterRule {
                        FilterRule_DENY = 0;
                        FilterRule_PERMIT = 1;
                     };
                     optional FilterRule filter_rule = 2;
                  }
                  repeated NoOptionExhSwitch no_option_exh_switch = 1;
               }
               optional NoOptionExhSwitchs no_option_exh_switchs = 4;
            }
            optional ExtensionHeaderFilter extension_header_filter = 9;
            message Pp6Collection {
               optional bool permit_incomplete_fragment = 1;
            }
            optional Pp6Collection pp6_collection = 10;
         }
         optional Ipv6 ipv6 = 52;
         optional string vs_name = 53;
         optional uint32 l2_switch_port_index = 54;
         enum ServiceType {
            ServiceType_NONE = 0;
            ServiceType_TRUNKX_MEMBER = 2;
            ServiceType_STACKX_MEMBER = 6;
            ServiceType_MPX_MEMBER = 7;
            ServiceType_VBRIDGEX_MEMBER = 8;
            ServiceType_IMAX_MEMBER = 9;
            ServiceType_BUNDLEX_MEMBER = 10;
            ServiceType_FABRICX_MEMBER = 11;
            ServiceType_LAGX_MASTERX_MEMBER = 12;
            ServiceType_LAGX_SLAVEX_MEMBER = 13;
            ServiceType_CPOSX_TRUNKX_MEMBER = 15;
            ServiceType_POSX_TRUNKX_MEMBER = 16;
            ServiceType_GLOBALX_MPX_MEMBER = 17;
            ServiceType_GLOBALX_IMAX_MEMBER = 18;
         };
         optional ServiceType service_type = 55;
         enum EncapsulationType {
            EncapsulationType_VLANX_TYPE = 0;
            EncapsulationType_DOT1Q = 1;
            EncapsulationType_QINQ = 2;
            EncapsulationType_P2P = 3;
            EncapsulationType_P2MP = 4;
            EncapsulationType_L2VE = 5;
            EncapsulationType_L3VE = 6;
            EncapsulationType_VLANX_TYPEX_POLICY = 7;
            EncapsulationType_DOT1QX_POLICY = 8;
            EncapsulationType_STACKINGX_POLICY = 9;
            EncapsulationType_UNTAGX_POLICY = 10;
            EncapsulationType_QINQX_MAPPING = 11;
            EncapsulationType_L2VC = 12;
            EncapsulationType_L3VC = 13;
            EncapsulationType_EVCX_UNTAG = 14;
            EncapsulationType_EVCX_DOT1Q = 15;
            EncapsulationType_EVCX_QINQ = 16;
            EncapsulationType_EVCX_DEFAULT = 17;
            EncapsulationType_EVCX_DOT1QX_POLICY = 18;
            EncapsulationType_IETF = 19;
            EncapsulationType_NONSTANDARD = 20;
            EncapsulationType_USERX_VLAN = 21;
            EncapsulationType_USERX_VLANX_ANYOTHER = 22;
            EncapsulationType_QINX_LINK = 23;
            EncapsulationType_SOFTX_GREX_VE = 24;
            EncapsulationType_L3VEX_TER = 25;
            EncapsulationType_L3VEX_ACC = 26;
            EncapsulationType_INVALID = 255;
         };
         optional EncapsulationType encapsulation_type = 56;
         message Dhcpv6RelayIf {
            optional string source_address = 1;
            optional string link_address = 2;
            optional bool strict_check = 3;
            optional string server_group_name = 4;
         }
         optional Dhcpv6RelayIf dhcpv6_relay_if = 57;
         enum NetworkLayerStatus {
            NetworkLayerStatus_IPV4X_IPV6X_UP = 0;
            NetworkLayerStatus_IPV4X_IPV6X_DOWN = 196608;
         };
         optional NetworkLayerStatus network_layer_status = 58;
         optional uint32 protocol_up_delay_time = 59;
         message DampState {
            enum SuppressStatus {
               SuppressStatus_SUPPRESSED = 0;
               SuppressStatus_UNSUPPRESSED = 1;
            };
            optional SuppressStatus suppress_status = 1;
            optional uint32 suppress = 2;
            optional uint32 reuse = 3;
            optional uint32 max_suppress_time = 4;
            optional uint32 half_life_period = 5;
            optional uint32 damp_reuse_time = 6;
            optional uint32 current_penalty = 7;
            optional uint32 max_penalty = 8;
         }
         optional DampState damp_state = 60;
         message ErrorDown {
            enum Cause {
               Cause_BPDUX_PROTECTION = 0;
               Cause_AUTOX_DEFEND = 1;
               Cause_MONITORX_LINK = 2;
               Cause_PORTSECX_REACHEDX_LIMIT = 65;
               Cause_STORMX_CONTROL = 66;
               Cause_LOOPBACKX_DETECT = 67;
               Cause_DUALX_ACTIVE = 68;
               Cause_MACX_ADDRESSX_FLAPPING = 69;
               Cause_NOX_STACKX_LINK = 70;
               Cause_CRCX_STATISTICS = 71;
               Cause_TRANSCEIVERX_POWERX_LOW = 72;
               Cause_LINKX_FLAP = 73;
               Cause_L2X_LOOPX_OCCURED = 74;
               Cause_STACKX_MEMBERX_EXCEEDX_LIMIT = 75;
               Cause_SPINEX_MEMBERX_EXCEEDX_LIMIT = 76;
               Cause_RESOURCEX_MISMATCH = 77;
               Cause_LEAFX_MSTP = 78;
               Cause_MX_LAG = 79;
               Cause_FABRICX_UPLINKX_THRESHOLD = 80;
               Cause_STACKX_CONFIGX_CONFLICT = 81;
               Cause_SPINEX_TYPEX_UNSUPPORTED = 82;
               Cause_STACKX_PACKETX_DEFENSIVE = 83;
               Cause_FORWARDX_ENGINEX_BUFFERX_FAILED = 85;
               Cause_FORWARDX_ENGINEX_INTERFACEX_FAILED = 86;
               Cause_FABRICX_LINKX_FAILURE = 87;
               Cause_MX_LAGX_CONSISTENCYX_CHECK = 88;
            };
            optional Cause cause = 1;
            optional uint32 recovery_time = 2;
            optional uint32 remainder_time = 3;
         }
         optional ErrorDown error_down = 61;
         message ArpStatusDetect {
            optional string ip_addr = 1;
            enum Mode {
               Mode_LOOSE = 0;
               Mode_STRICT = 1;
            };
            optional Mode mode = 2;
            optional uint32 times = 3;
            optional uint32 interval = 4;
         }
         optional ArpStatusDetect arp_status_detect = 62;
         message ArpPortSecurity {
            message L2SubInterface {
               optional bool l2proxy_dyn_learn = 1;
               optional uint32 l2proxy_max_num = 2;
            }
            optional L2SubInterface l2_sub_interface = 1;
         }
         optional ArpPortSecurity arp_port_security = 63;
         message Nve {
            message Attribute {
               optional string source_vtep_ip = 1;
               optional string source_vtep_ipv6 = 2;
               optional string phys_address = 3;
               optional string bypass_vtep_ip = 4;
               optional string bypass_vtep_ipv6 = 5;
            }
            optional Attribute attribute = 1;
         }
         optional Nve nve = 64;
         message DhcpRelayAttribute {
            optional bool enable = 1;
            enum ReplyPacketPolicy {
               INVALID_ENUM_VALUE_ReplyPacketPolicy = 0;
               ReplyPacketPolicy_BROADCASTX_ALWAYS = 1;
            };
            optional ReplyPacketPolicy reply_packet_policy = 2;
            message Option82 {
               optional bool link_selection_enable = 1;
               optional string link_selection_address = 2;
               optional bool vendor_specific_enable = 3;
               optional bool subscriber_id_enable = 4;
               enum SubscriberIdMode {
                  INVALID_ENUM_VALUE_SubscriberIdMode = 0;
                  SubscriberIdMode_SELFX_DEFINE = 1;
               };
               optional SubscriberIdMode subscriber_id_mode = 5;
               optional string subscriber_id_self_define_text = 6;
            }
            optional Option82 option82 = 3;
            message ServerAddresses {
               message ServerAddress {
                  optional string address = 1;
                  optional bool vendor = 2;
                  optional uint32 option_code = 3;
                  optional string vendor_class = 4;
               }
               repeated ServerAddress server_address = 1;
            }
            optional ServerAddresses server_addresses = 4;
            message GatewayAddresses {
               message GatewayAddress {
                  optional bool vendor = 1;
                  optional uint32 option_code = 2;
                  optional string vendor_class = 3;
                  optional string ip_address = 4;
               }
               repeated GatewayAddress gateway_address = 1;
            }
            optional GatewayAddresses gateway_addresses = 5;
            message RelaySourceAddress {
               optional string vpn_name = 1;
               optional string source_address = 2;
            }
            optional RelaySourceAddress relay_source_address = 6;
            message RelaySourceOptionAddresses {
               message RelaySourceOptionAddress {
                  optional bool vendor = 1;
                  optional uint32 option_code = 2;
                  optional string vendor_class = 3;
                  optional string source_address = 4;
               }
               repeated RelaySourceOptionAddress relay_source_option_address = 1;
            }
            optional RelaySourceOptionAddresses relay_source_option_addresses = 7;
            message Opt82VendorSpecifics {
               message Opt82VendorSpecific {
                  optional uint32 sub_option_number = 1;
                  enum SubOptionFormat {
                     SubOptionFormat_SOURCEX_IPX_ADDRESS = 0;
                  };
                  optional SubOptionFormat sub_option_format = 2;
                  optional string ip_address = 3;
               }
               repeated Opt82VendorSpecific opt82_vendor_specific = 1;
            }
            optional Opt82VendorSpecifics opt82_vendor_specifics = 8;
         }
         optional DhcpRelayAttribute dhcp_relay_attribute = 65;
         message DhcpRelayIf {
            optional bool is_enable = 1;
            enum ReplyPacketPolicy {
               INVALID_ENUM_VALUE_ReplyPacketPolicy = 0;
               ReplyPacketPolicy_BROADCASTX_ALWAYS = 1;
            };
            optional ReplyPacketPolicy reply_packet_policy = 2;
            message Option82 {
               optional bool subscriber_id_enable = 1;
               enum SubscriberIdMode {
                  INVALID_ENUM_VALUE_SubscriberIdMode = 0;
                  SubscriberIdMode_SELFX_DEFINE = 1;
               };
               optional SubscriberIdMode subscriber_id_mode = 2;
               optional string subscriber_id_self_define_text = 3;
            }
            optional Option82 option82 = 3;
            message ServerAddresses {
               message ServerAddress {
                  optional string address = 1;
                  optional bool is_vendor = 2;
                  optional uint32 option_code = 3;
                  optional string vendor_class = 4;
               }
               repeated ServerAddress server_address = 1;
            }
            optional ServerAddresses server_addresses = 4;
         }
         optional DhcpRelayIf dhcp_relay_if = 66;
         message DhcpIf {
            message DhcpPacketSetting {
               optional uint32 ip_ttl = 1;
               optional uint32 dscp_outbound = 2;
               enum ServerEnable {
                  INVALID_ENUM_VALUE_ServerEnable = 0;
                  ServerEnable_ENABLE = 1;
                  ServerEnable_DISABLE = 2;
               };
               optional ServerEnable server_enable = 3;
            }
            optional DhcpPacketSetting dhcp_packet_setting = 1;
            message Option82Formats {
               message Option82Format {
                  enum SubOptionType {
                     INVALID_ENUM_VALUE_SubOptionType = 0;
                     SubOptionType_CIRCUITX_ID = 1;
                     SubOptionType_REMOTEX_ID = 2;
                     SubOptionType_CIRCUITX_REMOTE = 3;
                  };
                  optional SubOptionType sub_option_type = 1;
                  optional string user_define_text = 3;
               }
               repeated Option82Format option82_format = 1;
            }
            optional Option82Formats option82_formats = 2;
            message Option82InsertSetting {
            }
            optional Option82InsertSetting option82_insert_setting = 3;
         }
         optional DhcpIf dhcp_if = 67;
         message DhcpClientIf {
            optional bool address_allocation = 1;
            optional uint32 expected_lease = 2;
            optional string option60 = 3;
            message ClientStatus {
               enum FsmState {
                  FsmState_INIT = 0;
                  FsmState_SELECTING = 1;
                  FsmState_REQUESTING = 2;
                  FsmState_BOUND = 3;
                  FsmState_RENEWING = 4;
                  FsmState_REBINDING = 5;
               };
               optional FsmState fsm_state = 1;
               optional string mac_address = 2;
               optional string ip_address = 3;
               optional string ip_mask = 4;
               optional string server_address = 5;
               optional string lease_obtained_time = 6;
               optional string lease_expire_time = 7;
               optional string lease_renew_time = 8;
               optional string lease_rebind_time = 9;
            }
            optional ClientStatus client_status = 4;
            message ClientStatistics {
               optional uint32 total_packets_received = 1;
               optional uint32 offer_packets_received = 2;
               optional uint32 ack_packets_received = 3;
               optional uint32 nak_packets_received = 4;
               optional uint32 total_packets_send = 5;
               optional uint32 discovery_packets_send = 6;
               optional uint32 request_packets_send = 7;
               optional uint32 reboot_request_packets_send = 8;
               optional uint32 select_request_packets_send = 9;
               optional uint32 renew_request_packets_send = 10;
               optional uint32 rebind_request_packets_send = 11;
               optional uint32 decline_packets_send = 12;
               optional uint32 release_packets_send = 13;
            }
            optional ClientStatistics client_statistics = 5;
         }
         optional DhcpClientIf dhcp_client_if = 68;
         message DhcpSnoopingIf {
            message BasicAttribute {
               optional bool enable = 1;
               optional bool trust_enable = 2;
               optional bool check_arp_enable = 3;
               optional bool alarm_arp_enable = 4;
               optional uint32 alarm_arp_threshold = 5;
               optional bool check_ip_enable = 6;
               optional bool alarm_ip_enable = 7;
               optional uint32 alarm_ip_threshold = 8;
               optional bool alarm_reply_enable = 9;
               optional uint32 alarm_reply_threshold = 10;
               optional bool check_mac_enable = 11;
               optional bool alarm_mac_enable = 12;
               optional uint32 alarm_mac_threshold = 13;
               optional bool check_user_bind_enable = 14;
               optional bool alarm_user_bind_enable = 15;
               optional uint32 alarm_user_bind_threshold = 16;
               optional uint32 max_user_number = 17;
               optional bool alarm_user_limit_enable = 18;
               optional uint32 alarm_user_limit_threshold = 19;
            }
            optional BasicAttribute basic_attribute = 1;
            message StaticBinds {
               message StaticBind {
                  optional string ip_address = 1;
                  optional uint32 vlan_id = 2;
                  optional uint32 cevlan_id = 3;
                  optional string mac_address = 4;
               }
               repeated StaticBind static_bind = 1;
            }
            optional StaticBinds static_binds = 2;
         }
         optional DhcpSnoopingIf dhcp_snooping_if = 69;
         message Dhcpv6RelayAttribute {
            optional string source_address = 1;
            optional string link_address = 2;
            optional bool strict_check = 3;
            optional string server_group_name = 4;
            message DestinationAddresses {
               message DestinationAddress {
                  optional string ipv6_address = 1;
               }
               repeated DestinationAddress destination_address = 1;
            }
            optional DestinationAddresses destination_addresses = 5;
            message DestinationIfs {
               message DestinationIf {
                  optional string if_name = 1;
               }
               repeated DestinationIf destination_if = 1;
            }
            optional DestinationIfs destination_ifs = 6;
            message RebuildOption {
               optional bool rebuild_interface_id = 1;
               optional bool rebuild_remote_id = 2;
            }
            optional RebuildOption rebuild_option = 7;
            message AccessLimitSetting {
               optional uint32 access_limit = 1;
               optional uint32 access_vlan_limit = 2;
            }
            optional AccessLimitSetting access_limit_setting = 8;
            message PdRouteTrackVrrp {
               optional uint32 degrade_cost = 1;
            }
            optional PdRouteTrackVrrp pd_route_track_vrrp = 9;
         }
         optional Dhcpv6RelayAttribute dhcpv6_relay_attribute = 70;
         message If8021PPriority {
            optional uint32 value = 1;
         }
         optional If8021PPriority if_8021p_priority = 71;
         message ManagementPlaneDefendIf {
            optional uint32 policy_id = 1;
         }
         optional ManagementPlaneDefendIf management_plane_defend_if = 72;
         message FrEncapsulation {
            enum Encapsulation {
               INVALID_ENUM_VALUE_Encapsulation = 0;
               Encapsulation_IETF = 19;
               Encapsulation_NONSTANDARD = 20;
            };
            optional Encapsulation encapsulation = 1;
         }
         optional FrEncapsulation fr_encapsulation = 73;
         message TrackMonitorGroup {
            optional string name = 1;
            optional uint32 down_weight = 2;
         }
         optional TrackMonitorGroup track_monitor_group = 74;
         message Nvo3VtepStatistics {
            message Nvo3VtepStatistic {
               optional uint32 vni = 1;
               optional string peer = 2;
               enum Mode {
                  Mode_L2 = 0;
                  Mode_L3 = 1;
               };
               optional Mode mode = 3;
               enum Direction {
                  Direction_INBOUND = 0;
                  Direction_OUTBOUND = 1;
                  Direction_BIDIRECTION = 2;
               };
               optional Direction direction = 4;
               message Collections {
                  message Collection {
                     optional string source_addr = 1;
                     optional uint64 send_bits_rate = 2;
                     optional uint64 send_pkts_rate = 3;
                     optional uint64 send_unicast_pkts = 4;
                     optional uint64 send_multicast_pkts = 5;
                     optional uint64 send_broadcast_pkts = 6;
                     optional uint64 send_total_bytes = 7;
                     optional uint64 send_total_pkts = 8;
                     optional uint64 receive_bits_rate = 9;
                     optional uint64 receive_pkts_rate = 10;
                     optional uint64 receive_unicast_pkts = 11;
                     optional uint64 receive_multicast_pkts = 12;
                     optional uint64 receive_broadcast_pkts = 13;
                     optional uint64 receive_total_bytes = 14;
                     optional uint64 receive_total_pkts = 15;
                     optional uint64 drop_unicast_pkts = 16;
                     optional uint64 drop_multicast_pkts = 17;
                     optional uint64 drop_broadcast_pkts = 18;
                  }
                  repeated Collection collection = 1;
               }
               optional Collections collections = 5;
            }
            repeated Nvo3VtepStatistic nvo3_vtep_statistic = 1;
         }
         optional Nvo3VtepStatistics nvo3_vtep_statistics = 75;
         message IfIcmpSecuritys {
            message IfIcmpSecurity {
               enum Action {
                  Action_RECEIVEX_PKT = 0;
                  Action_SENDX_PKT = 1;
               };
               optional Action action = 1;
               enum IcmpName {
                  IcmpName_USERX_DEFINED = 0;
                  IcmpName_ECHO = 1;
                  IcmpName_ECHOX_REPLY = 2;
                  IcmpName_FRAGMENTNEEDX_DFSET = 3;
                  IcmpName_HOSTX_REDIRECT = 4;
                  IcmpName_HOSTX_TOSX_REDIRECT = 5;
                  IcmpName_HOSTX_UNREACHABLE = 6;
                  IcmpName_INFORMATIONX_REPLY = 7;
                  IcmpName_INFORMATIONX_REQUEST = 8;
                  IcmpName_NETX_REDIRECT = 9;
                  IcmpName_NETX_TOSX_REDIRECT = 10;
                  IcmpName_NETX_UNREACHABLE = 11;
                  IcmpName_PARAMETERX_PROBLEM = 12;
                  IcmpName_PORTX_UNREACHABLE = 13;
                  IcmpName_PROTOCOLX_UNREACHABLE = 14;
                  IcmpName_REASSEMBLYX_TIMEOUT = 15;
                  IcmpName_SOURCEX_QUENCH = 16;
                  IcmpName_SOURCEX_ROUTEX_FAILED = 17;
                  IcmpName_TIMESTAMPX_REPLY = 18;
                  IcmpName_TIMESTAMPX_REQUEST = 19;
                  IcmpName_TTLX_EXCEEDED = 20;
               };
               optional IcmpName icmp_name = 2;
               optional uint32 icmp_type = 3;
               optional uint32 icmp_code = 4;
               enum SwitchOperation {
                  SwitchOperation_ENABLE = 0;
                  SwitchOperation_DISABLE = 1;
               };
               optional SwitchOperation switch_operation = 5;
            }
            repeated IfIcmpSecurity if_icmp_security = 1;
         }
         optional IfIcmpSecuritys if_icmp_securitys = 76;
         message IfIpOptSecuritys {
            message IfIpOptSecurity {
               enum OptionType {
                  OptionType_ROUTEX_ALERT = 0;
                  OptionType_ROUTEX_RECORD = 1;
                  OptionType_SOURCEX_ROUTE = 2;
                  OptionType_TIMEX_STAMP = 3;
               };
               optional OptionType option_type = 1;
               enum Switch {
                  Switch_ENABLE = 0;
                  Switch_DISABLE = 1;
               };
               optional Switch switch = 2;
            }
            repeated IfIpOptSecurity if_ip_opt_security = 1;
         }
         optional IfIpOptSecuritys if_ip_opt_securitys = 77;
         message IpVerifySrcAddr {
         }
         optional IpVerifySrcAddr ip_verify_src_addr = 78;
         message IpFwdBroadcast {
            optional string acl_name_or_num = 1;
         }
         optional IpFwdBroadcast ip_fwd_broadcast = 79;
      }
      repeated Interface interface = 1;
   }
   optional Interfaces interfaces = 2;
   message Global {
      optional uint32 statistic_interval = 1;
      optional bool ipv4_ignore_primary_sub = 2;
      message Ipv4ConflictEnable {
         optional bool preempt_enable = 1;
      }
      optional Ipv4ConflictEnable ipv4_conflict_enable = 3;
      message Ipv6ConflictEnable {
         optional bool preempt_enable = 1;
      }
      optional Ipv6ConflictEnable ipv6_conflict_enable = 4;
      optional bool sub_interface_link_trap_enable = 5;
   }
   optional Global global = 3;
   message Damp {
      optional bool tx_off = 1;
      message Level {
         message Auto {
         }
         optional Auto auto = 1;
         message Manual {
         }
         optional Manual manual = 2;
      }
      optional Level level = 2;
   }
   optional Damp damp = 4;
   message StaticDimensionRanges {
      message StaticDimensionRange {
         enum Type {
            Type_ETHERNET = 0;
            Type_GIGABITETHERNET = 2;
            Type_ETHX_TRUNK = 4;
            Type_IPX_TRUNK = 5;
            Type_VIRTUALX_ETHERNET = 6;
            Type_SERIAL = 8;
            Type_POS = 9;
            Type_CPOS = 10;
            Type_ATM = 11;
            Type_TUNNEL = 14;
            Type_VLANIF = 15;
            Type_NULL = 18;
            Type_LOOPBACK = 19;
            Type_X_100GE = 20;
            Type_LMPIF = 21;
            Type_MTUNNEL = 22;
            Type_X_40GE = 23;
            Type_X_10GE = 24;
            Type_GEBRIEF = 25;
            Type_METH = 26;
            Type_STACKX_PORT = 27;
            Type_SIP = 28;
            Type_E1 = 30;
            Type_MPX_GROUP = 31;
            Type_IMAX_GROUP = 32;
            Type_VMETH = 33;
            Type_REMOTEX_AP = 35;
            Type_VBRIDGE = 36;
            Type_ATMX_BUNDLE = 37;
            Type_FIBERX_CHANNEL = 38;
            Type_INFINIBAND = 39;
            Type_VBDIF = 40;
            Type_T1 = 41;
            Type_T3 = 42;
            Type_VC4 = 43;
            Type_VC12 = 44;
            Type_GLOBALX_VE = 45;
            Type_FABRICX_PORT = 46;
            Type_E3 = 48;
            Type_VP = 49;
            Type_DCNINTERFACE = 50;
            Type_CPOSX_TRUNK = 51;
            Type_TRUNKX_SERIAL = 52;
            Type_GLOBALX_MPX_GROUP = 53;
            Type_OTN = 55;
            Type_GLOBALX_IMAX_GROUP = 57;
            Type_POSX_TRUNK = 59;
            Type_GMPLSX_UNI = 63;
            Type_WDM = 64;
            Type_NVE = 65;
            Type_FCOEX_PORT = 67;
            Type_VIRTUALX_TEMPLATE = 68;
            Type_FC = 70;
            Type_X_4X10GE = 71;
            Type_X_10X10GE = 72;
            Type_X_3X40GE = 73;
            Type_X_4X25GE = 74;
            Type_X_25GE = 75;
            Type_IMETH = 79;
            Type_PWX_VE = 88;
            Type_VXX_TUNNEL = 89;
            Type_SERVICEIF = 90;
            Type_XGIGABITETHERNET = 91;
            Type_X_200GE = 92;
            Type_VIRTUALX_ODUK = 94;
            Type_FLEXE = 95;
            Type_FLEXEX_200GE = 96;
            Type_X_50X_100GE = 101;
            Type_X_50GE = 102;
            Type_FLEXEX_50G = 103;
            Type_FLEXEX_100G = 104;
            Type_FLEXEX_50X_100G = 105;
            Type_VIRTUALX_SERIAL = 107;
            Type_X_400GE = 108;
            Type_HPGE = 114;
            Type_VIRTUALX_IF = 116;
         };
         optional Type type = 1;
         optional string chassis_range = 2;
         optional string slot_range = 3;
         optional string card_range = 4;
         optional string port_range = 5;
      }
      repeated StaticDimensionRange static_dimension_range = 1;
   }
   optional StaticDimensionRanges static_dimension_ranges = 5;
   message Ipv4InterfaceCount {
      optional uint32 physical_up_count = 1;
      optional uint32 physical_down_count = 2;
      optional uint32 protocol_up_count = 3;
      optional uint32 protocol_down_count = 4;
   }
   optional Ipv4InterfaceCount ipv4_interface_count = 6;
   message RemoteInterfaces {
      message RemoteInterface {
         optional string name = 1;
         optional uint32 index = 2;
         message RemoteStatisticsState {
            optional string last_cleared_time = 1;
            optional uint64 in_bit_rate = 2;
            optional uint64 in_packet_rate = 3;
            optional uint64 in_peak_bit_rate = 4;
            optional string in_peak_bit_rate_record_time = 5;
            optional uint64 out_bit_rate = 6;
            optional uint64 out_packet_rate = 7;
            optional uint64 out_peak_bit_rate = 8;
            optional string out_peak_bit_rate_record_time = 9;
            optional string in_use_rate = 10;
            optional string out_use_rate = 11;
         }
         optional RemoteStatisticsState remote_statistics_state = 3;
      }
      repeated RemoteInterface remote_interface = 1;
   }
   optional RemoteInterfaces remote_interfaces = 7;
   message AutoRecoveryTimes {
      message AutoRecoveryTime {
         enum ErrorDownType {
            ErrorDownType_BPDUX_PROTECTION = 0;
            ErrorDownType_AUTOX_DEFEND = 1;
            ErrorDownType_MONITORX_LINK = 2;
            ErrorDownType_PORTSECX_REACHEDX_LIMIT = 65;
            ErrorDownType_STORMX_CONTROL = 66;
            ErrorDownType_LOOPBACKX_DETECT = 67;
            ErrorDownType_DUALX_ACTIVE = 68;
            ErrorDownType_MACX_ADDRESSX_FLAPPING = 69;
            ErrorDownType_NOX_STACKX_LINK = 70;
            ErrorDownType_CRCX_STATISTICS = 71;
            ErrorDownType_TRANSCEIVERX_POWERX_LOW = 72;
            ErrorDownType_LINKX_FLAP = 73;
            ErrorDownType_L2X_LOOPX_OCCURED = 74;
            ErrorDownType_STACKX_MEMBERX_EXCEEDX_LIMIT = 75;
            ErrorDownType_SPINEX_MEMBERX_EXCEEDX_LIMIT = 76;
            ErrorDownType_RESOURCEX_MISMATCH = 77;
            ErrorDownType_LEAFX_MSTP = 78;
            ErrorDownType_MX_LAG = 79;
            ErrorDownType_FABRICX_UPLINKX_THRESHOLD = 80;
            ErrorDownType_STACKX_CONFIGX_CONFLICT = 81;
            ErrorDownType_SPINEX_TYPEX_UNSUPPORTED = 82;
            ErrorDownType_STACKX_PACKETX_DEFENSIVE = 83;
            ErrorDownType_FORWARDX_ENGINEX_BUFFERX_FAILED = 85;
            ErrorDownType_FORWARDX_ENGINEX_INTERFACEX_FAILED = 86;
            ErrorDownType_FABRICX_LINKX_FAILURE = 87;
            ErrorDownType_MX_LAGX_CONSISTENCYX_CHECK = 88;
         };
         optional ErrorDownType error_down_type = 1;
         optional uint32 time_value = 2;
      }
      repeated AutoRecoveryTime auto_recovery_time = 1;
   }
   optional AutoRecoveryTimes auto_recovery_times = 8;
   message HdlcDamp {
      optional bool enable = 1;
      enum DampLevel {
         DampLevel_LIGHT = 0;
         DampLevel_MIDDLE = 1;
         DampLevel_HEAVY = 2;
         DampLevel_MANUAL = 3;
      };
      optional DampLevel damp_level = 2;
      optional uint32 suppress = 3;
      optional uint32 reuse = 4;
      optional uint32 max_suppress_time = 5;
      optional uint32 half_lifeperiod = 6;
   }
   optional HdlcDamp hdlc_damp = 9;
}

